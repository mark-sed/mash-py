# The file was automatically generated by Lark v1.1.3
__version__ = "1.1.3"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Sequence, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:'rich.tree.Tree'=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        while stack:
            node = stack.pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack.append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    type: str
    start_pos: int
    value: Any
    line: int
    column: int
    end_line: int
    end_column: int
    end_pos: int

    def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)
        inst.type = type_
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr=None, last_token=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str):
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens: Dict[FrozenSet[str], BasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text):
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)
        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = md5_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_md5, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_md5 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_md5 is not None
                    f.write(cache_md5.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}], 'ignore': ['WS_INLINE', 'INL_COMMENT', 'C_COMMENT'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'DOT', 1: 'SCOPE', 2: '__ANON_0', 3: 'RSQB', 4: 'SLASH', 5: 'QMARK', 6: 'PERCENT', 7: 'IN', 8: 'LSQB', 9: '__ANON_1', 10: 'PLUS', 11: 'MORETHAN', 12: '__ANON_2', 13: 'IF', 14: 'OR', 15: 'MINUS', 16: '__ANON_8', 17: 'COMMA', 18: 'LESSTHAN', 19: 'CIRCUMFLEX', 20: '__ANON_3', 21: '_END', 22: '__ANON_6', 23: 'RBRACE', 24: '__ANON_4', 25: '__ANON_7', 26: 'COLON', 27: 'STAR', 28: 'AND', 29: 'RPAR', 30: '__ANON_5', 31: 'LPAR', 32: 'EQUAL', 33: 'ASSIGN_OP', 34: 'NON_LOC', 35: 'list', 36: '_dot_name', 37: 'add_e', 38: '_scope_no_glob', 39: 'product', 40: 'SIGNED_FLOAT', 41: 'VAR_NAME', 42: 'LBRACE', 43: 'scope_name', 44: 'SIGNED_INT', 45: 'in_e', 46: 'dict', 47: 'cat_e', 48: 'exp_e', 49: 'TRUE', 50: 'neg_e', 51: 'xstring', 52: 'NIL', 53: 'HEX_INT', 54: '_pscope_name', 55: 'const', 56: 'STRING', 57: '_space_name', 58: 'FALSE', 59: 'atom', 60: '___stmt_plus_0', 61: 'NEW', 62: 'FLOW_CTRL', 63: 'TRY', 64: 'ELSE', 65: 'SPACE', 66: 'ELIF', 67: '$END', 68: 'CATCH', 69: 'RETURN', 70: 'FUN', 71: 'TILDE', 72: 'DO', 73: 'CLASS', 74: 'WHILE', 75: 'FINALLY', 76: 'FOR', 77: 'BANG', 78: 'IMPORT', 79: 'NOT', 80: 'RAISE', 81: 'ENUM', 82: '_enum_name_list', 83: 'catch', 84: 'finally', 85: 'fun_args', 86: '_arg_list_ndef', 87: 'arg_list', 88: 'typed_var', 89: 'var_args_list', 90: 'expr', 91: 'cmp_e', 92: '_pslice', 93: 'shc_e', 94: '_pmember', 95: 'log_e', 96: 'lambda', 97: 'ternary_if', 98: 'not_e', 99: 'fun_call', 100: 'member', 101: 'op_assign', 102: 'do_while', 103: 'start', 104: '_rvalue', 105: 'try', 106: 'assignment', 107: 'if', 108: '_definition', 109: 'scope_list', 110: 'construct', 111: 'function', 112: 'space', 113: 'import', 114: 'while', 115: 'return', 116: '_stmts', 117: 'class', 118: 'silent_expr', 119: 'enum', 120: 'for', 121: '_stmt', 122: 'raise', 123: 'code_block', 124: 'list_assig', 125: 'fun_call_args', 126: 'arg_list_call_v', 127: 'arg_list_call_exp', 128: '__try_plus_2', 129: '_space_no_glob', 130: 'space_list', 131: '_pspace_name', 132: '_class_code_block', 133: '_dict_val_list', 134: '_list_vals', 135: '___ifel_plus_1', 136: 'elif', 137: 'else', 138: '_ifel', 139: 'FUN_OP', 140: 'fun_code_block', 141: 'INTERNAL', 142: '_type_list_val', 143: 'AS', 144: 'type_list', 145: 'var_list', 146: 'MULT_STRING', 147: 'ES_STR', 148: 'constructor', 149: '_clstmts', 150: '_pspace_scope', 151: '_list_space_scope', 152: 'space_scope', 153: '_clstmt'}, 'states': {0: {0: (0, 631), 1: (0, 437), 2: (1, {'@': 403}), 3: (1, {'@': 403}), 4: (1, {'@': 403}), 5: (1, {'@': 403}), 6: (1, {'@': 403}), 7: (1, {'@': 403}), 8: (1, {'@': 403}), 9: (1, {'@': 403}), 10: (1, {'@': 403}), 11: (1, {'@': 403}), 12: (1, {'@': 403}), 13: (1, {'@': 403}), 14: (1, {'@': 403}), 15: (1, {'@': 403}), 16: (1, {'@': 403}), 17: (1, {'@': 403}), 18: (1, {'@': 403}), 19: (1, {'@': 403}), 20: (1, {'@': 403}), 21: (1, {'@': 403}), 22: (1, {'@': 403}), 23: (1, {'@': 403}), 24: (1, {'@': 403}), 25: (1, {'@': 403}), 26: (1, {'@': 403}), 27: (1, {'@': 403}), 28: (1, {'@': 403}), 29: (1, {'@': 403}), 30: (1, {'@': 403}), 31: (1, {'@': 403}), 32: (1, {'@': 403}), 33: (1, {'@': 403})}, 1: {26: (0, 423), 32: (0, 468), 17: (1, {'@': 244}), 29: (1, {'@': 244})}, 2: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 45: (0, 102), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 3: {26: (0, 423), 32: (0, 468), 17: (1, {'@': 246}), 29: (1, {'@': 246})}, 4: {32: (0, 379), 17: (1, {'@': 247}), 29: (1, {'@': 247})}, 5: {29: (0, 87)}, 6: {60: (0, 165), 21: (0, 201), 61: (1, {'@': 347}), 44: (1, {'@': 347}), 62: (1, {'@': 347}), 42: (1, {'@': 347}), 15: (1, {'@': 347}), 63: (1, {'@': 347}), 64: (1, {'@': 347}), 65: (1, {'@': 347}), 53: (1, {'@': 347}), 66: (1, {'@': 347}), 67: (1, {'@': 347}), 58: (1, {'@': 347}), 68: (1, {'@': 347}), 56: (1, {'@': 347}), 8: (1, {'@': 347}), 69: (1, {'@': 347}), 70: (1, {'@': 347}), 31: (1, {'@': 347}), 71: (1, {'@': 347}), 13: (1, {'@': 347}), 72: (1, {'@': 347}), 73: (1, {'@': 347}), 41: (1, {'@': 347}), 1: (1, {'@': 347}), 49: (1, {'@': 347}), 74: (1, {'@': 347}), 75: (1, {'@': 347}), 40: (1, {'@': 347}), 76: (1, {'@': 347}), 77: (1, {'@': 347}), 23: (1, {'@': 347}), 78: (1, {'@': 347}), 52: (1, {'@': 347}), 79: (1, {'@': 347}), 80: (1, {'@': 347}), 81: (1, {'@': 347}), 34: (1, {'@': 347})}, 7: {82: (0, 355), 41: (0, 380), 21: (0, 88), 23: (1, {'@': 388})}, 8: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 45: (0, 23), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 9: {61: (1, {'@': 287}), 44: (1, {'@': 287}), 62: (1, {'@': 287}), 42: (1, {'@': 287}), 15: (1, {'@': 287}), 63: (1, {'@': 287}), 64: (1, {'@': 287}), 65: (1, {'@': 287}), 21: (1, {'@': 287}), 53: (1, {'@': 287}), 66: (1, {'@': 287}), 67: (1, {'@': 287}), 58: (1, {'@': 287}), 68: (1, {'@': 287}), 56: (1, {'@': 287}), 8: (1, {'@': 287}), 69: (1, {'@': 287}), 70: (1, {'@': 287}), 31: (1, {'@': 287}), 71: (1, {'@': 287}), 13: (1, {'@': 287}), 72: (1, {'@': 287}), 73: (1, {'@': 287}), 41: (1, {'@': 287}), 1: (1, {'@': 287}), 49: (1, {'@': 287}), 74: (1, {'@': 287}), 75: (1, {'@': 287}), 40: (1, {'@': 287}), 76: (1, {'@': 287}), 77: (1, {'@': 287}), 23: (1, {'@': 287}), 78: (1, {'@': 287}), 52: (1, {'@': 287}), 79: (1, {'@': 287}), 80: (1, {'@': 287}), 81: (1, {'@': 287}), 34: (1, {'@': 287})}, 10: {7: (0, 44), 2: (1, {'@': 140}), 3: (1, {'@': 140}), 5: (1, {'@': 140}), 8: (1, {'@': 140}), 9: (1, {'@': 140}), 11: (1, {'@': 140}), 12: (1, {'@': 140}), 13: (1, {'@': 140}), 14: (1, {'@': 140}), 16: (1, {'@': 140}), 17: (1, {'@': 140}), 18: (1, {'@': 140}), 20: (1, {'@': 140}), 21: (1, {'@': 140}), 23: (1, {'@': 140}), 24: (1, {'@': 140}), 26: (1, {'@': 140}), 28: (1, {'@': 140}), 29: (1, {'@': 140}), 30: (1, {'@': 140})}, 11: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 166), 44: (1, {'@': 325}), 62: (1, {'@': 325}), 42: (1, {'@': 325}), 15: (1, {'@': 325}), 63: (1, {'@': 325}), 65: (1, {'@': 325}), 21: (1, {'@': 325}), 53: (1, {'@': 325}), 67: (1, {'@': 325}), 58: (1, {'@': 325}), 56: (1, {'@': 325}), 8: (1, {'@': 325}), 69: (1, {'@': 325}), 70: (1, {'@': 325}), 31: (1, {'@': 325}), 71: (1, {'@': 325}), 13: (1, {'@': 325}), 72: (1, {'@': 325}), 73: (1, {'@': 325}), 41: (1, {'@': 325}), 1: (1, {'@': 325}), 49: (1, {'@': 325}), 74: (1, {'@': 325}), 40: (1, {'@': 325}), 76: (1, {'@': 325}), 77: (1, {'@': 325}), 78: (1, {'@': 325}), 52: (1, {'@': 325}), 79: (1, {'@': 325}), 80: (1, {'@': 325}), 81: (1, {'@': 325}), 34: (1, {'@': 325}), 61: (1, {'@': 325}), 64: (1, {'@': 325}), 66: (1, {'@': 325}), 23: (1, {'@': 325})}, 12: {2: (1, {'@': 133}), 3: (1, {'@': 133}), 5: (1, {'@': 133}), 21: (1, {'@': 133}), 8: (1, {'@': 133}), 9: (1, {'@': 133}), 23: (1, {'@': 133}), 13: (1, {'@': 133}), 14: (1, {'@': 133}), 26: (1, {'@': 133}), 16: (1, {'@': 133}), 17: (1, {'@': 133}), 28: (1, {'@': 133}), 29: (1, {'@': 133})}, 13: {85: (0, 5), 86: (0, 29), 87: (0, 198), 41: (0, 1), 88: (0, 120), 89: (0, 135), 27: (0, 173), 29: (1, {'@': 243})}, 14: {17: (1, {'@': 323}), 26: (1, {'@': 323})}, 15: {32: (1, {'@': 257}), 17: (1, {'@': 257}), 29: (1, {'@': 257})}, 16: {32: (1, {'@': 258}), 17: (1, {'@': 258}), 29: (1, {'@': 258})}, 17: {60: (0, 59), 21: (0, 201)}, 18: {79: (0, 110), 90: (0, 78), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 96: (0, 103), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 19: {44: (1, {'@': 326}), 62: (1, {'@': 326}), 42: (1, {'@': 326}), 15: (1, {'@': 326}), 63: (1, {'@': 326}), 65: (1, {'@': 326}), 21: (1, {'@': 326}), 53: (1, {'@': 326}), 67: (1, {'@': 326}), 58: (1, {'@': 326}), 56: (1, {'@': 326}), 8: (1, {'@': 326}), 69: (1, {'@': 326}), 70: (1, {'@': 326}), 31: (1, {'@': 326}), 71: (1, {'@': 326}), 13: (1, {'@': 326}), 72: (1, {'@': 326}), 73: (1, {'@': 326}), 41: (1, {'@': 326}), 1: (1, {'@': 326}), 49: (1, {'@': 326}), 74: (1, {'@': 326}), 40: (1, {'@': 326}), 76: (1, {'@': 326}), 77: (1, {'@': 326}), 78: (1, {'@': 326}), 52: (1, {'@': 326}), 79: (1, {'@': 326}), 80: (1, {'@': 326}), 81: (1, {'@': 326}), 34: (1, {'@': 326}), 61: (1, {'@': 326}), 64: (1, {'@': 326}), 66: (1, {'@': 326}), 68: (1, {'@': 326}), 75: (1, {'@': 326}), 23: (1, {'@': 326})}, 20: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 21: (0, 201), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 500), 103: (0, 503), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 116: (0, 422), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 121: (0, 493), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427), 67: (1, {'@': 76})}, 21: {3: (1, {'@': 264}), 5: (1, {'@': 264}), 21: (1, {'@': 264}), 8: (1, {'@': 264}), 31: (1, {'@': 264}), 23: (1, {'@': 264}), 13: (1, {'@': 264}), 26: (1, {'@': 264}), 16: (1, {'@': 264}), 17: (1, {'@': 264}), 29: (1, {'@': 264})}, 22: {29: (1, {'@': 239})}, 23: {7: (0, 44), 2: (1, {'@': 143}), 3: (1, {'@': 143}), 5: (1, {'@': 143}), 8: (1, {'@': 143}), 9: (1, {'@': 143}), 11: (1, {'@': 143}), 12: (1, {'@': 143}), 13: (1, {'@': 143}), 14: (1, {'@': 143}), 16: (1, {'@': 143}), 17: (1, {'@': 143}), 18: (1, {'@': 143}), 20: (1, {'@': 143}), 21: (1, {'@': 143}), 23: (1, {'@': 143}), 24: (1, {'@': 143}), 26: (1, {'@': 143}), 28: (1, {'@': 143}), 29: (1, {'@': 143}), 30: (1, {'@': 143})}, 24: {44: (1, {'@': 366}), 62: (1, {'@': 366}), 42: (1, {'@': 366}), 15: (1, {'@': 366}), 63: (1, {'@': 366}), 65: (1, {'@': 366}), 21: (1, {'@': 366}), 53: (1, {'@': 366}), 67: (1, {'@': 366}), 58: (1, {'@': 366}), 56: (1, {'@': 366}), 8: (1, {'@': 366}), 69: (1, {'@': 366}), 70: (1, {'@': 366}), 31: (1, {'@': 366}), 71: (1, {'@': 366}), 13: (1, {'@': 366}), 72: (1, {'@': 366}), 73: (1, {'@': 366}), 41: (1, {'@': 366}), 1: (1, {'@': 366}), 49: (1, {'@': 366}), 74: (1, {'@': 366}), 40: (1, {'@': 366}), 76: (1, {'@': 366}), 77: (1, {'@': 366}), 78: (1, {'@': 366}), 52: (1, {'@': 366}), 79: (1, {'@': 366}), 80: (1, {'@': 366}), 81: (1, {'@': 366}), 34: (1, {'@': 366}), 61: (1, {'@': 366}), 64: (1, {'@': 366}), 66: (1, {'@': 366}), 68: (1, {'@': 366}), 75: (1, {'@': 366}), 23: (1, {'@': 366})}, 25: {32: (0, 174)}, 26: {32: (0, 176), 26: (0, 423)}, 27: {61: (1, {'@': 299}), 44: (1, {'@': 299}), 62: (1, {'@': 299}), 42: (1, {'@': 299}), 15: (1, {'@': 299}), 63: (1, {'@': 299}), 64: (1, {'@': 299}), 65: (1, {'@': 299}), 21: (1, {'@': 299}), 53: (1, {'@': 299}), 66: (1, {'@': 299}), 67: (1, {'@': 299}), 58: (1, {'@': 299}), 68: (1, {'@': 299}), 56: (1, {'@': 299}), 8: (1, {'@': 299}), 69: (1, {'@': 299}), 70: (1, {'@': 299}), 31: (1, {'@': 299}), 71: (1, {'@': 299}), 13: (1, {'@': 299}), 72: (1, {'@': 299}), 73: (1, {'@': 299}), 41: (1, {'@': 299}), 1: (1, {'@': 299}), 49: (1, {'@': 299}), 74: (1, {'@': 299}), 75: (1, {'@': 299}), 40: (1, {'@': 299}), 76: (1, {'@': 299}), 77: (1, {'@': 299}), 23: (1, {'@': 299}), 78: (1, {'@': 299}), 52: (1, {'@': 299}), 79: (1, {'@': 299}), 80: (1, {'@': 299}), 81: (1, {'@': 299}), 34: (1, {'@': 299})}, 28: {79: (0, 110), 90: (0, 457), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 29: {17: (0, 346), 29: (1, {'@': 236})}, 30: {23: (0, 542)}, 31: {44: (1, {'@': 371}), 62: (1, {'@': 371}), 42: (1, {'@': 371}), 15: (1, {'@': 371}), 63: (1, {'@': 371}), 65: (1, {'@': 371}), 21: (1, {'@': 371}), 53: (1, {'@': 371}), 67: (1, {'@': 371}), 58: (1, {'@': 371}), 56: (1, {'@': 371}), 8: (1, {'@': 371}), 69: (1, {'@': 371}), 70: (1, {'@': 371}), 31: (1, {'@': 371}), 71: (1, {'@': 371}), 13: (1, {'@': 371}), 72: (1, {'@': 371}), 73: (1, {'@': 371}), 41: (1, {'@': 371}), 1: (1, {'@': 371}), 49: (1, {'@': 371}), 74: (1, {'@': 371}), 40: (1, {'@': 371}), 76: (1, {'@': 371}), 77: (1, {'@': 371}), 78: (1, {'@': 371}), 52: (1, {'@': 371}), 79: (1, {'@': 371}), 80: (1, {'@': 371}), 81: (1, {'@': 371}), 34: (1, {'@': 371}), 61: (1, {'@': 371}), 64: (1, {'@': 371}), 66: (1, {'@': 371}), 68: (1, {'@': 371}), 75: (1, {'@': 371}), 23: (1, {'@': 371})}, 32: {21: (0, 88), 61: (1, {'@': 95}), 44: (1, {'@': 95}), 62: (1, {'@': 95}), 42: (1, {'@': 95}), 15: (1, {'@': 95}), 63: (1, {'@': 95}), 65: (1, {'@': 95}), 53: (1, {'@': 95}), 58: (1, {'@': 95}), 56: (1, {'@': 95}), 8: (1, {'@': 95}), 69: (1, {'@': 95}), 70: (1, {'@': 95}), 31: (1, {'@': 95}), 71: (1, {'@': 95}), 13: (1, {'@': 95}), 72: (1, {'@': 95}), 73: (1, {'@': 95}), 41: (1, {'@': 95}), 1: (1, {'@': 95}), 49: (1, {'@': 95}), 74: (1, {'@': 95}), 40: (1, {'@': 95}), 76: (1, {'@': 95}), 77: (1, {'@': 95}), 23: (1, {'@': 95}), 78: (1, {'@': 95}), 52: (1, {'@': 95}), 79: (1, {'@': 95}), 80: (1, {'@': 95}), 81: (1, {'@': 95}), 34: (1, {'@': 95})}, 33: {2: (1, {'@': 160}), 3: (1, {'@': 160}), 4: (1, {'@': 160}), 5: (1, {'@': 160}), 6: (1, {'@': 160}), 7: (1, {'@': 160}), 8: (1, {'@': 160}), 9: (1, {'@': 160}), 10: (1, {'@': 160}), 11: (1, {'@': 160}), 12: (1, {'@': 160}), 13: (1, {'@': 160}), 14: (1, {'@': 160}), 15: (1, {'@': 160}), 16: (1, {'@': 160}), 17: (1, {'@': 160}), 18: (1, {'@': 160}), 19: (1, {'@': 160}), 20: (1, {'@': 160}), 21: (1, {'@': 160}), 22: (1, {'@': 160}), 23: (1, {'@': 160}), 24: (1, {'@': 160}), 25: (1, {'@': 160}), 26: (1, {'@': 160}), 27: (1, {'@': 160}), 28: (1, {'@': 160}), 29: (1, {'@': 160}), 30: (1, {'@': 160})}, 34: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 248}), 29: (1, {'@': 248})}, 35: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 335), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 116: (0, 309), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 123: (0, 322), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 36: {44: (1, {'@': 332}), 62: (1, {'@': 332}), 42: (1, {'@': 332}), 15: (1, {'@': 332}), 63: (1, {'@': 332}), 65: (1, {'@': 332}), 21: (1, {'@': 332}), 53: (1, {'@': 332}), 67: (1, {'@': 332}), 58: (1, {'@': 332}), 56: (1, {'@': 332}), 8: (1, {'@': 332}), 69: (1, {'@': 332}), 70: (1, {'@': 332}), 31: (1, {'@': 332}), 71: (1, {'@': 332}), 13: (1, {'@': 332}), 72: (1, {'@': 332}), 73: (1, {'@': 332}), 41: (1, {'@': 332}), 1: (1, {'@': 332}), 49: (1, {'@': 332}), 74: (1, {'@': 332}), 40: (1, {'@': 332}), 76: (1, {'@': 332}), 77: (1, {'@': 332}), 78: (1, {'@': 332}), 52: (1, {'@': 332}), 79: (1, {'@': 332}), 80: (1, {'@': 332}), 81: (1, {'@': 332}), 34: (1, {'@': 332}), 61: (1, {'@': 332}), 64: (1, {'@': 332}), 66: (1, {'@': 332}), 68: (1, {'@': 332}), 75: (1, {'@': 332}), 23: (1, {'@': 332})}, 37: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 250}), 29: (1, {'@': 250})}, 38: {8: (0, 462), 26: (0, 115), 5: (0, 177), 3: (0, 486)}, 39: {31: (0, 344)}, 40: {2: (1, {'@': 408}), 3: (1, {'@': 408}), 4: (1, {'@': 408}), 5: (1, {'@': 408}), 6: (1, {'@': 408}), 7: (1, {'@': 408}), 8: (1, {'@': 408}), 9: (1, {'@': 408}), 10: (1, {'@': 408}), 11: (1, {'@': 408}), 12: (1, {'@': 408}), 13: (1, {'@': 408}), 14: (1, {'@': 408}), 15: (1, {'@': 408}), 16: (1, {'@': 408}), 0: (1, {'@': 408}), 1: (1, {'@': 408}), 17: (1, {'@': 408}), 18: (1, {'@': 408}), 19: (1, {'@': 408}), 20: (1, {'@': 408}), 21: (1, {'@': 408}), 22: (1, {'@': 408}), 23: (1, {'@': 408}), 24: (1, {'@': 408}), 25: (1, {'@': 408}), 26: (1, {'@': 408}), 27: (1, {'@': 408}), 28: (1, {'@': 408}), 29: (1, {'@': 408}), 30: (1, {'@': 408}), 31: (1, {'@': 408}), 32: (1, {'@': 408}), 33: (1, {'@': 408})}, 41: {42: (0, 123), 123: (0, 60), 21: (0, 88)}, 42: {3: (1, {'@': 215}), 5: (1, {'@': 215}), 21: (1, {'@': 215}), 8: (1, {'@': 215}), 31: (1, {'@': 215}), 23: (1, {'@': 215}), 13: (1, {'@': 215}), 26: (1, {'@': 215}), 16: (1, {'@': 215}), 17: (1, {'@': 215}), 29: (1, {'@': 215})}, 43: {79: (0, 110), 90: (0, 570), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 44: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 47: (0, 334), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 45: {29: (0, 280), 26: (0, 423)}, 46: {21: (0, 88), 56: (1, {'@': 81}), 44: (1, {'@': 81}), 62: (1, {'@': 81}), 8: (1, {'@': 81}), 69: (1, {'@': 81}), 70: (1, {'@': 81}), 31: (1, {'@': 81}), 42: (1, {'@': 81}), 71: (1, {'@': 81}), 13: (1, {'@': 81}), 15: (1, {'@': 81}), 72: (1, {'@': 81}), 73: (1, {'@': 81}), 41: (1, {'@': 81}), 1: (1, {'@': 81}), 63: (1, {'@': 81}), 49: (1, {'@': 81}), 74: (1, {'@': 81}), 65: (1, {'@': 81}), 40: (1, {'@': 81}), 81: (1, {'@': 81}), 76: (1, {'@': 81}), 53: (1, {'@': 81}), 77: (1, {'@': 81}), 67: (1, {'@': 81}), 78: (1, {'@': 81}), 52: (1, {'@': 81}), 79: (1, {'@': 81}), 80: (1, {'@': 81}), 58: (1, {'@': 81}), 34: (1, {'@': 81}), 61: (1, {'@': 81}), 64: (1, {'@': 81}), 66: (1, {'@': 81}), 68: (1, {'@': 81}), 75: (1, {'@': 81}), 23: (1, {'@': 81})}, 47: {17: (1, {'@': 251}), 29: (1, {'@': 251})}, 48: {79: (0, 110), 90: (0, 414), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 3: (0, 544), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 49: {2: (1, {'@': 166}), 3: (1, {'@': 166}), 4: (1, {'@': 166}), 5: (1, {'@': 166}), 6: (1, {'@': 166}), 7: (1, {'@': 166}), 8: (1, {'@': 166}), 9: (1, {'@': 166}), 10: (1, {'@': 166}), 11: (1, {'@': 166}), 12: (1, {'@': 166}), 13: (1, {'@': 166}), 14: (1, {'@': 166}), 15: (1, {'@': 166}), 16: (1, {'@': 166}), 17: (1, {'@': 166}), 18: (1, {'@': 166}), 19: (1, {'@': 166}), 20: (1, {'@': 166}), 21: (1, {'@': 166}), 22: (1, {'@': 166}), 23: (1, {'@': 166}), 24: (1, {'@': 166}), 25: (1, {'@': 166}), 26: (1, {'@': 166}), 27: (1, {'@': 166}), 28: (1, {'@': 166}), 29: (1, {'@': 166}), 30: (1, {'@': 166})}, 50: {23: (0, 282), 21: (0, 88)}, 51: {1: (1, {'@': 409}), 32: (1, {'@': 409}), 17: (1, {'@': 409}), 0: (1, {'@': 409}), 2: (1, {'@': 409}), 3: (1, {'@': 409}), 4: (1, {'@': 409}), 5: (1, {'@': 409}), 6: (1, {'@': 409}), 11: (1, {'@': 409}), 15: (1, {'@': 409}), 19: (1, {'@': 409}), 20: (1, {'@': 409}), 21: (1, {'@': 409}), 22: (1, {'@': 409}), 24: (1, {'@': 409}), 28: (1, {'@': 409}), 30: (1, {'@': 409}), 7: (1, {'@': 409}), 8: (1, {'@': 409}), 9: (1, {'@': 409}), 10: (1, {'@': 409}), 31: (1, {'@': 409}), 33: (1, {'@': 409}), 12: (1, {'@': 409}), 13: (1, {'@': 409}), 14: (1, {'@': 409}), 16: (1, {'@': 409}), 18: (1, {'@': 409}), 23: (1, {'@': 409}), 25: (1, {'@': 409}), 26: (1, {'@': 409}), 27: (1, {'@': 409}), 29: (1, {'@': 409})}, 52: {2: (1, {'@': 176}), 3: (1, {'@': 176}), 4: (1, {'@': 176}), 5: (1, {'@': 176}), 6: (1, {'@': 176}), 7: (1, {'@': 176}), 8: (1, {'@': 176}), 9: (1, {'@': 176}), 10: (1, {'@': 176}), 11: (1, {'@': 176}), 12: (1, {'@': 176}), 13: (1, {'@': 176}), 14: (1, {'@': 176}), 15: (1, {'@': 176}), 16: (1, {'@': 176}), 17: (1, {'@': 176}), 18: (1, {'@': 176}), 19: (1, {'@': 176}), 20: (1, {'@': 176}), 21: (1, {'@': 176}), 22: (1, {'@': 176}), 23: (1, {'@': 176}), 24: (1, {'@': 176}), 25: (1, {'@': 176}), 26: (1, {'@': 176}), 27: (1, {'@': 176}), 28: (1, {'@': 176}), 29: (1, {'@': 176}), 30: (1, {'@': 176})}, 53: {17: (1, {'@': 249}), 29: (1, {'@': 249})}, 54: {21: (1, {'@': 413})}, 55: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 123: (0, 259), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 116: (0, 272), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 56: {79: (0, 110), 101: (0, 17), 80: (0, 70), 116: (0, 100), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 79), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 123: (0, 140), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 57: {31: (0, 230)}, 58: {3: (1, {'@': 214}), 5: (1, {'@': 214}), 21: (1, {'@': 214}), 8: (1, {'@': 214}), 31: (1, {'@': 214}), 23: (1, {'@': 214}), 13: (1, {'@': 214}), 26: (1, {'@': 214}), 16: (1, {'@': 214}), 17: (1, {'@': 214}), 29: (1, {'@': 214})}, 59: {21: (0, 88), 56: (1, {'@': 85}), 44: (1, {'@': 85}), 62: (1, {'@': 85}), 8: (1, {'@': 85}), 69: (1, {'@': 85}), 70: (1, {'@': 85}), 31: (1, {'@': 85}), 42: (1, {'@': 85}), 71: (1, {'@': 85}), 13: (1, {'@': 85}), 15: (1, {'@': 85}), 72: (1, {'@': 85}), 73: (1, {'@': 85}), 41: (1, {'@': 85}), 1: (1, {'@': 85}), 63: (1, {'@': 85}), 49: (1, {'@': 85}), 74: (1, {'@': 85}), 65: (1, {'@': 85}), 40: (1, {'@': 85}), 81: (1, {'@': 85}), 76: (1, {'@': 85}), 53: (1, {'@': 85}), 77: (1, {'@': 85}), 67: (1, {'@': 85}), 78: (1, {'@': 85}), 52: (1, {'@': 85}), 79: (1, {'@': 85}), 80: (1, {'@': 85}), 58: (1, {'@': 85}), 34: (1, {'@': 85}), 61: (1, {'@': 85}), 64: (1, {'@': 85}), 66: (1, {'@': 85}), 68: (1, {'@': 85}), 75: (1, {'@': 85}), 23: (1, {'@': 85})}, 60: {44: (1, {'@': 364}), 62: (1, {'@': 364}), 42: (1, {'@': 364}), 15: (1, {'@': 364}), 63: (1, {'@': 364}), 65: (1, {'@': 364}), 21: (1, {'@': 364}), 53: (1, {'@': 364}), 67: (1, {'@': 364}), 58: (1, {'@': 364}), 56: (1, {'@': 364}), 8: (1, {'@': 364}), 69: (1, {'@': 364}), 70: (1, {'@': 364}), 31: (1, {'@': 364}), 71: (1, {'@': 364}), 13: (1, {'@': 364}), 72: (1, {'@': 364}), 73: (1, {'@': 364}), 41: (1, {'@': 364}), 1: (1, {'@': 364}), 49: (1, {'@': 364}), 74: (1, {'@': 364}), 40: (1, {'@': 364}), 76: (1, {'@': 364}), 77: (1, {'@': 364}), 78: (1, {'@': 364}), 52: (1, {'@': 364}), 79: (1, {'@': 364}), 80: (1, {'@': 364}), 81: (1, {'@': 364}), 34: (1, {'@': 364}), 61: (1, {'@': 364}), 64: (1, {'@': 364}), 66: (1, {'@': 364}), 68: (1, {'@': 364}), 75: (1, {'@': 364}), 23: (1, {'@': 364})}, 61: {3: (0, 587), 17: (0, 449)}, 62: {44: (1, {'@': 320}), 62: (1, {'@': 320}), 42: (1, {'@': 320}), 15: (1, {'@': 320}), 63: (1, {'@': 320}), 65: (1, {'@': 320}), 21: (1, {'@': 320}), 53: (1, {'@': 320}), 67: (1, {'@': 320}), 58: (1, {'@': 320}), 56: (1, {'@': 320}), 8: (1, {'@': 320}), 69: (1, {'@': 320}), 70: (1, {'@': 320}), 31: (1, {'@': 320}), 71: (1, {'@': 320}), 13: (1, {'@': 320}), 72: (1, {'@': 320}), 73: (1, {'@': 320}), 41: (1, {'@': 320}), 1: (1, {'@': 320}), 49: (1, {'@': 320}), 74: (1, {'@': 320}), 40: (1, {'@': 320}), 76: (1, {'@': 320}), 77: (1, {'@': 320}), 78: (1, {'@': 320}), 52: (1, {'@': 320}), 79: (1, {'@': 320}), 80: (1, {'@': 320}), 81: (1, {'@': 320}), 34: (1, {'@': 320}), 61: (1, {'@': 320}), 64: (1, {'@': 320}), 66: (1, {'@': 320}), 68: (1, {'@': 320}), 75: (1, {'@': 320}), 23: (1, {'@': 320})}, 63: {2: (1, {'@': 406}), 3: (1, {'@': 406}), 4: (1, {'@': 406}), 5: (1, {'@': 406}), 6: (1, {'@': 406}), 7: (1, {'@': 406}), 8: (1, {'@': 406}), 9: (1, {'@': 406}), 10: (1, {'@': 406}), 11: (1, {'@': 406}), 12: (1, {'@': 406}), 13: (1, {'@': 406}), 14: (1, {'@': 406}), 15: (1, {'@': 406}), 16: (1, {'@': 406}), 0: (1, {'@': 406}), 1: (1, {'@': 406}), 17: (1, {'@': 406}), 18: (1, {'@': 406}), 19: (1, {'@': 406}), 20: (1, {'@': 406}), 21: (1, {'@': 406}), 22: (1, {'@': 406}), 23: (1, {'@': 406}), 24: (1, {'@': 406}), 25: (1, {'@': 406}), 26: (1, {'@': 406}), 27: (1, {'@': 406}), 28: (1, {'@': 406}), 29: (1, {'@': 406}), 30: (1, {'@': 406}), 31: (1, {'@': 406}), 32: (1, {'@': 406}), 33: (1, {'@': 406})}, 64: {8: (0, 462), 5: (0, 177), 26: (0, 354), 3: (0, 413)}, 65: {29: (0, 133)}, 66: {1: (0, 437), 0: (0, 631), 2: (1, {'@': 404}), 3: (1, {'@': 404}), 4: (1, {'@': 404}), 5: (1, {'@': 404}), 6: (1, {'@': 404}), 7: (1, {'@': 404}), 8: (1, {'@': 404}), 9: (1, {'@': 404}), 10: (1, {'@': 404}), 11: (1, {'@': 404}), 12: (1, {'@': 404}), 13: (1, {'@': 404}), 14: (1, {'@': 404}), 15: (1, {'@': 404}), 16: (1, {'@': 404}), 17: (1, {'@': 404}), 18: (1, {'@': 404}), 19: (1, {'@': 404}), 20: (1, {'@': 404}), 21: (1, {'@': 404}), 22: (1, {'@': 404}), 23: (1, {'@': 404}), 24: (1, {'@': 404}), 25: (1, {'@': 404}), 26: (1, {'@': 404}), 27: (1, {'@': 404}), 28: (1, {'@': 404}), 29: (1, {'@': 404}), 30: (1, {'@': 404}), 31: (1, {'@': 404}), 32: (1, {'@': 404}), 33: (1, {'@': 404})}, 67: {44: (1, {'@': 367}), 62: (1, {'@': 367}), 42: (1, {'@': 367}), 15: (1, {'@': 367}), 63: (1, {'@': 367}), 65: (1, {'@': 367}), 21: (1, {'@': 367}), 53: (1, {'@': 367}), 67: (1, {'@': 367}), 58: (1, {'@': 367}), 56: (1, {'@': 367}), 8: (1, {'@': 367}), 69: (1, {'@': 367}), 70: (1, {'@': 367}), 31: (1, {'@': 367}), 71: (1, {'@': 367}), 13: (1, {'@': 367}), 72: (1, {'@': 367}), 73: (1, {'@': 367}), 41: (1, {'@': 367}), 1: (1, {'@': 367}), 49: (1, {'@': 367}), 74: (1, {'@': 367}), 40: (1, {'@': 367}), 76: (1, {'@': 367}), 77: (1, {'@': 367}), 78: (1, {'@': 367}), 52: (1, {'@': 367}), 79: (1, {'@': 367}), 80: (1, {'@': 367}), 81: (1, {'@': 367}), 34: (1, {'@': 367}), 61: (1, {'@': 367}), 64: (1, {'@': 367}), 66: (1, {'@': 367}), 68: (1, {'@': 367}), 75: (1, {'@': 367}), 23: (1, {'@': 367})}, 68: {79: (0, 110), 90: (0, 441), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 96: (0, 639), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 104: (0, 593), 34: (0, 400), 118: (0, 419), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 71: (0, 405), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 69: {79: (0, 110), 90: (0, 357), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 96: (0, 342), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 70: {79: (0, 110), 90: (0, 213), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 96: (0, 216), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 71: {29: (0, 371)}, 72: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 123: (0, 99), 116: (0, 27), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 73: {21: (0, 201), 60: (0, 625), 66: (1, {'@': 295}), 64: (1, {'@': 295})}, 74: {2: (1, {'@': 418}), 3: (1, {'@': 418}), 4: (1, {'@': 418}), 5: (1, {'@': 418}), 6: (1, {'@': 418}), 7: (1, {'@': 418}), 8: (1, {'@': 418}), 9: (1, {'@': 418}), 10: (1, {'@': 418}), 11: (1, {'@': 418}), 12: (1, {'@': 418}), 13: (1, {'@': 418}), 14: (1, {'@': 418}), 15: (1, {'@': 418}), 16: (1, {'@': 418}), 17: (1, {'@': 418}), 18: (1, {'@': 418}), 19: (1, {'@': 418}), 20: (1, {'@': 418}), 21: (1, {'@': 418}), 22: (1, {'@': 418}), 23: (1, {'@': 418}), 24: (1, {'@': 418}), 25: (1, {'@': 418}), 26: (1, {'@': 418}), 27: (1, {'@': 418}), 28: (1, {'@': 418}), 29: (1, {'@': 418}), 30: (1, {'@': 418})}, 75: {3: (1, {'@': 228}), 5: (1, {'@': 228}), 8: (1, {'@': 228}), 13: (1, {'@': 228}), 16: (1, {'@': 228}), 17: (1, {'@': 228}), 21: (1, {'@': 228}), 23: (1, {'@': 228}), 26: (1, {'@': 228}), 29: (1, {'@': 228})}, 76: {124: (0, 518), 41: (0, 607)}, 77: {79: (0, 110), 90: (0, 320), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 78: {8: (0, 462), 5: (0, 177), 3: (1, {'@': 225}), 13: (1, {'@': 225}), 16: (1, {'@': 225}), 17: (1, {'@': 225}), 21: (1, {'@': 225}), 23: (1, {'@': 225}), 26: (1, {'@': 225}), 29: (1, {'@': 225})}, 79: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 116: (0, 463), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 123: (0, 345), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 80: {2: (1, {'@': 177}), 3: (1, {'@': 177}), 4: (1, {'@': 177}), 5: (1, {'@': 177}), 6: (1, {'@': 177}), 7: (1, {'@': 177}), 8: (1, {'@': 177}), 9: (1, {'@': 177}), 10: (1, {'@': 177}), 11: (1, {'@': 177}), 12: (1, {'@': 177}), 13: (1, {'@': 177}), 14: (1, {'@': 177}), 15: (1, {'@': 177}), 16: (1, {'@': 177}), 17: (1, {'@': 177}), 18: (1, {'@': 177}), 19: (1, {'@': 177}), 20: (1, {'@': 177}), 21: (1, {'@': 177}), 22: (1, {'@': 177}), 23: (1, {'@': 177}), 24: (1, {'@': 177}), 25: (1, {'@': 177}), 26: (1, {'@': 177}), 27: (1, {'@': 177}), 28: (1, {'@': 177}), 29: (1, {'@': 177}), 30: (1, {'@': 177})}, 81: {8: (0, 462), 5: (0, 177), 29: (0, 478)}, 82: {21: (0, 88), 56: (1, {'@': 79}), 44: (1, {'@': 79}), 62: (1, {'@': 79}), 8: (1, {'@': 79}), 69: (1, {'@': 79}), 70: (1, {'@': 79}), 31: (1, {'@': 79}), 42: (1, {'@': 79}), 71: (1, {'@': 79}), 13: (1, {'@': 79}), 15: (1, {'@': 79}), 72: (1, {'@': 79}), 73: (1, {'@': 79}), 41: (1, {'@': 79}), 1: (1, {'@': 79}), 63: (1, {'@': 79}), 49: (1, {'@': 79}), 74: (1, {'@': 79}), 65: (1, {'@': 79}), 40: (1, {'@': 79}), 81: (1, {'@': 79}), 76: (1, {'@': 79}), 53: (1, {'@': 79}), 77: (1, {'@': 79}), 67: (1, {'@': 79}), 78: (1, {'@': 79}), 52: (1, {'@': 79}), 79: (1, {'@': 79}), 80: (1, {'@': 79}), 58: (1, {'@': 79}), 34: (1, {'@': 79}), 61: (1, {'@': 79}), 64: (1, {'@': 79}), 66: (1, {'@': 79}), 68: (1, {'@': 79}), 75: (1, {'@': 79}), 23: (1, {'@': 79})}, 83: {3: (1, {'@': 224}), 5: (1, {'@': 224}), 21: (1, {'@': 224}), 8: (1, {'@': 224}), 31: (1, {'@': 224}), 23: (1, {'@': 224}), 13: (1, {'@': 224}), 26: (1, {'@': 224}), 16: (1, {'@': 224}), 17: (1, {'@': 224}), 29: (1, {'@': 224})}, 84: {79: (0, 110), 90: (0, 520), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 125: (0, 455), 40: (0, 356), 42: (0, 444), 41: (0, 568), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 126: (0, 617), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 96: (0, 615), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 127: (0, 552), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 29: (1, {'@': 269})}, 85: {8: (0, 462), 5: (0, 177), 3: (1, {'@': 227}), 13: (1, {'@': 227}), 16: (1, {'@': 227}), 17: (1, {'@': 227}), 21: (1, {'@': 227}), 23: (1, {'@': 227}), 26: (1, {'@': 227}), 29: (1, {'@': 227})}, 86: {42: (0, 432), 21: (0, 88)}, 87: {32: (0, 68)}, 88: {61: (1, {'@': 420}), 44: (1, {'@': 420}), 62: (1, {'@': 420}), 42: (1, {'@': 420}), 15: (1, {'@': 420}), 63: (1, {'@': 420}), 64: (1, {'@': 420}), 65: (1, {'@': 420}), 21: (1, {'@': 420}), 53: (1, {'@': 420}), 66: (1, {'@': 420}), 67: (1, {'@': 420}), 58: (1, {'@': 420}), 68: (1, {'@': 420}), 56: (1, {'@': 420}), 8: (1, {'@': 420}), 69: (1, {'@': 420}), 70: (1, {'@': 420}), 31: (1, {'@': 420}), 71: (1, {'@': 420}), 13: (1, {'@': 420}), 72: (1, {'@': 420}), 73: (1, {'@': 420}), 41: (1, {'@': 420}), 1: (1, {'@': 420}), 49: (1, {'@': 420}), 74: (1, {'@': 420}), 75: (1, {'@': 420}), 40: (1, {'@': 420}), 76: (1, {'@': 420}), 77: (1, {'@': 420}), 23: (1, {'@': 420}), 78: (1, {'@': 420}), 52: (1, {'@': 420}), 79: (1, {'@': 420}), 80: (1, {'@': 420}), 81: (1, {'@': 420}), 34: (1, {'@': 420}), 17: (1, {'@': 420})}, 89: {8: (0, 462), 5: (0, 177), 29: (0, 369)}, 90: {44: (1, {'@': 282}), 62: (1, {'@': 282}), 42: (1, {'@': 282}), 15: (1, {'@': 282}), 63: (1, {'@': 282}), 65: (1, {'@': 282}), 21: (1, {'@': 282}), 53: (1, {'@': 282}), 67: (1, {'@': 282}), 58: (1, {'@': 282}), 56: (1, {'@': 282}), 8: (1, {'@': 282}), 69: (1, {'@': 282}), 70: (1, {'@': 282}), 31: (1, {'@': 282}), 71: (1, {'@': 282}), 13: (1, {'@': 282}), 72: (1, {'@': 282}), 73: (1, {'@': 282}), 41: (1, {'@': 282}), 1: (1, {'@': 282}), 49: (1, {'@': 282}), 74: (1, {'@': 282}), 40: (1, {'@': 282}), 76: (1, {'@': 282}), 77: (1, {'@': 282}), 78: (1, {'@': 282}), 52: (1, {'@': 282}), 79: (1, {'@': 282}), 80: (1, {'@': 282}), 81: (1, {'@': 282}), 34: (1, {'@': 282}), 61: (1, {'@': 282}), 64: (1, {'@': 282}), 66: (1, {'@': 282}), 68: (1, {'@': 282}), 75: (1, {'@': 282}), 23: (1, {'@': 282})}, 91: {21: (0, 88), 61: (1, {'@': 107}), 44: (1, {'@': 107}), 62: (1, {'@': 107}), 42: (1, {'@': 107}), 15: (1, {'@': 107}), 63: (1, {'@': 107}), 65: (1, {'@': 107}), 53: (1, {'@': 107}), 58: (1, {'@': 107}), 56: (1, {'@': 107}), 8: (1, {'@': 107}), 69: (1, {'@': 107}), 70: (1, {'@': 107}), 31: (1, {'@': 107}), 71: (1, {'@': 107}), 13: (1, {'@': 107}), 72: (1, {'@': 107}), 73: (1, {'@': 107}), 41: (1, {'@': 107}), 1: (1, {'@': 107}), 49: (1, {'@': 107}), 74: (1, {'@': 107}), 40: (1, {'@': 107}), 76: (1, {'@': 107}), 77: (1, {'@': 107}), 23: (1, {'@': 107}), 78: (1, {'@': 107}), 52: (1, {'@': 107}), 79: (1, {'@': 107}), 80: (1, {'@': 107}), 81: (1, {'@': 107}), 34: (1, {'@': 107})}, 92: {41: (0, 220), 31: (0, 241)}, 93: {2: (1, {'@': 188}), 3: (1, {'@': 188}), 4: (1, {'@': 188}), 5: (1, {'@': 188}), 6: (1, {'@': 188}), 7: (1, {'@': 188}), 8: (1, {'@': 188}), 9: (1, {'@': 188}), 10: (1, {'@': 188}), 11: (1, {'@': 188}), 12: (1, {'@': 188}), 13: (1, {'@': 188}), 14: (1, {'@': 188}), 15: (1, {'@': 188}), 16: (1, {'@': 188}), 17: (1, {'@': 188}), 18: (1, {'@': 188}), 19: (1, {'@': 188}), 20: (1, {'@': 188}), 21: (1, {'@': 188}), 22: (1, {'@': 188}), 23: (1, {'@': 188}), 24: (1, {'@': 188}), 25: (1, {'@': 188}), 26: (1, {'@': 188}), 27: (1, {'@': 188}), 28: (1, {'@': 188}), 29: (1, {'@': 188}), 30: (1, {'@': 188})}, 94: {2: (0, 382), 9: (0, 611), 3: (1, {'@': 130}), 5: (1, {'@': 130}), 21: (1, {'@': 130}), 8: (1, {'@': 130}), 23: (1, {'@': 130}), 13: (1, {'@': 130}), 14: (1, {'@': 130}), 26: (1, {'@': 130}), 16: (1, {'@': 130}), 17: (1, {'@': 130}), 28: (1, {'@': 130}), 29: (1, {'@': 130})}, 95: {21: (0, 201), 60: (0, 386), 23: (0, 340)}, 96: {123: (0, 24), 42: (0, 123), 21: (0, 88)}, 97: {44: (1, {'@': 73}), 62: (1, {'@': 73}), 42: (1, {'@': 73}), 15: (1, {'@': 73}), 63: (1, {'@': 73}), 65: (1, {'@': 73}), 53: (1, {'@': 73}), 67: (1, {'@': 73}), 58: (1, {'@': 73}), 56: (1, {'@': 73}), 8: (1, {'@': 73}), 69: (1, {'@': 73}), 70: (1, {'@': 73}), 31: (1, {'@': 73}), 71: (1, {'@': 73}), 13: (1, {'@': 73}), 72: (1, {'@': 73}), 73: (1, {'@': 73}), 41: (1, {'@': 73}), 1: (1, {'@': 73}), 49: (1, {'@': 73}), 74: (1, {'@': 73}), 40: (1, {'@': 73}), 76: (1, {'@': 73}), 77: (1, {'@': 73}), 78: (1, {'@': 73}), 52: (1, {'@': 73}), 79: (1, {'@': 73}), 80: (1, {'@': 73}), 81: (1, {'@': 73}), 34: (1, {'@': 73}), 23: (1, {'@': 73})}, 98: {2: (1, {'@': 411}), 3: (1, {'@': 411}), 4: (1, {'@': 411}), 5: (1, {'@': 411}), 6: (1, {'@': 411}), 7: (1, {'@': 411}), 8: (1, {'@': 411}), 9: (1, {'@': 411}), 10: (1, {'@': 411}), 11: (1, {'@': 411}), 12: (1, {'@': 411}), 13: (1, {'@': 411}), 14: (1, {'@': 411}), 15: (1, {'@': 411}), 16: (1, {'@': 411}), 0: (1, {'@': 411}), 1: (1, {'@': 411}), 17: (1, {'@': 411}), 18: (1, {'@': 411}), 19: (1, {'@': 411}), 20: (1, {'@': 411}), 21: (1, {'@': 411}), 22: (1, {'@': 411}), 23: (1, {'@': 411}), 24: (1, {'@': 411}), 25: (1, {'@': 411}), 26: (1, {'@': 411}), 27: (1, {'@': 411}), 28: (1, {'@': 411}), 29: (1, {'@': 411}), 30: (1, {'@': 411}), 31: (1, {'@': 411}), 32: (1, {'@': 411}), 33: (1, {'@': 411})}, 99: {61: (1, {'@': 298}), 44: (1, {'@': 298}), 62: (1, {'@': 298}), 42: (1, {'@': 298}), 15: (1, {'@': 298}), 63: (1, {'@': 298}), 64: (1, {'@': 298}), 65: (1, {'@': 298}), 21: (1, {'@': 298}), 53: (1, {'@': 298}), 66: (1, {'@': 298}), 67: (1, {'@': 298}), 58: (1, {'@': 298}), 68: (1, {'@': 298}), 56: (1, {'@': 298}), 8: (1, {'@': 298}), 69: (1, {'@': 298}), 70: (1, {'@': 298}), 31: (1, {'@': 298}), 71: (1, {'@': 298}), 13: (1, {'@': 298}), 72: (1, {'@': 298}), 73: (1, {'@': 298}), 41: (1, {'@': 298}), 1: (1, {'@': 298}), 49: (1, {'@': 298}), 74: (1, {'@': 298}), 75: (1, {'@': 298}), 40: (1, {'@': 298}), 76: (1, {'@': 298}), 77: (1, {'@': 298}), 23: (1, {'@': 298}), 78: (1, {'@': 298}), 52: (1, {'@': 298}), 79: (1, {'@': 298}), 80: (1, {'@': 298}), 81: (1, {'@': 298}), 34: (1, {'@': 298})}, 100: {60: (0, 148), 21: (0, 201), 61: (1, {'@': 363}), 44: (1, {'@': 363}), 62: (1, {'@': 363}), 42: (1, {'@': 363}), 15: (1, {'@': 363}), 63: (1, {'@': 363}), 64: (1, {'@': 363}), 65: (1, {'@': 363}), 53: (1, {'@': 363}), 66: (1, {'@': 363}), 67: (1, {'@': 363}), 58: (1, {'@': 363}), 68: (1, {'@': 363}), 56: (1, {'@': 363}), 8: (1, {'@': 363}), 69: (1, {'@': 363}), 70: (1, {'@': 363}), 31: (1, {'@': 363}), 71: (1, {'@': 363}), 13: (1, {'@': 363}), 72: (1, {'@': 363}), 73: (1, {'@': 363}), 41: (1, {'@': 363}), 1: (1, {'@': 363}), 49: (1, {'@': 363}), 74: (1, {'@': 363}), 75: (1, {'@': 363}), 40: (1, {'@': 363}), 76: (1, {'@': 363}), 77: (1, {'@': 363}), 23: (1, {'@': 363}), 78: (1, {'@': 363}), 52: (1, {'@': 363}), 79: (1, {'@': 363}), 80: (1, {'@': 363}), 81: (1, {'@': 363}), 34: (1, {'@': 363})}, 101: {79: (0, 110), 90: (0, 520), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 568), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 126: (0, 617), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 125: (0, 628), 98: (0, 538), 77: (0, 554), 57: (0, 553), 96: (0, 615), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 127: (0, 552), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 29: (1, {'@': 269})}, 102: {7: (0, 44), 2: (1, {'@': 142}), 3: (1, {'@': 142}), 5: (1, {'@': 142}), 8: (1, {'@': 142}), 9: (1, {'@': 142}), 11: (1, {'@': 142}), 12: (1, {'@': 142}), 13: (1, {'@': 142}), 14: (1, {'@': 142}), 16: (1, {'@': 142}), 17: (1, {'@': 142}), 18: (1, {'@': 142}), 20: (1, {'@': 142}), 21: (1, {'@': 142}), 23: (1, {'@': 142}), 24: (1, {'@': 142}), 26: (1, {'@': 142}), 28: (1, {'@': 142}), 29: (1, {'@': 142}), 30: (1, {'@': 142})}, 103: {3: (1, {'@': 226}), 5: (1, {'@': 226}), 8: (1, {'@': 226}), 13: (1, {'@': 226}), 16: (1, {'@': 226}), 17: (1, {'@': 226}), 21: (1, {'@': 226}), 23: (1, {'@': 226}), 26: (1, {'@': 226}), 29: (1, {'@': 226})}, 104: {68: (0, 57), 60: (0, 467), 128: (0, 349), 21: (0, 201), 83: (0, 372)}, 105: {129: (0, 317), 130: (0, 171), 41: (0, 636), 1: (0, 647), 31: (0, 438), 34: (0, 531), 131: (0, 526)}, 106: {8: (0, 462), 5: (0, 177), 3: (0, 361)}, 107: {21: (0, 88), 61: (1, {'@': 102}), 44: (1, {'@': 102}), 62: (1, {'@': 102}), 42: (1, {'@': 102}), 15: (1, {'@': 102}), 63: (1, {'@': 102}), 65: (1, {'@': 102}), 53: (1, {'@': 102}), 58: (1, {'@': 102}), 56: (1, {'@': 102}), 8: (1, {'@': 102}), 69: (1, {'@': 102}), 70: (1, {'@': 102}), 31: (1, {'@': 102}), 71: (1, {'@': 102}), 13: (1, {'@': 102}), 72: (1, {'@': 102}), 73: (1, {'@': 102}), 41: (1, {'@': 102}), 1: (1, {'@': 102}), 49: (1, {'@': 102}), 74: (1, {'@': 102}), 40: (1, {'@': 102}), 76: (1, {'@': 102}), 77: (1, {'@': 102}), 23: (1, {'@': 102}), 78: (1, {'@': 102}), 52: (1, {'@': 102}), 79: (1, {'@': 102}), 80: (1, {'@': 102}), 81: (1, {'@': 102}), 34: (1, {'@': 102})}, 108: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 41: (0, 490), 40: (0, 356), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 425), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 109: {8: (0, 462), 29: (0, 329), 5: (0, 177)}, 110: {34: (0, 400), 35: (0, 571), 36: (0, 40), 91: (0, 264), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 45: (0, 525), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 111: {4: (0, 351), 25: (0, 108), 6: (0, 367), 27: (0, 577), 2: (1, {'@': 151}), 3: (1, {'@': 151}), 5: (1, {'@': 151}), 7: (1, {'@': 151}), 8: (1, {'@': 151}), 9: (1, {'@': 151}), 10: (1, {'@': 151}), 11: (1, {'@': 151}), 12: (1, {'@': 151}), 13: (1, {'@': 151}), 14: (1, {'@': 151}), 15: (1, {'@': 151}), 16: (1, {'@': 151}), 17: (1, {'@': 151}), 18: (1, {'@': 151}), 20: (1, {'@': 151}), 21: (1, {'@': 151}), 22: (1, {'@': 151}), 23: (1, {'@': 151}), 24: (1, {'@': 151}), 26: (1, {'@': 151}), 28: (1, {'@': 151}), 29: (1, {'@': 151}), 30: (1, {'@': 151})}, 112: {60: (0, 353), 41: (0, 380), 82: (0, 374), 21: (0, 201), 17: (1, {'@': 388}), 23: (1, {'@': 388})}, 113: {2: (1, {'@': 417}), 3: (1, {'@': 417}), 4: (1, {'@': 417}), 5: (1, {'@': 417}), 6: (1, {'@': 417}), 7: (1, {'@': 417}), 8: (1, {'@': 417}), 9: (1, {'@': 417}), 10: (1, {'@': 417}), 11: (1, {'@': 417}), 12: (1, {'@': 417}), 13: (1, {'@': 417}), 14: (1, {'@': 417}), 15: (1, {'@': 417}), 16: (1, {'@': 417}), 17: (1, {'@': 417}), 18: (1, {'@': 417}), 19: (1, {'@': 417}), 20: (1, {'@': 417}), 21: (1, {'@': 417}), 22: (1, {'@': 417}), 23: (1, {'@': 417}), 24: (1, {'@': 417}), 25: (1, {'@': 417}), 26: (1, {'@': 417}), 27: (1, {'@': 417}), 28: (1, {'@': 417}), 29: (1, {'@': 417}), 30: (1, {'@': 417})}, 114: {29: (0, 588), 8: (1, {'@': 208}), 5: (1, {'@': 208}), 31: (1, {'@': 208})}, 115: {79: (0, 110), 90: (0, 64), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 3: (0, 58), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 26: (0, 125), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 116: {21: (0, 88), 61: (1, {'@': 99}), 44: (1, {'@': 99}), 62: (1, {'@': 99}), 42: (1, {'@': 99}), 15: (1, {'@': 99}), 63: (1, {'@': 99}), 65: (1, {'@': 99}), 53: (1, {'@': 99}), 58: (1, {'@': 99}), 56: (1, {'@': 99}), 8: (1, {'@': 99}), 69: (1, {'@': 99}), 70: (1, {'@': 99}), 31: (1, {'@': 99}), 71: (1, {'@': 99}), 13: (1, {'@': 99}), 72: (1, {'@': 99}), 73: (1, {'@': 99}), 41: (1, {'@': 99}), 1: (1, {'@': 99}), 49: (1, {'@': 99}), 74: (1, {'@': 99}), 40: (1, {'@': 99}), 76: (1, {'@': 99}), 77: (1, {'@': 99}), 23: (1, {'@': 99}), 78: (1, {'@': 99}), 52: (1, {'@': 99}), 79: (1, {'@': 99}), 80: (1, {'@': 99}), 81: (1, {'@': 99}), 34: (1, {'@': 99})}, 117: {29: (0, 605), 2: (1, {'@': 401}), 4: (1, {'@': 401}), 5: (1, {'@': 401}), 6: (1, {'@': 401}), 7: (1, {'@': 401}), 8: (1, {'@': 401}), 9: (1, {'@': 401}), 10: (1, {'@': 401}), 31: (1, {'@': 401}), 11: (1, {'@': 401}), 12: (1, {'@': 401}), 14: (1, {'@': 401}), 15: (1, {'@': 401}), 18: (1, {'@': 401}), 19: (1, {'@': 401}), 20: (1, {'@': 401}), 22: (1, {'@': 401}), 24: (1, {'@': 401}), 25: (1, {'@': 401}), 27: (1, {'@': 401}), 28: (1, {'@': 401}), 30: (1, {'@': 401})}, 118: {60: (0, 339), 74: (0, 417), 21: (0, 201)}, 119: {2: (1, {'@': 179}), 3: (1, {'@': 179}), 4: (1, {'@': 179}), 5: (1, {'@': 179}), 6: (1, {'@': 179}), 7: (1, {'@': 179}), 8: (1, {'@': 179}), 9: (1, {'@': 179}), 10: (1, {'@': 179}), 11: (1, {'@': 179}), 12: (1, {'@': 179}), 13: (1, {'@': 179}), 14: (1, {'@': 179}), 15: (1, {'@': 179}), 16: (1, {'@': 179}), 17: (1, {'@': 179}), 18: (1, {'@': 179}), 19: (1, {'@': 179}), 20: (1, {'@': 179}), 21: (1, {'@': 179}), 22: (1, {'@': 179}), 23: (1, {'@': 179}), 24: (1, {'@': 179}), 25: (1, {'@': 179}), 26: (1, {'@': 179}), 27: (1, {'@': 179}), 28: (1, {'@': 179}), 29: (1, {'@': 179}), 30: (1, {'@': 179})}, 120: {32: (0, 379), 17: (1, {'@': 245}), 29: (1, {'@': 245})}, 121: {31: (0, 483)}, 122: {44: (1, {'@': 328}), 62: (1, {'@': 328}), 42: (1, {'@': 328}), 15: (1, {'@': 328}), 63: (1, {'@': 328}), 65: (1, {'@': 328}), 21: (1, {'@': 328}), 53: (1, {'@': 328}), 67: (1, {'@': 328}), 58: (1, {'@': 328}), 56: (1, {'@': 328}), 8: (1, {'@': 328}), 69: (1, {'@': 328}), 70: (1, {'@': 328}), 31: (1, {'@': 328}), 71: (1, {'@': 328}), 13: (1, {'@': 328}), 72: (1, {'@': 328}), 73: (1, {'@': 328}), 41: (1, {'@': 328}), 1: (1, {'@': 328}), 49: (1, {'@': 328}), 74: (1, {'@': 328}), 40: (1, {'@': 328}), 76: (1, {'@': 328}), 77: (1, {'@': 328}), 78: (1, {'@': 328}), 52: (1, {'@': 328}), 79: (1, {'@': 328}), 80: (1, {'@': 328}), 81: (1, {'@': 328}), 34: (1, {'@': 328}), 61: (1, {'@': 328}), 64: (1, {'@': 328}), 66: (1, {'@': 328}), 68: (1, {'@': 328}), 75: (1, {'@': 328}), 23: (1, {'@': 328})}, 123: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 21: (0, 201), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 254), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 121: (0, 186), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 116: (0, 422), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427), 23: (1, {'@': 76})}, 124: {1: (0, 237), 42: (1, {'@': 395}), 17: (1, {'@': 395}), 21: (1, {'@': 395}), 29: (1, {'@': 395})}, 125: {79: (0, 110), 90: (0, 384), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 3: (0, 389), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 126: {21: (0, 226), 44: (1, {'@': 319}), 62: (1, {'@': 319}), 42: (1, {'@': 319}), 15: (1, {'@': 319}), 63: (1, {'@': 319}), 65: (1, {'@': 319}), 53: (1, {'@': 319}), 67: (1, {'@': 319}), 58: (1, {'@': 319}), 56: (1, {'@': 319}), 8: (1, {'@': 319}), 69: (1, {'@': 319}), 70: (1, {'@': 319}), 31: (1, {'@': 319}), 71: (1, {'@': 319}), 13: (1, {'@': 319}), 72: (1, {'@': 319}), 73: (1, {'@': 319}), 41: (1, {'@': 319}), 1: (1, {'@': 319}), 49: (1, {'@': 319}), 74: (1, {'@': 319}), 40: (1, {'@': 319}), 76: (1, {'@': 319}), 77: (1, {'@': 319}), 78: (1, {'@': 319}), 52: (1, {'@': 319}), 79: (1, {'@': 319}), 80: (1, {'@': 319}), 81: (1, {'@': 319}), 34: (1, {'@': 319}), 61: (1, {'@': 319}), 64: (1, {'@': 319}), 66: (1, {'@': 319}), 68: (1, {'@': 319}), 75: (1, {'@': 319}), 23: (1, {'@': 319})}, 127: {31: (0, 539)}, 128: {85: (0, 385), 86: (0, 29), 87: (0, 198), 41: (0, 1), 88: (0, 120), 89: (0, 135), 27: (0, 173), 29: (1, {'@': 243})}, 129: {74: (0, 557), 21: (0, 201), 60: (0, 395)}, 130: {79: (0, 110), 90: (0, 581), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 26: (0, 621), 100: (0, 627), 3: (0, 637), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 131: {123: (0, 151), 21: (0, 201), 60: (0, 41), 42: (0, 123)}, 132: {31: (0, 456)}, 133: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 123: (0, 257), 73: (0, 506), 60: (0, 215), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 116: (0, 330), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 134: {21: (0, 88), 61: (1, {'@': 354}), 44: (1, {'@': 354}), 62: (1, {'@': 354}), 42: (1, {'@': 354}), 15: (1, {'@': 354}), 63: (1, {'@': 354}), 64: (1, {'@': 354}), 65: (1, {'@': 354}), 53: (1, {'@': 354}), 66: (1, {'@': 354}), 67: (1, {'@': 354}), 58: (1, {'@': 354}), 68: (1, {'@': 354}), 56: (1, {'@': 354}), 8: (1, {'@': 354}), 69: (1, {'@': 354}), 70: (1, {'@': 354}), 31: (1, {'@': 354}), 71: (1, {'@': 354}), 13: (1, {'@': 354}), 72: (1, {'@': 354}), 73: (1, {'@': 354}), 41: (1, {'@': 354}), 1: (1, {'@': 354}), 49: (1, {'@': 354}), 74: (1, {'@': 354}), 75: (1, {'@': 354}), 40: (1, {'@': 354}), 76: (1, {'@': 354}), 77: (1, {'@': 354}), 23: (1, {'@': 354}), 78: (1, {'@': 354}), 52: (1, {'@': 354}), 79: (1, {'@': 354}), 80: (1, {'@': 354}), 81: (1, {'@': 354}), 34: (1, {'@': 354})}, 135: {29: (1, {'@': 242})}, 136: {132: (0, 459), 42: (0, 608), 21: (0, 88)}, 137: {21: (0, 88), 61: (1, {'@': 350}), 44: (1, {'@': 350}), 62: (1, {'@': 350}), 42: (1, {'@': 350}), 15: (1, {'@': 350}), 63: (1, {'@': 350}), 64: (1, {'@': 350}), 65: (1, {'@': 350}), 53: (1, {'@': 350}), 66: (1, {'@': 350}), 67: (1, {'@': 350}), 58: (1, {'@': 350}), 68: (1, {'@': 350}), 56: (1, {'@': 350}), 8: (1, {'@': 350}), 69: (1, {'@': 350}), 70: (1, {'@': 350}), 31: (1, {'@': 350}), 71: (1, {'@': 350}), 13: (1, {'@': 350}), 72: (1, {'@': 350}), 73: (1, {'@': 350}), 41: (1, {'@': 350}), 1: (1, {'@': 350}), 49: (1, {'@': 350}), 74: (1, {'@': 350}), 75: (1, {'@': 350}), 40: (1, {'@': 350}), 76: (1, {'@': 350}), 77: (1, {'@': 350}), 23: (1, {'@': 350}), 78: (1, {'@': 350}), 52: (1, {'@': 350}), 79: (1, {'@': 350}), 80: (1, {'@': 350}), 81: (1, {'@': 350}), 34: (1, {'@': 350})}, 138: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 123: (0, 336), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 116: (0, 285), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 139: {8: (0, 462), 5: (0, 177), 26: (0, 543), 21: (1, {'@': 118})}, 140: {60: (0, 331), 21: (0, 201), 61: (1, {'@': 361}), 44: (1, {'@': 361}), 62: (1, {'@': 361}), 42: (1, {'@': 361}), 15: (1, {'@': 361}), 63: (1, {'@': 361}), 64: (1, {'@': 361}), 65: (1, {'@': 361}), 53: (1, {'@': 361}), 66: (1, {'@': 361}), 67: (1, {'@': 361}), 58: (1, {'@': 361}), 68: (1, {'@': 361}), 56: (1, {'@': 361}), 8: (1, {'@': 361}), 69: (1, {'@': 361}), 70: (1, {'@': 361}), 31: (1, {'@': 361}), 71: (1, {'@': 361}), 13: (1, {'@': 361}), 72: (1, {'@': 361}), 73: (1, {'@': 361}), 41: (1, {'@': 361}), 1: (1, {'@': 361}), 49: (1, {'@': 361}), 74: (1, {'@': 361}), 75: (1, {'@': 361}), 40: (1, {'@': 361}), 76: (1, {'@': 361}), 77: (1, {'@': 361}), 23: (1, {'@': 361}), 78: (1, {'@': 361}), 52: (1, {'@': 361}), 79: (1, {'@': 361}), 80: (1, {'@': 361}), 81: (1, {'@': 361}), 34: (1, {'@': 361})}, 141: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 60: (0, 138), 65: (0, 399), 92: (0, 397), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 123: (0, 104), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 116: (0, 162), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 142: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 36), 44: (1, {'@': 333}), 62: (1, {'@': 333}), 42: (1, {'@': 333}), 15: (1, {'@': 333}), 63: (1, {'@': 333}), 65: (1, {'@': 333}), 21: (1, {'@': 333}), 53: (1, {'@': 333}), 67: (1, {'@': 333}), 58: (1, {'@': 333}), 56: (1, {'@': 333}), 8: (1, {'@': 333}), 69: (1, {'@': 333}), 70: (1, {'@': 333}), 31: (1, {'@': 333}), 71: (1, {'@': 333}), 13: (1, {'@': 333}), 72: (1, {'@': 333}), 73: (1, {'@': 333}), 41: (1, {'@': 333}), 1: (1, {'@': 333}), 49: (1, {'@': 333}), 74: (1, {'@': 333}), 40: (1, {'@': 333}), 76: (1, {'@': 333}), 77: (1, {'@': 333}), 78: (1, {'@': 333}), 52: (1, {'@': 333}), 79: (1, {'@': 333}), 80: (1, {'@': 333}), 81: (1, {'@': 333}), 34: (1, {'@': 333}), 61: (1, {'@': 333}), 64: (1, {'@': 333}), 66: (1, {'@': 333}), 23: (1, {'@': 333})}, 143: {27: (0, 173), 89: (0, 604), 41: (0, 26), 88: (0, 25)}, 144: {11: (0, 609), 30: (0, 273), 18: (0, 2), 24: (0, 8), 12: (0, 202), 20: (0, 211), 2: (1, {'@': 135}), 3: (1, {'@': 135}), 5: (1, {'@': 135}), 21: (1, {'@': 135}), 8: (1, {'@': 135}), 9: (1, {'@': 135}), 23: (1, {'@': 135}), 13: (1, {'@': 135}), 14: (1, {'@': 135}), 26: (1, {'@': 135}), 16: (1, {'@': 135}), 17: (1, {'@': 135}), 28: (1, {'@': 135}), 29: (1, {'@': 135})}, 145: {21: (0, 88), 23: (1, {'@': 386}), 17: (1, {'@': 386})}, 146: {21: (0, 201), 60: (0, 291), 66: (1, {'@': 297}), 64: (1, {'@': 297})}, 147: {8: (0, 462), 5: (0, 177), 26: (0, 543)}, 148: {21: (0, 88), 61: (1, {'@': 362}), 44: (1, {'@': 362}), 62: (1, {'@': 362}), 42: (1, {'@': 362}), 15: (1, {'@': 362}), 63: (1, {'@': 362}), 64: (1, {'@': 362}), 65: (1, {'@': 362}), 53: (1, {'@': 362}), 66: (1, {'@': 362}), 67: (1, {'@': 362}), 58: (1, {'@': 362}), 68: (1, {'@': 362}), 56: (1, {'@': 362}), 8: (1, {'@': 362}), 69: (1, {'@': 362}), 70: (1, {'@': 362}), 31: (1, {'@': 362}), 71: (1, {'@': 362}), 13: (1, {'@': 362}), 72: (1, {'@': 362}), 73: (1, {'@': 362}), 41: (1, {'@': 362}), 1: (1, {'@': 362}), 49: (1, {'@': 362}), 74: (1, {'@': 362}), 75: (1, {'@': 362}), 40: (1, {'@': 362}), 76: (1, {'@': 362}), 77: (1, {'@': 362}), 23: (1, {'@': 362}), 78: (1, {'@': 362}), 52: (1, {'@': 362}), 79: (1, {'@': 362}), 80: (1, {'@': 362}), 81: (1, {'@': 362}), 34: (1, {'@': 362})}, 149: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 122), 44: (1, {'@': 329}), 62: (1, {'@': 329}), 42: (1, {'@': 329}), 15: (1, {'@': 329}), 63: (1, {'@': 329}), 65: (1, {'@': 329}), 21: (1, {'@': 329}), 53: (1, {'@': 329}), 67: (1, {'@': 329}), 58: (1, {'@': 329}), 56: (1, {'@': 329}), 8: (1, {'@': 329}), 69: (1, {'@': 329}), 70: (1, {'@': 329}), 31: (1, {'@': 329}), 71: (1, {'@': 329}), 13: (1, {'@': 329}), 72: (1, {'@': 329}), 73: (1, {'@': 329}), 41: (1, {'@': 329}), 1: (1, {'@': 329}), 49: (1, {'@': 329}), 74: (1, {'@': 329}), 40: (1, {'@': 329}), 76: (1, {'@': 329}), 77: (1, {'@': 329}), 78: (1, {'@': 329}), 52: (1, {'@': 329}), 79: (1, {'@': 329}), 80: (1, {'@': 329}), 81: (1, {'@': 329}), 34: (1, {'@': 329}), 61: (1, {'@': 329}), 64: (1, {'@': 329}), 66: (1, {'@': 329}), 23: (1, {'@': 329})}, 150: {44: (1, {'@': 330}), 62: (1, {'@': 330}), 42: (1, {'@': 330}), 15: (1, {'@': 330}), 63: (1, {'@': 330}), 65: (1, {'@': 330}), 21: (1, {'@': 330}), 53: (1, {'@': 330}), 67: (1, {'@': 330}), 58: (1, {'@': 330}), 56: (1, {'@': 330}), 8: (1, {'@': 330}), 69: (1, {'@': 330}), 70: (1, {'@': 330}), 31: (1, {'@': 330}), 71: (1, {'@': 330}), 13: (1, {'@': 330}), 72: (1, {'@': 330}), 73: (1, {'@': 330}), 41: (1, {'@': 330}), 1: (1, {'@': 330}), 49: (1, {'@': 330}), 74: (1, {'@': 330}), 40: (1, {'@': 330}), 76: (1, {'@': 330}), 77: (1, {'@': 330}), 78: (1, {'@': 330}), 52: (1, {'@': 330}), 79: (1, {'@': 330}), 80: (1, {'@': 330}), 81: (1, {'@': 330}), 34: (1, {'@': 330}), 61: (1, {'@': 330}), 64: (1, {'@': 330}), 66: (1, {'@': 330}), 68: (1, {'@': 330}), 75: (1, {'@': 330}), 23: (1, {'@': 330})}, 151: {44: (1, {'@': 365}), 62: (1, {'@': 365}), 42: (1, {'@': 365}), 15: (1, {'@': 365}), 63: (1, {'@': 365}), 65: (1, {'@': 365}), 21: (1, {'@': 365}), 53: (1, {'@': 365}), 67: (1, {'@': 365}), 58: (1, {'@': 365}), 56: (1, {'@': 365}), 8: (1, {'@': 365}), 69: (1, {'@': 365}), 70: (1, {'@': 365}), 31: (1, {'@': 365}), 71: (1, {'@': 365}), 13: (1, {'@': 365}), 72: (1, {'@': 365}), 73: (1, {'@': 365}), 41: (1, {'@': 365}), 1: (1, {'@': 365}), 49: (1, {'@': 365}), 74: (1, {'@': 365}), 40: (1, {'@': 365}), 76: (1, {'@': 365}), 77: (1, {'@': 365}), 78: (1, {'@': 365}), 52: (1, {'@': 365}), 79: (1, {'@': 365}), 80: (1, {'@': 365}), 81: (1, {'@': 365}), 34: (1, {'@': 365}), 61: (1, {'@': 365}), 64: (1, {'@': 365}), 66: (1, {'@': 365}), 68: (1, {'@': 365}), 75: (1, {'@': 365}), 23: (1, {'@': 365})}, 152: {61: (1, {'@': 390}), 44: (1, {'@': 390}), 62: (1, {'@': 390}), 42: (1, {'@': 390}), 15: (1, {'@': 390}), 63: (1, {'@': 390}), 64: (1, {'@': 390}), 65: (1, {'@': 390}), 21: (1, {'@': 390}), 53: (1, {'@': 390}), 66: (1, {'@': 390}), 67: (1, {'@': 390}), 58: (1, {'@': 390}), 68: (1, {'@': 390}), 56: (1, {'@': 390}), 8: (1, {'@': 390}), 69: (1, {'@': 390}), 70: (1, {'@': 390}), 31: (1, {'@': 390}), 71: (1, {'@': 390}), 13: (1, {'@': 390}), 72: (1, {'@': 390}), 73: (1, {'@': 390}), 41: (1, {'@': 390}), 1: (1, {'@': 390}), 49: (1, {'@': 390}), 74: (1, {'@': 390}), 75: (1, {'@': 390}), 40: (1, {'@': 390}), 76: (1, {'@': 390}), 77: (1, {'@': 390}), 23: (1, {'@': 390}), 78: (1, {'@': 390}), 52: (1, {'@': 390}), 79: (1, {'@': 390}), 80: (1, {'@': 390}), 81: (1, {'@': 390}), 34: (1, {'@': 390})}, 153: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 21: (0, 201), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 90: (0, 139), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 254), 133: (0, 167), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 121: (0, 186), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 17: (0, 30), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 310), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 116: (0, 422), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427), 23: (1, {'@': 76})}, 154: {74: (0, 445), 21: (0, 88)}, 155: {3: (1, {'@': 217}), 5: (1, {'@': 217}), 21: (1, {'@': 217}), 8: (1, {'@': 217}), 31: (1, {'@': 217}), 23: (1, {'@': 217}), 13: (1, {'@': 217}), 26: (1, {'@': 217}), 16: (1, {'@': 217}), 17: (1, {'@': 217}), 29: (1, {'@': 217})}, 156: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 124}), 3: (1, {'@': 124}), 13: (1, {'@': 124}), 16: (1, {'@': 124}), 17: (1, {'@': 124}), 23: (1, {'@': 124}), 26: (1, {'@': 124}), 29: (1, {'@': 124})}, 157: {41: (0, 636), 129: (0, 546), 31: (0, 157)}, 158: {79: (0, 110), 90: (0, 308), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 134: (0, 624), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 96: (0, 630), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 3: (1, {'@': 185})}, 159: {41: (0, 127), 31: (0, 13)}, 160: {21: (0, 88), 61: (1, {'@': 97}), 44: (1, {'@': 97}), 62: (1, {'@': 97}), 42: (1, {'@': 97}), 15: (1, {'@': 97}), 63: (1, {'@': 97}), 65: (1, {'@': 97}), 53: (1, {'@': 97}), 58: (1, {'@': 97}), 56: (1, {'@': 97}), 8: (1, {'@': 97}), 69: (1, {'@': 97}), 70: (1, {'@': 97}), 31: (1, {'@': 97}), 71: (1, {'@': 97}), 13: (1, {'@': 97}), 72: (1, {'@': 97}), 73: (1, {'@': 97}), 41: (1, {'@': 97}), 1: (1, {'@': 97}), 49: (1, {'@': 97}), 74: (1, {'@': 97}), 40: (1, {'@': 97}), 76: (1, {'@': 97}), 77: (1, {'@': 97}), 23: (1, {'@': 97}), 78: (1, {'@': 97}), 52: (1, {'@': 97}), 79: (1, {'@': 97}), 80: (1, {'@': 97}), 81: (1, {'@': 97}), 34: (1, {'@': 97})}, 161: {21: (0, 88), 61: (1, {'@': 344}), 44: (1, {'@': 344}), 62: (1, {'@': 344}), 42: (1, {'@': 344}), 15: (1, {'@': 344}), 63: (1, {'@': 344}), 64: (1, {'@': 344}), 65: (1, {'@': 344}), 53: (1, {'@': 344}), 66: (1, {'@': 344}), 67: (1, {'@': 344}), 58: (1, {'@': 344}), 68: (1, {'@': 344}), 56: (1, {'@': 344}), 8: (1, {'@': 344}), 69: (1, {'@': 344}), 70: (1, {'@': 344}), 31: (1, {'@': 344}), 71: (1, {'@': 344}), 13: (1, {'@': 344}), 72: (1, {'@': 344}), 73: (1, {'@': 344}), 41: (1, {'@': 344}), 1: (1, {'@': 344}), 49: (1, {'@': 344}), 74: (1, {'@': 344}), 75: (1, {'@': 344}), 40: (1, {'@': 344}), 76: (1, {'@': 344}), 77: (1, {'@': 344}), 23: (1, {'@': 344}), 78: (1, {'@': 344}), 52: (1, {'@': 344}), 79: (1, {'@': 344}), 80: (1, {'@': 344}), 81: (1, {'@': 344}), 34: (1, {'@': 344})}, 162: {68: (0, 57), 128: (0, 311), 60: (0, 292), 21: (0, 201), 83: (0, 372)}, 163: {21: (0, 88), 61: (1, {'@': 98}), 44: (1, {'@': 98}), 62: (1, {'@': 98}), 42: (1, {'@': 98}), 15: (1, {'@': 98}), 63: (1, {'@': 98}), 65: (1, {'@': 98}), 53: (1, {'@': 98}), 58: (1, {'@': 98}), 56: (1, {'@': 98}), 8: (1, {'@': 98}), 69: (1, {'@': 98}), 70: (1, {'@': 98}), 31: (1, {'@': 98}), 71: (1, {'@': 98}), 13: (1, {'@': 98}), 72: (1, {'@': 98}), 73: (1, {'@': 98}), 41: (1, {'@': 98}), 1: (1, {'@': 98}), 49: (1, {'@': 98}), 74: (1, {'@': 98}), 40: (1, {'@': 98}), 76: (1, {'@': 98}), 77: (1, {'@': 98}), 23: (1, {'@': 98}), 78: (1, {'@': 98}), 52: (1, {'@': 98}), 79: (1, {'@': 98}), 80: (1, {'@': 98}), 81: (1, {'@': 98}), 34: (1, {'@': 98})}, 164: {21: (0, 88), 56: (1, {'@': 82}), 44: (1, {'@': 82}), 62: (1, {'@': 82}), 8: (1, {'@': 82}), 69: (1, {'@': 82}), 70: (1, {'@': 82}), 31: (1, {'@': 82}), 42: (1, {'@': 82}), 71: (1, {'@': 82}), 13: (1, {'@': 82}), 15: (1, {'@': 82}), 72: (1, {'@': 82}), 73: (1, {'@': 82}), 41: (1, {'@': 82}), 1: (1, {'@': 82}), 63: (1, {'@': 82}), 49: (1, {'@': 82}), 74: (1, {'@': 82}), 65: (1, {'@': 82}), 40: (1, {'@': 82}), 81: (1, {'@': 82}), 76: (1, {'@': 82}), 53: (1, {'@': 82}), 77: (1, {'@': 82}), 67: (1, {'@': 82}), 78: (1, {'@': 82}), 52: (1, {'@': 82}), 79: (1, {'@': 82}), 80: (1, {'@': 82}), 58: (1, {'@': 82}), 34: (1, {'@': 82}), 61: (1, {'@': 82}), 64: (1, {'@': 82}), 66: (1, {'@': 82}), 68: (1, {'@': 82}), 75: (1, {'@': 82}), 23: (1, {'@': 82})}, 165: {21: (0, 88), 61: (1, {'@': 346}), 44: (1, {'@': 346}), 62: (1, {'@': 346}), 42: (1, {'@': 346}), 15: (1, {'@': 346}), 63: (1, {'@': 346}), 64: (1, {'@': 346}), 65: (1, {'@': 346}), 53: (1, {'@': 346}), 66: (1, {'@': 346}), 67: (1, {'@': 346}), 58: (1, {'@': 346}), 68: (1, {'@': 346}), 56: (1, {'@': 346}), 8: (1, {'@': 346}), 69: (1, {'@': 346}), 70: (1, {'@': 346}), 31: (1, {'@': 346}), 71: (1, {'@': 346}), 13: (1, {'@': 346}), 72: (1, {'@': 346}), 73: (1, {'@': 346}), 41: (1, {'@': 346}), 1: (1, {'@': 346}), 49: (1, {'@': 346}), 74: (1, {'@': 346}), 75: (1, {'@': 346}), 40: (1, {'@': 346}), 76: (1, {'@': 346}), 77: (1, {'@': 346}), 23: (1, {'@': 346}), 78: (1, {'@': 346}), 52: (1, {'@': 346}), 79: (1, {'@': 346}), 80: (1, {'@': 346}), 81: (1, {'@': 346}), 34: (1, {'@': 346})}, 166: {44: (1, {'@': 324}), 62: (1, {'@': 324}), 42: (1, {'@': 324}), 15: (1, {'@': 324}), 63: (1, {'@': 324}), 65: (1, {'@': 324}), 21: (1, {'@': 324}), 53: (1, {'@': 324}), 67: (1, {'@': 324}), 58: (1, {'@': 324}), 56: (1, {'@': 324}), 8: (1, {'@': 324}), 69: (1, {'@': 324}), 70: (1, {'@': 324}), 31: (1, {'@': 324}), 71: (1, {'@': 324}), 13: (1, {'@': 324}), 72: (1, {'@': 324}), 73: (1, {'@': 324}), 41: (1, {'@': 324}), 1: (1, {'@': 324}), 49: (1, {'@': 324}), 74: (1, {'@': 324}), 40: (1, {'@': 324}), 76: (1, {'@': 324}), 77: (1, {'@': 324}), 78: (1, {'@': 324}), 52: (1, {'@': 324}), 79: (1, {'@': 324}), 80: (1, {'@': 324}), 81: (1, {'@': 324}), 34: (1, {'@': 324}), 61: (1, {'@': 324}), 64: (1, {'@': 324}), 66: (1, {'@': 324}), 68: (1, {'@': 324}), 75: (1, {'@': 324}), 23: (1, {'@': 324})}, 167: {17: (0, 169), 23: (0, 93)}, 168: {21: (0, 88), 61: (1, {'@': 101}), 44: (1, {'@': 101}), 62: (1, {'@': 101}), 42: (1, {'@': 101}), 15: (1, {'@': 101}), 63: (1, {'@': 101}), 65: (1, {'@': 101}), 53: (1, {'@': 101}), 58: (1, {'@': 101}), 56: (1, {'@': 101}), 8: (1, {'@': 101}), 69: (1, {'@': 101}), 70: (1, {'@': 101}), 31: (1, {'@': 101}), 71: (1, {'@': 101}), 13: (1, {'@': 101}), 72: (1, {'@': 101}), 73: (1, {'@': 101}), 41: (1, {'@': 101}), 1: (1, {'@': 101}), 49: (1, {'@': 101}), 74: (1, {'@': 101}), 40: (1, {'@': 101}), 76: (1, {'@': 101}), 77: (1, {'@': 101}), 23: (1, {'@': 101}), 78: (1, {'@': 101}), 52: (1, {'@': 101}), 79: (1, {'@': 101}), 80: (1, {'@': 101}), 81: (1, {'@': 101}), 34: (1, {'@': 101})}, 169: {79: (0, 110), 90: (0, 524), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 96: (0, 535), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 170: {7: (0, 44), 2: (1, {'@': 141}), 3: (1, {'@': 141}), 5: (1, {'@': 141}), 8: (1, {'@': 141}), 9: (1, {'@': 141}), 11: (1, {'@': 141}), 12: (1, {'@': 141}), 13: (1, {'@': 141}), 14: (1, {'@': 141}), 16: (1, {'@': 141}), 17: (1, {'@': 141}), 18: (1, {'@': 141}), 20: (1, {'@': 141}), 21: (1, {'@': 141}), 23: (1, {'@': 141}), 24: (1, {'@': 141}), 26: (1, {'@': 141}), 28: (1, {'@': 141}), 29: (1, {'@': 141}), 30: (1, {'@': 141})}, 171: {17: (0, 172), 21: (0, 201), 42: (0, 608), 60: (0, 136), 132: (0, 31)}, 172: {129: (0, 317), 131: (0, 430), 1: (0, 647), 41: (0, 636), 31: (0, 438), 34: (0, 531)}, 173: {41: (0, 190)}, 174: {79: (0, 110), 90: (0, 649), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 96: (0, 472), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 175: {8: (0, 462), 5: (0, 177), 29: (0, 193)}, 176: {79: (0, 110), 90: (0, 659), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 96: (0, 653), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 177: {79: (0, 110), 90: (0, 208), 35: (0, 571), 36: (0, 40), 37: (0, 370), 91: (0, 144), 31: (0, 416), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 96: (0, 319), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 178: {66: (0, 595), 135: (0, 574), 136: (0, 527), 137: (0, 440), 21: (0, 88), 64: (0, 363), 138: (0, 90), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 179: {32: (0, 586)}, 180: {66: (1, {'@': 422}), 21: (1, {'@': 422}), 64: (1, {'@': 422})}, 181: {44: (1, {'@': 316}), 62: (1, {'@': 316}), 42: (1, {'@': 316}), 15: (1, {'@': 316}), 63: (1, {'@': 316}), 65: (1, {'@': 316}), 21: (1, {'@': 316}), 53: (1, {'@': 316}), 67: (1, {'@': 316}), 58: (1, {'@': 316}), 56: (1, {'@': 316}), 8: (1, {'@': 316}), 69: (1, {'@': 316}), 70: (1, {'@': 316}), 31: (1, {'@': 316}), 71: (1, {'@': 316}), 13: (1, {'@': 316}), 72: (1, {'@': 316}), 73: (1, {'@': 316}), 41: (1, {'@': 316}), 1: (1, {'@': 316}), 49: (1, {'@': 316}), 74: (1, {'@': 316}), 40: (1, {'@': 316}), 76: (1, {'@': 316}), 77: (1, {'@': 316}), 78: (1, {'@': 316}), 52: (1, {'@': 316}), 79: (1, {'@': 316}), 80: (1, {'@': 316}), 81: (1, {'@': 316}), 34: (1, {'@': 316}), 61: (1, {'@': 316}), 64: (1, {'@': 316}), 66: (1, {'@': 316}), 68: (1, {'@': 316}), 75: (1, {'@': 316}), 23: (1, {'@': 316})}, 182: {21: (0, 88), 61: (1, {'@': 105}), 44: (1, {'@': 105}), 62: (1, {'@': 105}), 42: (1, {'@': 105}), 15: (1, {'@': 105}), 63: (1, {'@': 105}), 65: (1, {'@': 105}), 53: (1, {'@': 105}), 58: (1, {'@': 105}), 56: (1, {'@': 105}), 8: (1, {'@': 105}), 69: (1, {'@': 105}), 70: (1, {'@': 105}), 31: (1, {'@': 105}), 71: (1, {'@': 105}), 13: (1, {'@': 105}), 72: (1, {'@': 105}), 73: (1, {'@': 105}), 41: (1, {'@': 105}), 1: (1, {'@': 105}), 49: (1, {'@': 105}), 74: (1, {'@': 105}), 40: (1, {'@': 105}), 76: (1, {'@': 105}), 77: (1, {'@': 105}), 23: (1, {'@': 105}), 78: (1, {'@': 105}), 52: (1, {'@': 105}), 79: (1, {'@': 105}), 80: (1, {'@': 105}), 81: (1, {'@': 105}), 34: (1, {'@': 105})}, 183: {1: (0, 237), 42: (1, {'@': 396}), 17: (1, {'@': 396}), 21: (1, {'@': 396}), 29: (1, {'@': 396})}, 184: {61: (1, {'@': 393}), 44: (1, {'@': 393}), 62: (1, {'@': 393}), 42: (1, {'@': 393}), 15: (1, {'@': 393}), 63: (1, {'@': 393}), 64: (1, {'@': 393}), 65: (1, {'@': 393}), 21: (1, {'@': 393}), 53: (1, {'@': 393}), 66: (1, {'@': 393}), 67: (1, {'@': 393}), 58: (1, {'@': 393}), 68: (1, {'@': 393}), 56: (1, {'@': 393}), 8: (1, {'@': 393}), 69: (1, {'@': 393}), 70: (1, {'@': 393}), 31: (1, {'@': 393}), 71: (1, {'@': 393}), 13: (1, {'@': 393}), 72: (1, {'@': 393}), 73: (1, {'@': 393}), 41: (1, {'@': 393}), 1: (1, {'@': 393}), 49: (1, {'@': 393}), 74: (1, {'@': 393}), 75: (1, {'@': 393}), 40: (1, {'@': 393}), 76: (1, {'@': 393}), 77: (1, {'@': 393}), 23: (1, {'@': 393}), 78: (1, {'@': 393}), 52: (1, {'@': 393}), 79: (1, {'@': 393}), 80: (1, {'@': 393}), 81: (1, {'@': 393}), 34: (1, {'@': 393})}, 185: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 412})}, 186: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 116: (0, 97), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 23: (0, 341), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 187: {21: (0, 88), 61: (1, {'@': 94}), 44: (1, {'@': 94}), 62: (1, {'@': 94}), 42: (1, {'@': 94}), 15: (1, {'@': 94}), 63: (1, {'@': 94}), 65: (1, {'@': 94}), 53: (1, {'@': 94}), 58: (1, {'@': 94}), 56: (1, {'@': 94}), 8: (1, {'@': 94}), 69: (1, {'@': 94}), 70: (1, {'@': 94}), 31: (1, {'@': 94}), 71: (1, {'@': 94}), 13: (1, {'@': 94}), 72: (1, {'@': 94}), 73: (1, {'@': 94}), 41: (1, {'@': 94}), 1: (1, {'@': 94}), 49: (1, {'@': 94}), 74: (1, {'@': 94}), 40: (1, {'@': 94}), 76: (1, {'@': 94}), 77: (1, {'@': 94}), 23: (1, {'@': 94}), 78: (1, {'@': 94}), 52: (1, {'@': 94}), 79: (1, {'@': 94}), 80: (1, {'@': 94}), 81: (1, {'@': 94}), 34: (1, {'@': 94})}, 188: {44: (1, {'@': 305}), 62: (1, {'@': 305}), 42: (1, {'@': 305}), 15: (1, {'@': 305}), 63: (1, {'@': 305}), 65: (1, {'@': 305}), 21: (1, {'@': 305}), 53: (1, {'@': 305}), 67: (1, {'@': 305}), 58: (1, {'@': 305}), 56: (1, {'@': 305}), 8: (1, {'@': 305}), 69: (1, {'@': 305}), 70: (1, {'@': 305}), 31: (1, {'@': 305}), 71: (1, {'@': 305}), 13: (1, {'@': 305}), 72: (1, {'@': 305}), 73: (1, {'@': 305}), 41: (1, {'@': 305}), 1: (1, {'@': 305}), 49: (1, {'@': 305}), 74: (1, {'@': 305}), 40: (1, {'@': 305}), 76: (1, {'@': 305}), 77: (1, {'@': 305}), 78: (1, {'@': 305}), 52: (1, {'@': 305}), 79: (1, {'@': 305}), 80: (1, {'@': 305}), 81: (1, {'@': 305}), 34: (1, {'@': 305}), 61: (1, {'@': 305}), 64: (1, {'@': 305}), 66: (1, {'@': 305}), 68: (1, {'@': 305}), 75: (1, {'@': 305}), 23: (1, {'@': 305})}, 189: {21: (0, 88), 61: (1, {'@': 103}), 44: (1, {'@': 103}), 62: (1, {'@': 103}), 42: (1, {'@': 103}), 15: (1, {'@': 103}), 63: (1, {'@': 103}), 65: (1, {'@': 103}), 53: (1, {'@': 103}), 58: (1, {'@': 103}), 56: (1, {'@': 103}), 8: (1, {'@': 103}), 69: (1, {'@': 103}), 70: (1, {'@': 103}), 31: (1, {'@': 103}), 71: (1, {'@': 103}), 13: (1, {'@': 103}), 72: (1, {'@': 103}), 73: (1, {'@': 103}), 41: (1, {'@': 103}), 1: (1, {'@': 103}), 49: (1, {'@': 103}), 74: (1, {'@': 103}), 40: (1, {'@': 103}), 76: (1, {'@': 103}), 77: (1, {'@': 103}), 23: (1, {'@': 103}), 78: (1, {'@': 103}), 52: (1, {'@': 103}), 79: (1, {'@': 103}), 80: (1, {'@': 103}), 81: (1, {'@': 103}), 34: (1, {'@': 103})}, 190: {29: (1, {'@': 256})}, 191: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 123: (0, 392), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 116: (0, 560), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 192: {79: (0, 110), 90: (0, 573), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 134: (0, 624), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 96: (0, 630), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 3: (1, {'@': 185})}, 193: {44: (1, {'@': 308}), 62: (1, {'@': 308}), 42: (1, {'@': 308}), 15: (1, {'@': 308}), 63: (1, {'@': 308}), 65: (1, {'@': 308}), 21: (1, {'@': 308}), 53: (1, {'@': 308}), 67: (1, {'@': 308}), 58: (1, {'@': 308}), 56: (1, {'@': 308}), 8: (1, {'@': 308}), 69: (1, {'@': 308}), 70: (1, {'@': 308}), 31: (1, {'@': 308}), 71: (1, {'@': 308}), 13: (1, {'@': 308}), 72: (1, {'@': 308}), 73: (1, {'@': 308}), 41: (1, {'@': 308}), 1: (1, {'@': 308}), 49: (1, {'@': 308}), 74: (1, {'@': 308}), 40: (1, {'@': 308}), 76: (1, {'@': 308}), 77: (1, {'@': 308}), 78: (1, {'@': 308}), 52: (1, {'@': 308}), 79: (1, {'@': 308}), 80: (1, {'@': 308}), 81: (1, {'@': 308}), 34: (1, {'@': 308}), 61: (1, {'@': 308}), 64: (1, {'@': 308}), 66: (1, {'@': 308}), 68: (1, {'@': 308}), 75: (1, {'@': 308}), 23: (1, {'@': 308})}, 194: {60: (0, 283), 42: (0, 608), 26: (0, 105), 132: (0, 314), 21: (0, 201)}, 195: {44: (1, {'@': 283}), 62: (1, {'@': 283}), 42: (1, {'@': 283}), 15: (1, {'@': 283}), 63: (1, {'@': 283}), 65: (1, {'@': 283}), 21: (1, {'@': 283}), 53: (1, {'@': 283}), 67: (1, {'@': 283}), 58: (1, {'@': 283}), 56: (1, {'@': 283}), 8: (1, {'@': 283}), 69: (1, {'@': 283}), 70: (1, {'@': 283}), 31: (1, {'@': 283}), 71: (1, {'@': 283}), 13: (1, {'@': 283}), 72: (1, {'@': 283}), 73: (1, {'@': 283}), 41: (1, {'@': 283}), 1: (1, {'@': 283}), 49: (1, {'@': 283}), 74: (1, {'@': 283}), 40: (1, {'@': 283}), 76: (1, {'@': 283}), 77: (1, {'@': 283}), 78: (1, {'@': 283}), 52: (1, {'@': 283}), 79: (1, {'@': 283}), 80: (1, {'@': 283}), 81: (1, {'@': 283}), 34: (1, {'@': 283}), 61: (1, {'@': 283}), 64: (1, {'@': 283}), 66: (1, {'@': 283}), 68: (1, {'@': 283}), 75: (1, {'@': 283}), 23: (1, {'@': 283})}, 196: {79: (0, 110), 90: (0, 265), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 197: {44: (1, {'@': 338}), 62: (1, {'@': 338}), 42: (1, {'@': 338}), 15: (1, {'@': 338}), 63: (1, {'@': 338}), 65: (1, {'@': 338}), 21: (1, {'@': 338}), 53: (1, {'@': 338}), 67: (1, {'@': 338}), 58: (1, {'@': 338}), 56: (1, {'@': 338}), 8: (1, {'@': 338}), 69: (1, {'@': 338}), 70: (1, {'@': 338}), 31: (1, {'@': 338}), 71: (1, {'@': 338}), 13: (1, {'@': 338}), 72: (1, {'@': 338}), 73: (1, {'@': 338}), 41: (1, {'@': 338}), 1: (1, {'@': 338}), 49: (1, {'@': 338}), 74: (1, {'@': 338}), 40: (1, {'@': 338}), 76: (1, {'@': 338}), 77: (1, {'@': 338}), 78: (1, {'@': 338}), 52: (1, {'@': 338}), 79: (1, {'@': 338}), 80: (1, {'@': 338}), 81: (1, {'@': 338}), 34: (1, {'@': 338}), 61: (1, {'@': 338}), 64: (1, {'@': 338}), 66: (1, {'@': 338}), 68: (1, {'@': 338}), 75: (1, {'@': 338}), 23: (1, {'@': 338})}, 198: {17: (0, 533), 29: (1, {'@': 238})}, 199: {82: (0, 375), 60: (0, 368), 41: (0, 380), 21: (0, 201), 23: (1, {'@': 388})}, 200: {61: (1, {'@': 392}), 44: (1, {'@': 392}), 62: (1, {'@': 392}), 42: (1, {'@': 392}), 15: (1, {'@': 392}), 63: (1, {'@': 392}), 64: (1, {'@': 392}), 65: (1, {'@': 392}), 21: (1, {'@': 392}), 53: (1, {'@': 392}), 66: (1, {'@': 392}), 67: (1, {'@': 392}), 58: (1, {'@': 392}), 68: (1, {'@': 392}), 56: (1, {'@': 392}), 8: (1, {'@': 392}), 69: (1, {'@': 392}), 70: (1, {'@': 392}), 31: (1, {'@': 392}), 71: (1, {'@': 392}), 13: (1, {'@': 392}), 72: (1, {'@': 392}), 73: (1, {'@': 392}), 41: (1, {'@': 392}), 1: (1, {'@': 392}), 49: (1, {'@': 392}), 74: (1, {'@': 392}), 75: (1, {'@': 392}), 40: (1, {'@': 392}), 76: (1, {'@': 392}), 77: (1, {'@': 392}), 23: (1, {'@': 392}), 78: (1, {'@': 392}), 52: (1, {'@': 392}), 79: (1, {'@': 392}), 80: (1, {'@': 392}), 81: (1, {'@': 392}), 34: (1, {'@': 392})}, 201: {61: (1, {'@': 419}), 44: (1, {'@': 419}), 62: (1, {'@': 419}), 42: (1, {'@': 419}), 15: (1, {'@': 419}), 63: (1, {'@': 419}), 64: (1, {'@': 419}), 65: (1, {'@': 419}), 21: (1, {'@': 419}), 53: (1, {'@': 419}), 66: (1, {'@': 419}), 67: (1, {'@': 419}), 58: (1, {'@': 419}), 68: (1, {'@': 419}), 56: (1, {'@': 419}), 8: (1, {'@': 419}), 69: (1, {'@': 419}), 70: (1, {'@': 419}), 31: (1, {'@': 419}), 71: (1, {'@': 419}), 13: (1, {'@': 419}), 72: (1, {'@': 419}), 73: (1, {'@': 419}), 41: (1, {'@': 419}), 1: (1, {'@': 419}), 49: (1, {'@': 419}), 74: (1, {'@': 419}), 75: (1, {'@': 419}), 40: (1, {'@': 419}), 76: (1, {'@': 419}), 77: (1, {'@': 419}), 23: (1, {'@': 419}), 78: (1, {'@': 419}), 52: (1, {'@': 419}), 79: (1, {'@': 419}), 80: (1, {'@': 419}), 81: (1, {'@': 419}), 34: (1, {'@': 419}), 17: (1, {'@': 419})}, 202: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 45: (0, 333), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 203: {29: (0, 429), 1: (0, 237)}, 204: {21: (0, 88), 56: (1, {'@': 78}), 44: (1, {'@': 78}), 62: (1, {'@': 78}), 8: (1, {'@': 78}), 69: (1, {'@': 78}), 70: (1, {'@': 78}), 31: (1, {'@': 78}), 42: (1, {'@': 78}), 71: (1, {'@': 78}), 13: (1, {'@': 78}), 15: (1, {'@': 78}), 72: (1, {'@': 78}), 73: (1, {'@': 78}), 41: (1, {'@': 78}), 1: (1, {'@': 78}), 63: (1, {'@': 78}), 49: (1, {'@': 78}), 74: (1, {'@': 78}), 65: (1, {'@': 78}), 40: (1, {'@': 78}), 81: (1, {'@': 78}), 76: (1, {'@': 78}), 53: (1, {'@': 78}), 77: (1, {'@': 78}), 67: (1, {'@': 78}), 78: (1, {'@': 78}), 52: (1, {'@': 78}), 79: (1, {'@': 78}), 80: (1, {'@': 78}), 58: (1, {'@': 78}), 34: (1, {'@': 78}), 61: (1, {'@': 78}), 64: (1, {'@': 78}), 66: (1, {'@': 78}), 68: (1, {'@': 78}), 75: (1, {'@': 78}), 23: (1, {'@': 78})}, 205: {79: (0, 110), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 91: (0, 144), 38: (0, 358), 40: (0, 356), 41: (0, 490), 42: (0, 444), 93: (0, 381), 8: (0, 600), 45: (0, 525), 44: (0, 436), 39: (0, 655), 49: (0, 596), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 34: (0, 400), 43: (0, 261), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 206: {29: (0, 532)}, 207: {79: (0, 110), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 91: (0, 144), 38: (0, 358), 40: (0, 356), 41: (0, 490), 42: (0, 444), 93: (0, 94), 8: (0, 600), 45: (0, 525), 44: (0, 436), 39: (0, 655), 49: (0, 596), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 34: (0, 400), 43: (0, 261), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 208: {8: (0, 462), 5: (0, 177), 26: (0, 18)}, 209: {44: (1, {'@': 233}), 62: (1, {'@': 233}), 42: (1, {'@': 233}), 15: (1, {'@': 233}), 63: (1, {'@': 233}), 65: (1, {'@': 233}), 21: (1, {'@': 233}), 53: (1, {'@': 233}), 67: (1, {'@': 233}), 58: (1, {'@': 233}), 56: (1, {'@': 233}), 8: (1, {'@': 233}), 69: (1, {'@': 233}), 70: (1, {'@': 233}), 31: (1, {'@': 233}), 71: (1, {'@': 233}), 13: (1, {'@': 233}), 72: (1, {'@': 233}), 73: (1, {'@': 233}), 41: (1, {'@': 233}), 1: (1, {'@': 233}), 49: (1, {'@': 233}), 74: (1, {'@': 233}), 40: (1, {'@': 233}), 76: (1, {'@': 233}), 77: (1, {'@': 233}), 78: (1, {'@': 233}), 52: (1, {'@': 233}), 79: (1, {'@': 233}), 80: (1, {'@': 233}), 81: (1, {'@': 233}), 34: (1, {'@': 233}), 61: (1, {'@': 233}), 64: (1, {'@': 233}), 66: (1, {'@': 233}), 68: (1, {'@': 233}), 75: (1, {'@': 233}), 23: (1, {'@': 233})}, 210: {29: (0, 602)}, 211: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 45: (0, 10), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 212: {32: (0, 249)}, 213: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 415})}, 214: {3: (1, {'@': 260}), 17: (1, {'@': 260})}, 215: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 116: (0, 296), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 123: (0, 289), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 216: {21: (1, {'@': 416})}, 217: {64: (0, 363), 137: (0, 281), 21: (0, 88)}, 218: {61: (1, {'@': 391}), 44: (1, {'@': 391}), 62: (1, {'@': 391}), 42: (1, {'@': 391}), 15: (1, {'@': 391}), 63: (1, {'@': 391}), 65: (1, {'@': 391}), 21: (1, {'@': 391}), 53: (1, {'@': 391}), 58: (1, {'@': 391}), 56: (1, {'@': 391}), 8: (1, {'@': 391}), 69: (1, {'@': 391}), 70: (1, {'@': 391}), 31: (1, {'@': 391}), 71: (1, {'@': 391}), 13: (1, {'@': 391}), 72: (1, {'@': 391}), 73: (1, {'@': 391}), 41: (1, {'@': 391}), 1: (1, {'@': 391}), 49: (1, {'@': 391}), 74: (1, {'@': 391}), 40: (1, {'@': 391}), 76: (1, {'@': 391}), 77: (1, {'@': 391}), 23: (1, {'@': 391}), 78: (1, {'@': 391}), 52: (1, {'@': 391}), 79: (1, {'@': 391}), 80: (1, {'@': 391}), 81: (1, {'@': 391}), 34: (1, {'@': 391}), 64: (1, {'@': 391}), 66: (1, {'@': 391}), 67: (1, {'@': 391}), 68: (1, {'@': 391}), 75: (1, {'@': 391})}, 219: {44: (1, {'@': 232}), 62: (1, {'@': 232}), 42: (1, {'@': 232}), 15: (1, {'@': 232}), 63: (1, {'@': 232}), 65: (1, {'@': 232}), 21: (1, {'@': 232}), 53: (1, {'@': 232}), 67: (1, {'@': 232}), 58: (1, {'@': 232}), 56: (1, {'@': 232}), 8: (1, {'@': 232}), 69: (1, {'@': 232}), 70: (1, {'@': 232}), 31: (1, {'@': 232}), 71: (1, {'@': 232}), 13: (1, {'@': 232}), 72: (1, {'@': 232}), 73: (1, {'@': 232}), 41: (1, {'@': 232}), 1: (1, {'@': 232}), 49: (1, {'@': 232}), 74: (1, {'@': 232}), 40: (1, {'@': 232}), 76: (1, {'@': 232}), 77: (1, {'@': 232}), 78: (1, {'@': 232}), 52: (1, {'@': 232}), 79: (1, {'@': 232}), 80: (1, {'@': 232}), 81: (1, {'@': 232}), 34: (1, {'@': 232}), 61: (1, {'@': 232}), 64: (1, {'@': 232}), 66: (1, {'@': 232}), 68: (1, {'@': 232}), 75: (1, {'@': 232}), 23: (1, {'@': 232})}, 220: {31: (0, 128)}, 221: {21: (0, 88), 61: (1, {'@': 96}), 44: (1, {'@': 96}), 62: (1, {'@': 96}), 42: (1, {'@': 96}), 15: (1, {'@': 96}), 63: (1, {'@': 96}), 65: (1, {'@': 96}), 53: (1, {'@': 96}), 58: (1, {'@': 96}), 56: (1, {'@': 96}), 8: (1, {'@': 96}), 69: (1, {'@': 96}), 70: (1, {'@': 96}), 31: (1, {'@': 96}), 71: (1, {'@': 96}), 13: (1, {'@': 96}), 72: (1, {'@': 96}), 73: (1, {'@': 96}), 41: (1, {'@': 96}), 1: (1, {'@': 96}), 49: (1, {'@': 96}), 74: (1, {'@': 96}), 40: (1, {'@': 96}), 76: (1, {'@': 96}), 77: (1, {'@': 96}), 23: (1, {'@': 96}), 78: (1, {'@': 96}), 52: (1, {'@': 96}), 79: (1, {'@': 96}), 80: (1, {'@': 96}), 81: (1, {'@': 96}), 34: (1, {'@': 96})}, 222: {3: (1, {'@': 261}), 17: (1, {'@': 261})}, 223: {31: (0, 555), 2: (1, {'@': 163}), 3: (1, {'@': 163}), 4: (1, {'@': 163}), 5: (1, {'@': 163}), 6: (1, {'@': 163}), 7: (1, {'@': 163}), 8: (1, {'@': 163}), 9: (1, {'@': 163}), 10: (1, {'@': 163}), 11: (1, {'@': 163}), 12: (1, {'@': 163}), 13: (1, {'@': 163}), 14: (1, {'@': 163}), 15: (1, {'@': 163}), 16: (1, {'@': 163}), 17: (1, {'@': 163}), 18: (1, {'@': 163}), 19: (1, {'@': 163}), 20: (1, {'@': 163}), 21: (1, {'@': 163}), 22: (1, {'@': 163}), 23: (1, {'@': 163}), 24: (1, {'@': 163}), 25: (1, {'@': 163}), 26: (1, {'@': 163}), 27: (1, {'@': 163}), 28: (1, {'@': 163}), 29: (1, {'@': 163}), 30: (1, {'@': 163})}, 224: {124: (0, 583), 41: (0, 607)}, 225: {44: (1, {'@': 231}), 62: (1, {'@': 231}), 42: (1, {'@': 231}), 15: (1, {'@': 231}), 63: (1, {'@': 231}), 65: (1, {'@': 231}), 21: (1, {'@': 231}), 53: (1, {'@': 231}), 67: (1, {'@': 231}), 58: (1, {'@': 231}), 56: (1, {'@': 231}), 8: (1, {'@': 231}), 69: (1, {'@': 231}), 70: (1, {'@': 231}), 31: (1, {'@': 231}), 71: (1, {'@': 231}), 13: (1, {'@': 231}), 72: (1, {'@': 231}), 73: (1, {'@': 231}), 41: (1, {'@': 231}), 1: (1, {'@': 231}), 49: (1, {'@': 231}), 74: (1, {'@': 231}), 40: (1, {'@': 231}), 76: (1, {'@': 231}), 77: (1, {'@': 231}), 78: (1, {'@': 231}), 52: (1, {'@': 231}), 79: (1, {'@': 231}), 80: (1, {'@': 231}), 81: (1, {'@': 231}), 34: (1, {'@': 231}), 61: (1, {'@': 231}), 64: (1, {'@': 231}), 66: (1, {'@': 231}), 68: (1, {'@': 231}), 75: (1, {'@': 231}), 23: (1, {'@': 231})}, 226: {44: (1, {'@': 318}), 62: (1, {'@': 318}), 42: (1, {'@': 318}), 15: (1, {'@': 318}), 63: (1, {'@': 318}), 65: (1, {'@': 318}), 21: (1, {'@': 318}), 53: (1, {'@': 318}), 67: (1, {'@': 318}), 58: (1, {'@': 318}), 56: (1, {'@': 318}), 8: (1, {'@': 318}), 69: (1, {'@': 318}), 70: (1, {'@': 318}), 31: (1, {'@': 318}), 71: (1, {'@': 318}), 13: (1, {'@': 318}), 72: (1, {'@': 318}), 73: (1, {'@': 318}), 41: (1, {'@': 318}), 1: (1, {'@': 318}), 49: (1, {'@': 318}), 74: (1, {'@': 318}), 40: (1, {'@': 318}), 76: (1, {'@': 318}), 77: (1, {'@': 318}), 78: (1, {'@': 318}), 52: (1, {'@': 318}), 79: (1, {'@': 318}), 80: (1, {'@': 318}), 81: (1, {'@': 318}), 34: (1, {'@': 318}), 61: (1, {'@': 318}), 64: (1, {'@': 318}), 66: (1, {'@': 318}), 68: (1, {'@': 318}), 75: (1, {'@': 318}), 23: (1, {'@': 318})}, 227: {74: (0, 442), 21: (0, 88)}, 228: {29: (1, {'@': 265})}, 229: {79: (0, 110), 90: (0, 321), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 230: {88: (0, 65), 41: (0, 45)}, 231: {44: (1, {'@': 374}), 62: (1, {'@': 374}), 42: (1, {'@': 374}), 15: (1, {'@': 374}), 63: (1, {'@': 374}), 65: (1, {'@': 374}), 21: (1, {'@': 374}), 53: (1, {'@': 374}), 67: (1, {'@': 374}), 58: (1, {'@': 374}), 56: (1, {'@': 374}), 8: (1, {'@': 374}), 69: (1, {'@': 374}), 70: (1, {'@': 374}), 31: (1, {'@': 374}), 71: (1, {'@': 374}), 13: (1, {'@': 374}), 72: (1, {'@': 374}), 73: (1, {'@': 374}), 41: (1, {'@': 374}), 1: (1, {'@': 374}), 49: (1, {'@': 374}), 74: (1, {'@': 374}), 40: (1, {'@': 374}), 76: (1, {'@': 374}), 77: (1, {'@': 374}), 78: (1, {'@': 374}), 52: (1, {'@': 374}), 79: (1, {'@': 374}), 80: (1, {'@': 374}), 81: (1, {'@': 374}), 34: (1, {'@': 374}), 61: (1, {'@': 374}), 64: (1, {'@': 374}), 66: (1, {'@': 374}), 68: (1, {'@': 374}), 75: (1, {'@': 374}), 23: (1, {'@': 374})}, 232: {7: (0, 44), 2: (1, {'@': 144}), 3: (1, {'@': 144}), 5: (1, {'@': 144}), 8: (1, {'@': 144}), 9: (1, {'@': 144}), 11: (1, {'@': 144}), 12: (1, {'@': 144}), 13: (1, {'@': 144}), 14: (1, {'@': 144}), 16: (1, {'@': 144}), 17: (1, {'@': 144}), 18: (1, {'@': 144}), 20: (1, {'@': 144}), 21: (1, {'@': 144}), 23: (1, {'@': 144}), 24: (1, {'@': 144}), 26: (1, {'@': 144}), 28: (1, {'@': 144}), 29: (1, {'@': 144}), 30: (1, {'@': 144})}, 233: {61: (1, {'@': 90}), 44: (1, {'@': 90}), 62: (1, {'@': 90}), 42: (1, {'@': 90}), 15: (1, {'@': 90}), 63: (1, {'@': 90}), 65: (1, {'@': 90}), 53: (1, {'@': 90}), 58: (1, {'@': 90}), 56: (1, {'@': 90}), 8: (1, {'@': 90}), 69: (1, {'@': 90}), 70: (1, {'@': 90}), 31: (1, {'@': 90}), 71: (1, {'@': 90}), 13: (1, {'@': 90}), 72: (1, {'@': 90}), 73: (1, {'@': 90}), 41: (1, {'@': 90}), 1: (1, {'@': 90}), 49: (1, {'@': 90}), 74: (1, {'@': 90}), 40: (1, {'@': 90}), 76: (1, {'@': 90}), 77: (1, {'@': 90}), 23: (1, {'@': 90}), 78: (1, {'@': 90}), 52: (1, {'@': 90}), 79: (1, {'@': 90}), 80: (1, {'@': 90}), 81: (1, {'@': 90}), 34: (1, {'@': 90})}, 234: {21: (0, 88), 61: (1, {'@': 356}), 44: (1, {'@': 356}), 62: (1, {'@': 356}), 42: (1, {'@': 356}), 15: (1, {'@': 356}), 63: (1, {'@': 356}), 64: (1, {'@': 356}), 65: (1, {'@': 356}), 53: (1, {'@': 356}), 66: (1, {'@': 356}), 67: (1, {'@': 356}), 58: (1, {'@': 356}), 68: (1, {'@': 356}), 56: (1, {'@': 356}), 8: (1, {'@': 356}), 69: (1, {'@': 356}), 70: (1, {'@': 356}), 31: (1, {'@': 356}), 71: (1, {'@': 356}), 13: (1, {'@': 356}), 72: (1, {'@': 356}), 73: (1, {'@': 356}), 41: (1, {'@': 356}), 1: (1, {'@': 356}), 49: (1, {'@': 356}), 74: (1, {'@': 356}), 75: (1, {'@': 356}), 40: (1, {'@': 356}), 76: (1, {'@': 356}), 77: (1, {'@': 356}), 23: (1, {'@': 356}), 78: (1, {'@': 356}), 52: (1, {'@': 356}), 79: (1, {'@': 356}), 80: (1, {'@': 356}), 81: (1, {'@': 356}), 34: (1, {'@': 356})}, 235: {124: (0, 418), 41: (0, 607)}, 236: {44: (1, {'@': 280}), 62: (1, {'@': 280}), 42: (1, {'@': 280}), 15: (1, {'@': 280}), 63: (1, {'@': 280}), 65: (1, {'@': 280}), 21: (1, {'@': 280}), 53: (1, {'@': 280}), 67: (1, {'@': 280}), 58: (1, {'@': 280}), 56: (1, {'@': 280}), 8: (1, {'@': 280}), 69: (1, {'@': 280}), 70: (1, {'@': 280}), 31: (1, {'@': 280}), 71: (1, {'@': 280}), 13: (1, {'@': 280}), 72: (1, {'@': 280}), 73: (1, {'@': 280}), 41: (1, {'@': 280}), 1: (1, {'@': 280}), 49: (1, {'@': 280}), 74: (1, {'@': 280}), 40: (1, {'@': 280}), 76: (1, {'@': 280}), 77: (1, {'@': 280}), 78: (1, {'@': 280}), 52: (1, {'@': 280}), 79: (1, {'@': 280}), 80: (1, {'@': 280}), 81: (1, {'@': 280}), 34: (1, {'@': 280}), 61: (1, {'@': 280}), 64: (1, {'@': 280}), 66: (1, {'@': 280}), 68: (1, {'@': 280}), 75: (1, {'@': 280}), 23: (1, {'@': 280})}, 237: {41: (0, 337)}, 238: {29: (1, {'@': 266})}, 239: {2: (1, {'@': 180}), 3: (1, {'@': 180}), 4: (1, {'@': 180}), 5: (1, {'@': 180}), 6: (1, {'@': 180}), 7: (1, {'@': 180}), 8: (1, {'@': 180}), 9: (1, {'@': 180}), 10: (1, {'@': 180}), 11: (1, {'@': 180}), 12: (1, {'@': 180}), 13: (1, {'@': 180}), 14: (1, {'@': 180}), 15: (1, {'@': 180}), 16: (1, {'@': 180}), 17: (1, {'@': 180}), 18: (1, {'@': 180}), 19: (1, {'@': 180}), 20: (1, {'@': 180}), 21: (1, {'@': 180}), 22: (1, {'@': 180}), 23: (1, {'@': 180}), 24: (1, {'@': 180}), 25: (1, {'@': 180}), 26: (1, {'@': 180}), 27: (1, {'@': 180}), 28: (1, {'@': 180}), 29: (1, {'@': 180}), 30: (1, {'@': 180})}, 240: {41: (0, 179)}, 241: {85: (0, 5), 86: (0, 29), 87: (0, 198), 41: (0, 1), 88: (0, 120), 89: (0, 135), 27: (0, 173), 139: (0, 71), 29: (1, {'@': 243})}, 242: {21: (0, 88), 61: (1, {'@': 342}), 44: (1, {'@': 342}), 62: (1, {'@': 342}), 42: (1, {'@': 342}), 15: (1, {'@': 342}), 63: (1, {'@': 342}), 64: (1, {'@': 342}), 65: (1, {'@': 342}), 53: (1, {'@': 342}), 66: (1, {'@': 342}), 67: (1, {'@': 342}), 58: (1, {'@': 342}), 68: (1, {'@': 342}), 56: (1, {'@': 342}), 8: (1, {'@': 342}), 69: (1, {'@': 342}), 70: (1, {'@': 342}), 31: (1, {'@': 342}), 71: (1, {'@': 342}), 13: (1, {'@': 342}), 72: (1, {'@': 342}), 73: (1, {'@': 342}), 41: (1, {'@': 342}), 1: (1, {'@': 342}), 49: (1, {'@': 342}), 74: (1, {'@': 342}), 75: (1, {'@': 342}), 40: (1, {'@': 342}), 76: (1, {'@': 342}), 77: (1, {'@': 342}), 23: (1, {'@': 342}), 78: (1, {'@': 342}), 52: (1, {'@': 342}), 79: (1, {'@': 342}), 80: (1, {'@': 342}), 81: (1, {'@': 342}), 34: (1, {'@': 342})}, 243: {21: (0, 88), 56: (1, {'@': 84}), 44: (1, {'@': 84}), 62: (1, {'@': 84}), 8: (1, {'@': 84}), 69: (1, {'@': 84}), 70: (1, {'@': 84}), 31: (1, {'@': 84}), 42: (1, {'@': 84}), 71: (1, {'@': 84}), 13: (1, {'@': 84}), 15: (1, {'@': 84}), 72: (1, {'@': 84}), 73: (1, {'@': 84}), 41: (1, {'@': 84}), 1: (1, {'@': 84}), 63: (1, {'@': 84}), 49: (1, {'@': 84}), 74: (1, {'@': 84}), 65: (1, {'@': 84}), 40: (1, {'@': 84}), 81: (1, {'@': 84}), 76: (1, {'@': 84}), 53: (1, {'@': 84}), 77: (1, {'@': 84}), 67: (1, {'@': 84}), 78: (1, {'@': 84}), 52: (1, {'@': 84}), 79: (1, {'@': 84}), 80: (1, {'@': 84}), 58: (1, {'@': 84}), 34: (1, {'@': 84}), 61: (1, {'@': 84}), 64: (1, {'@': 84}), 66: (1, {'@': 84}), 68: (1, {'@': 84}), 75: (1, {'@': 84}), 23: (1, {'@': 84})}, 244: {31: (0, 294)}, 245: {44: (1, {'@': 278}), 62: (1, {'@': 278}), 42: (1, {'@': 278}), 15: (1, {'@': 278}), 63: (1, {'@': 278}), 65: (1, {'@': 278}), 21: (1, {'@': 278}), 53: (1, {'@': 278}), 67: (1, {'@': 278}), 58: (1, {'@': 278}), 56: (1, {'@': 278}), 8: (1, {'@': 278}), 69: (1, {'@': 278}), 70: (1, {'@': 278}), 31: (1, {'@': 278}), 71: (1, {'@': 278}), 13: (1, {'@': 278}), 72: (1, {'@': 278}), 73: (1, {'@': 278}), 41: (1, {'@': 278}), 1: (1, {'@': 278}), 49: (1, {'@': 278}), 74: (1, {'@': 278}), 40: (1, {'@': 278}), 76: (1, {'@': 278}), 77: (1, {'@': 278}), 78: (1, {'@': 278}), 52: (1, {'@': 278}), 79: (1, {'@': 278}), 80: (1, {'@': 278}), 81: (1, {'@': 278}), 34: (1, {'@': 278}), 61: (1, {'@': 278}), 64: (1, {'@': 278}), 66: (1, {'@': 278}), 68: (1, {'@': 278}), 75: (1, {'@': 278}), 23: (1, {'@': 278})}, 246: {4: (0, 351), 25: (0, 108), 6: (0, 367), 27: (0, 577), 2: (1, {'@': 150}), 3: (1, {'@': 150}), 5: (1, {'@': 150}), 7: (1, {'@': 150}), 8: (1, {'@': 150}), 9: (1, {'@': 150}), 10: (1, {'@': 150}), 11: (1, {'@': 150}), 12: (1, {'@': 150}), 13: (1, {'@': 150}), 14: (1, {'@': 150}), 15: (1, {'@': 150}), 16: (1, {'@': 150}), 17: (1, {'@': 150}), 18: (1, {'@': 150}), 20: (1, {'@': 150}), 21: (1, {'@': 150}), 22: (1, {'@': 150}), 23: (1, {'@': 150}), 24: (1, {'@': 150}), 26: (1, {'@': 150}), 28: (1, {'@': 150}), 29: (1, {'@': 150}), 30: (1, {'@': 150})}, 247: {8: (0, 462), 5: (0, 177), 29: (0, 390)}, 248: {79: (0, 110), 90: (0, 452), 38: (0, 253), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 92: (0, 397), 40: (0, 356), 42: (0, 444), 54: (0, 117), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 249: {79: (0, 110), 90: (0, 441), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 96: (0, 639), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 104: (0, 606), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 118: (0, 419), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 71: (0, 405), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 250: {21: (0, 88), 66: (1, {'@': 292}), 64: (1, {'@': 292})}, 251: {29: (0, 590), 8: (1, {'@': 209}), 5: (1, {'@': 209}), 31: (1, {'@': 209})}, 252: {26: (0, 484)}, 253: {1: (0, 437), 29: (0, 63), 0: (0, 631), 2: (1, {'@': 405}), 4: (1, {'@': 405}), 5: (1, {'@': 405}), 6: (1, {'@': 405}), 7: (1, {'@': 405}), 8: (1, {'@': 405}), 9: (1, {'@': 405}), 10: (1, {'@': 405}), 31: (1, {'@': 405}), 11: (1, {'@': 405}), 12: (1, {'@': 405}), 14: (1, {'@': 405}), 15: (1, {'@': 405}), 18: (1, {'@': 405}), 19: (1, {'@': 405}), 20: (1, {'@': 405}), 22: (1, {'@': 405}), 24: (1, {'@': 405}), 25: (1, {'@': 405}), 27: (1, {'@': 405}), 28: (1, {'@': 405}), 30: (1, {'@': 405})}, 254: {23: (0, 152), 21: (0, 88), 44: (1, {'@': 75}), 62: (1, {'@': 75}), 42: (1, {'@': 75}), 15: (1, {'@': 75}), 63: (1, {'@': 75}), 65: (1, {'@': 75}), 53: (1, {'@': 75}), 58: (1, {'@': 75}), 56: (1, {'@': 75}), 8: (1, {'@': 75}), 69: (1, {'@': 75}), 70: (1, {'@': 75}), 31: (1, {'@': 75}), 71: (1, {'@': 75}), 13: (1, {'@': 75}), 72: (1, {'@': 75}), 73: (1, {'@': 75}), 41: (1, {'@': 75}), 1: (1, {'@': 75}), 49: (1, {'@': 75}), 74: (1, {'@': 75}), 40: (1, {'@': 75}), 76: (1, {'@': 75}), 77: (1, {'@': 75}), 78: (1, {'@': 75}), 52: (1, {'@': 75}), 79: (1, {'@': 75}), 80: (1, {'@': 75}), 81: (1, {'@': 75}), 34: (1, {'@': 75})}, 255: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 270}), 29: (1, {'@': 270})}, 256: {44: (1, {'@': 377}), 62: (1, {'@': 377}), 42: (1, {'@': 377}), 15: (1, {'@': 377}), 63: (1, {'@': 377}), 65: (1, {'@': 377}), 21: (1, {'@': 377}), 53: (1, {'@': 377}), 67: (1, {'@': 377}), 58: (1, {'@': 377}), 56: (1, {'@': 377}), 8: (1, {'@': 377}), 69: (1, {'@': 377}), 70: (1, {'@': 377}), 31: (1, {'@': 377}), 71: (1, {'@': 377}), 13: (1, {'@': 377}), 72: (1, {'@': 377}), 73: (1, {'@': 377}), 41: (1, {'@': 377}), 1: (1, {'@': 377}), 49: (1, {'@': 377}), 74: (1, {'@': 377}), 40: (1, {'@': 377}), 76: (1, {'@': 377}), 77: (1, {'@': 377}), 78: (1, {'@': 377}), 52: (1, {'@': 377}), 79: (1, {'@': 377}), 80: (1, {'@': 377}), 81: (1, {'@': 377}), 34: (1, {'@': 377}), 61: (1, {'@': 377}), 64: (1, {'@': 377}), 66: (1, {'@': 377}), 68: (1, {'@': 377}), 75: (1, {'@': 377}), 23: (1, {'@': 377})}, 257: {21: (0, 201), 60: (0, 316), 61: (1, {'@': 353}), 44: (1, {'@': 353}), 62: (1, {'@': 353}), 42: (1, {'@': 353}), 15: (1, {'@': 353}), 63: (1, {'@': 353}), 64: (1, {'@': 353}), 65: (1, {'@': 353}), 53: (1, {'@': 353}), 66: (1, {'@': 353}), 67: (1, {'@': 353}), 58: (1, {'@': 353}), 68: (1, {'@': 353}), 56: (1, {'@': 353}), 8: (1, {'@': 353}), 69: (1, {'@': 353}), 70: (1, {'@': 353}), 31: (1, {'@': 353}), 71: (1, {'@': 353}), 13: (1, {'@': 353}), 72: (1, {'@': 353}), 73: (1, {'@': 353}), 41: (1, {'@': 353}), 1: (1, {'@': 353}), 49: (1, {'@': 353}), 74: (1, {'@': 353}), 75: (1, {'@': 353}), 40: (1, {'@': 353}), 76: (1, {'@': 353}), 77: (1, {'@': 353}), 23: (1, {'@': 353}), 78: (1, {'@': 353}), 52: (1, {'@': 353}), 79: (1, {'@': 353}), 80: (1, {'@': 353}), 81: (1, {'@': 353}), 34: (1, {'@': 353})}, 258: {140: (0, 286), 141: (0, 332), 42: (0, 123), 123: (0, 218)}, 259: {60: (0, 260), 21: (0, 201), 66: (1, {'@': 291}), 64: (1, {'@': 291})}, 260: {21: (0, 88), 66: (1, {'@': 290}), 64: (1, {'@': 290})}, 261: {2: (1, {'@': 163}), 3: (1, {'@': 163}), 4: (1, {'@': 163}), 5: (1, {'@': 163}), 6: (1, {'@': 163}), 7: (1, {'@': 163}), 8: (1, {'@': 163}), 9: (1, {'@': 163}), 10: (1, {'@': 163}), 11: (1, {'@': 163}), 12: (1, {'@': 163}), 13: (1, {'@': 163}), 14: (1, {'@': 163}), 15: (1, {'@': 163}), 16: (1, {'@': 163}), 17: (1, {'@': 163}), 18: (1, {'@': 163}), 19: (1, {'@': 163}), 20: (1, {'@': 163}), 21: (1, {'@': 163}), 22: (1, {'@': 163}), 23: (1, {'@': 163}), 24: (1, {'@': 163}), 25: (1, {'@': 163}), 26: (1, {'@': 163}), 27: (1, {'@': 163}), 28: (1, {'@': 163}), 29: (1, {'@': 163}), 30: (1, {'@': 163})}, 262: {124: (0, 562), 41: (0, 607)}, 263: {17: (0, 143), 29: (1, {'@': 240})}, 264: {11: (0, 609), 30: (0, 273), 18: (0, 2), 24: (0, 8), 12: (0, 202), 20: (0, 211), 2: (1, {'@': 137}), 3: (1, {'@': 137}), 5: (1, {'@': 137}), 21: (1, {'@': 137}), 8: (1, {'@': 137}), 9: (1, {'@': 137}), 23: (1, {'@': 137}), 13: (1, {'@': 137}), 14: (1, {'@': 137}), 26: (1, {'@': 137}), 16: (1, {'@': 137}), 17: (1, {'@': 137}), 28: (1, {'@': 137}), 29: (1, {'@': 137})}, 265: {29: (0, 35), 8: (0, 462), 5: (0, 177)}, 266: {21: (0, 88), 61: (1, {'@': 340}), 44: (1, {'@': 340}), 62: (1, {'@': 340}), 42: (1, {'@': 340}), 15: (1, {'@': 340}), 63: (1, {'@': 340}), 64: (1, {'@': 340}), 65: (1, {'@': 340}), 53: (1, {'@': 340}), 66: (1, {'@': 340}), 67: (1, {'@': 340}), 58: (1, {'@': 340}), 68: (1, {'@': 340}), 56: (1, {'@': 340}), 8: (1, {'@': 340}), 69: (1, {'@': 340}), 70: (1, {'@': 340}), 31: (1, {'@': 340}), 71: (1, {'@': 340}), 13: (1, {'@': 340}), 72: (1, {'@': 340}), 73: (1, {'@': 340}), 41: (1, {'@': 340}), 1: (1, {'@': 340}), 49: (1, {'@': 340}), 74: (1, {'@': 340}), 75: (1, {'@': 340}), 40: (1, {'@': 340}), 76: (1, {'@': 340}), 77: (1, {'@': 340}), 23: (1, {'@': 340}), 78: (1, {'@': 340}), 52: (1, {'@': 340}), 79: (1, {'@': 340}), 80: (1, {'@': 340}), 81: (1, {'@': 340}), 34: (1, {'@': 340})}, 267: {2: (1, {'@': 401}), 3: (1, {'@': 401}), 4: (1, {'@': 401}), 5: (1, {'@': 401}), 6: (1, {'@': 401}), 7: (1, {'@': 401}), 8: (1, {'@': 401}), 9: (1, {'@': 401}), 10: (1, {'@': 401}), 11: (1, {'@': 401}), 12: (1, {'@': 401}), 13: (1, {'@': 401}), 14: (1, {'@': 401}), 15: (1, {'@': 401}), 16: (1, {'@': 401}), 17: (1, {'@': 401}), 18: (1, {'@': 401}), 19: (1, {'@': 401}), 20: (1, {'@': 401}), 21: (1, {'@': 401}), 22: (1, {'@': 401}), 23: (1, {'@': 401}), 24: (1, {'@': 401}), 25: (1, {'@': 401}), 26: (1, {'@': 401}), 27: (1, {'@': 401}), 28: (1, {'@': 401}), 29: (1, {'@': 401}), 30: (1, {'@': 401}), 31: (1, {'@': 401}), 32: (1, {'@': 401})}, 268: {44: (1, {'@': 304}), 62: (1, {'@': 304}), 42: (1, {'@': 304}), 15: (1, {'@': 304}), 63: (1, {'@': 304}), 65: (1, {'@': 304}), 21: (1, {'@': 304}), 53: (1, {'@': 304}), 67: (1, {'@': 304}), 58: (1, {'@': 304}), 56: (1, {'@': 304}), 8: (1, {'@': 304}), 69: (1, {'@': 304}), 70: (1, {'@': 304}), 31: (1, {'@': 304}), 71: (1, {'@': 304}), 13: (1, {'@': 304}), 72: (1, {'@': 304}), 73: (1, {'@': 304}), 41: (1, {'@': 304}), 1: (1, {'@': 304}), 49: (1, {'@': 304}), 74: (1, {'@': 304}), 40: (1, {'@': 304}), 76: (1, {'@': 304}), 77: (1, {'@': 304}), 78: (1, {'@': 304}), 52: (1, {'@': 304}), 79: (1, {'@': 304}), 80: (1, {'@': 304}), 81: (1, {'@': 304}), 34: (1, {'@': 304}), 61: (1, {'@': 304}), 64: (1, {'@': 304}), 66: (1, {'@': 304}), 68: (1, {'@': 304}), 75: (1, {'@': 304}), 23: (1, {'@': 304})}, 269: {61: (1, {'@': 301}), 44: (1, {'@': 301}), 62: (1, {'@': 301}), 42: (1, {'@': 301}), 15: (1, {'@': 301}), 63: (1, {'@': 301}), 64: (1, {'@': 301}), 65: (1, {'@': 301}), 21: (1, {'@': 301}), 53: (1, {'@': 301}), 66: (1, {'@': 301}), 67: (1, {'@': 301}), 58: (1, {'@': 301}), 68: (1, {'@': 301}), 56: (1, {'@': 301}), 8: (1, {'@': 301}), 69: (1, {'@': 301}), 70: (1, {'@': 301}), 31: (1, {'@': 301}), 71: (1, {'@': 301}), 13: (1, {'@': 301}), 72: (1, {'@': 301}), 73: (1, {'@': 301}), 41: (1, {'@': 301}), 1: (1, {'@': 301}), 49: (1, {'@': 301}), 74: (1, {'@': 301}), 75: (1, {'@': 301}), 40: (1, {'@': 301}), 76: (1, {'@': 301}), 77: (1, {'@': 301}), 23: (1, {'@': 301}), 78: (1, {'@': 301}), 52: (1, {'@': 301}), 79: (1, {'@': 301}), 80: (1, {'@': 301}), 81: (1, {'@': 301}), 34: (1, {'@': 301})}, 270: {17: (1, {'@': 271}), 29: (1, {'@': 271})}, 271: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 41: (0, 490), 40: (0, 356), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 49: (0, 596), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 50: (0, 403), 59: (0, 551)}, 272: {21: (0, 201), 60: (0, 250), 66: (1, {'@': 293}), 64: (1, {'@': 293})}, 273: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 45: (0, 232), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 274: {79: (0, 110), 90: (0, 578), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 275: {61: (1, {'@': 300}), 44: (1, {'@': 300}), 62: (1, {'@': 300}), 42: (1, {'@': 300}), 15: (1, {'@': 300}), 63: (1, {'@': 300}), 64: (1, {'@': 300}), 65: (1, {'@': 300}), 21: (1, {'@': 300}), 53: (1, {'@': 300}), 66: (1, {'@': 300}), 67: (1, {'@': 300}), 58: (1, {'@': 300}), 68: (1, {'@': 300}), 56: (1, {'@': 300}), 8: (1, {'@': 300}), 69: (1, {'@': 300}), 70: (1, {'@': 300}), 31: (1, {'@': 300}), 71: (1, {'@': 300}), 13: (1, {'@': 300}), 72: (1, {'@': 300}), 73: (1, {'@': 300}), 41: (1, {'@': 300}), 1: (1, {'@': 300}), 49: (1, {'@': 300}), 74: (1, {'@': 300}), 75: (1, {'@': 300}), 40: (1, {'@': 300}), 76: (1, {'@': 300}), 77: (1, {'@': 300}), 23: (1, {'@': 300}), 78: (1, {'@': 300}), 52: (1, {'@': 300}), 79: (1, {'@': 300}), 80: (1, {'@': 300}), 81: (1, {'@': 300}), 34: (1, {'@': 300})}, 276: {21: (0, 201), 60: (0, 163)}, 277: {8: (0, 462), 5: (0, 177), 29: (0, 313)}, 278: {140: (0, 225), 42: (0, 123), 141: (0, 209), 32: (0, 249), 123: (0, 218)}, 279: {44: (1, {'@': 314}), 62: (1, {'@': 314}), 42: (1, {'@': 314}), 15: (1, {'@': 314}), 63: (1, {'@': 314}), 65: (1, {'@': 314}), 21: (1, {'@': 314}), 53: (1, {'@': 314}), 67: (1, {'@': 314}), 58: (1, {'@': 314}), 56: (1, {'@': 314}), 8: (1, {'@': 314}), 69: (1, {'@': 314}), 70: (1, {'@': 314}), 31: (1, {'@': 314}), 71: (1, {'@': 314}), 13: (1, {'@': 314}), 72: (1, {'@': 314}), 73: (1, {'@': 314}), 41: (1, {'@': 314}), 1: (1, {'@': 314}), 49: (1, {'@': 314}), 74: (1, {'@': 314}), 40: (1, {'@': 314}), 76: (1, {'@': 314}), 77: (1, {'@': 314}), 78: (1, {'@': 314}), 52: (1, {'@': 314}), 79: (1, {'@': 314}), 80: (1, {'@': 314}), 81: (1, {'@': 314}), 34: (1, {'@': 314}), 61: (1, {'@': 314}), 64: (1, {'@': 314}), 66: (1, {'@': 314}), 68: (1, {'@': 314}), 75: (1, {'@': 314}), 23: (1, {'@': 314})}, 280: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 60: (0, 348), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 123: (0, 327), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 116: (0, 6), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 281: {61: (1, {'@': 286}), 44: (1, {'@': 286}), 62: (1, {'@': 286}), 42: (1, {'@': 286}), 15: (1, {'@': 286}), 63: (1, {'@': 286}), 64: (1, {'@': 286}), 65: (1, {'@': 286}), 21: (1, {'@': 286}), 53: (1, {'@': 286}), 66: (1, {'@': 286}), 67: (1, {'@': 286}), 58: (1, {'@': 286}), 68: (1, {'@': 286}), 56: (1, {'@': 286}), 8: (1, {'@': 286}), 69: (1, {'@': 286}), 70: (1, {'@': 286}), 31: (1, {'@': 286}), 71: (1, {'@': 286}), 13: (1, {'@': 286}), 72: (1, {'@': 286}), 73: (1, {'@': 286}), 41: (1, {'@': 286}), 1: (1, {'@': 286}), 49: (1, {'@': 286}), 74: (1, {'@': 286}), 75: (1, {'@': 286}), 40: (1, {'@': 286}), 76: (1, {'@': 286}), 77: (1, {'@': 286}), 23: (1, {'@': 286}), 78: (1, {'@': 286}), 52: (1, {'@': 286}), 79: (1, {'@': 286}), 80: (1, {'@': 286}), 81: (1, {'@': 286}), 34: (1, {'@': 286})}, 282: {44: (1, {'@': 380}), 62: (1, {'@': 380}), 42: (1, {'@': 380}), 15: (1, {'@': 380}), 63: (1, {'@': 380}), 65: (1, {'@': 380}), 21: (1, {'@': 380}), 53: (1, {'@': 380}), 67: (1, {'@': 380}), 58: (1, {'@': 380}), 56: (1, {'@': 380}), 8: (1, {'@': 380}), 69: (1, {'@': 380}), 70: (1, {'@': 380}), 31: (1, {'@': 380}), 71: (1, {'@': 380}), 13: (1, {'@': 380}), 72: (1, {'@': 380}), 73: (1, {'@': 380}), 41: (1, {'@': 380}), 1: (1, {'@': 380}), 49: (1, {'@': 380}), 74: (1, {'@': 380}), 40: (1, {'@': 380}), 76: (1, {'@': 380}), 77: (1, {'@': 380}), 78: (1, {'@': 380}), 52: (1, {'@': 380}), 79: (1, {'@': 380}), 80: (1, {'@': 380}), 81: (1, {'@': 380}), 34: (1, {'@': 380}), 61: (1, {'@': 380}), 64: (1, {'@': 380}), 66: (1, {'@': 380}), 68: (1, {'@': 380}), 75: (1, {'@': 380}), 23: (1, {'@': 380})}, 283: {132: (0, 645), 42: (0, 608), 21: (0, 88)}, 284: {61: (1, {'@': 91}), 44: (1, {'@': 91}), 62: (1, {'@': 91}), 42: (1, {'@': 91}), 15: (1, {'@': 91}), 63: (1, {'@': 91}), 65: (1, {'@': 91}), 53: (1, {'@': 91}), 58: (1, {'@': 91}), 56: (1, {'@': 91}), 8: (1, {'@': 91}), 69: (1, {'@': 91}), 70: (1, {'@': 91}), 31: (1, {'@': 91}), 71: (1, {'@': 91}), 13: (1, {'@': 91}), 72: (1, {'@': 91}), 73: (1, {'@': 91}), 41: (1, {'@': 91}), 1: (1, {'@': 91}), 49: (1, {'@': 91}), 74: (1, {'@': 91}), 40: (1, {'@': 91}), 76: (1, {'@': 91}), 77: (1, {'@': 91}), 23: (1, {'@': 91}), 78: (1, {'@': 91}), 52: (1, {'@': 91}), 79: (1, {'@': 91}), 80: (1, {'@': 91}), 81: (1, {'@': 91}), 34: (1, {'@': 91})}, 285: {60: (0, 576), 68: (0, 57), 21: (0, 201), 83: (0, 372), 128: (0, 347)}, 286: {61: (1, {'@': 234}), 44: (1, {'@': 234}), 62: (1, {'@': 234}), 42: (1, {'@': 234}), 15: (1, {'@': 234}), 63: (1, {'@': 234}), 65: (1, {'@': 234}), 21: (1, {'@': 234}), 53: (1, {'@': 234}), 58: (1, {'@': 234}), 56: (1, {'@': 234}), 8: (1, {'@': 234}), 69: (1, {'@': 234}), 70: (1, {'@': 234}), 31: (1, {'@': 234}), 71: (1, {'@': 234}), 13: (1, {'@': 234}), 72: (1, {'@': 234}), 73: (1, {'@': 234}), 41: (1, {'@': 234}), 1: (1, {'@': 234}), 49: (1, {'@': 234}), 74: (1, {'@': 234}), 40: (1, {'@': 234}), 76: (1, {'@': 234}), 77: (1, {'@': 234}), 23: (1, {'@': 234}), 78: (1, {'@': 234}), 52: (1, {'@': 234}), 79: (1, {'@': 234}), 80: (1, {'@': 234}), 81: (1, {'@': 234}), 34: (1, {'@': 234})}, 287: {21: (0, 201), 60: (0, 189), 61: (1, {'@': 104}), 44: (1, {'@': 104}), 62: (1, {'@': 104}), 42: (1, {'@': 104}), 15: (1, {'@': 104}), 63: (1, {'@': 104}), 65: (1, {'@': 104}), 53: (1, {'@': 104}), 58: (1, {'@': 104}), 56: (1, {'@': 104}), 8: (1, {'@': 104}), 69: (1, {'@': 104}), 70: (1, {'@': 104}), 31: (1, {'@': 104}), 71: (1, {'@': 104}), 13: (1, {'@': 104}), 72: (1, {'@': 104}), 73: (1, {'@': 104}), 41: (1, {'@': 104}), 1: (1, {'@': 104}), 49: (1, {'@': 104}), 74: (1, {'@': 104}), 40: (1, {'@': 104}), 76: (1, {'@': 104}), 77: (1, {'@': 104}), 23: (1, {'@': 104}), 78: (1, {'@': 104}), 52: (1, {'@': 104}), 79: (1, {'@': 104}), 80: (1, {'@': 104}), 81: (1, {'@': 104}), 34: (1, {'@': 104})}, 288: {44: (1, {'@': 281}), 62: (1, {'@': 281}), 42: (1, {'@': 281}), 15: (1, {'@': 281}), 63: (1, {'@': 281}), 65: (1, {'@': 281}), 21: (1, {'@': 281}), 53: (1, {'@': 281}), 67: (1, {'@': 281}), 58: (1, {'@': 281}), 56: (1, {'@': 281}), 8: (1, {'@': 281}), 69: (1, {'@': 281}), 70: (1, {'@': 281}), 31: (1, {'@': 281}), 71: (1, {'@': 281}), 13: (1, {'@': 281}), 72: (1, {'@': 281}), 73: (1, {'@': 281}), 41: (1, {'@': 281}), 1: (1, {'@': 281}), 49: (1, {'@': 281}), 74: (1, {'@': 281}), 40: (1, {'@': 281}), 76: (1, {'@': 281}), 77: (1, {'@': 281}), 78: (1, {'@': 281}), 52: (1, {'@': 281}), 79: (1, {'@': 281}), 80: (1, {'@': 281}), 81: (1, {'@': 281}), 34: (1, {'@': 281}), 61: (1, {'@': 281}), 64: (1, {'@': 281}), 66: (1, {'@': 281}), 68: (1, {'@': 281}), 75: (1, {'@': 281}), 23: (1, {'@': 281})}, 289: {60: (0, 328), 21: (0, 201), 61: (1, {'@': 349}), 44: (1, {'@': 349}), 62: (1, {'@': 349}), 42: (1, {'@': 349}), 15: (1, {'@': 349}), 63: (1, {'@': 349}), 64: (1, {'@': 349}), 65: (1, {'@': 349}), 53: (1, {'@': 349}), 66: (1, {'@': 349}), 67: (1, {'@': 349}), 58: (1, {'@': 349}), 68: (1, {'@': 349}), 56: (1, {'@': 349}), 8: (1, {'@': 349}), 69: (1, {'@': 349}), 70: (1, {'@': 349}), 31: (1, {'@': 349}), 71: (1, {'@': 349}), 13: (1, {'@': 349}), 72: (1, {'@': 349}), 73: (1, {'@': 349}), 41: (1, {'@': 349}), 1: (1, {'@': 349}), 49: (1, {'@': 349}), 74: (1, {'@': 349}), 75: (1, {'@': 349}), 40: (1, {'@': 349}), 76: (1, {'@': 349}), 77: (1, {'@': 349}), 23: (1, {'@': 349}), 78: (1, {'@': 349}), 52: (1, {'@': 349}), 79: (1, {'@': 349}), 80: (1, {'@': 349}), 81: (1, {'@': 349}), 34: (1, {'@': 349})}, 290: {79: (0, 110), 90: (0, 520), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 568), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 126: (0, 617), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 125: (0, 228), 98: (0, 538), 77: (0, 554), 57: (0, 553), 96: (0, 615), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 127: (0, 552), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 29: (1, {'@': 269})}, 291: {21: (0, 88), 66: (1, {'@': 296}), 64: (1, {'@': 296})}, 292: {128: (0, 360), 68: (0, 57), 21: (0, 88), 83: (0, 372)}, 293: {142: (0, 61), 41: (0, 214)}, 294: {79: (0, 110), 90: (0, 89), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 295: {29: (0, 212)}, 296: {21: (0, 201), 60: (0, 137), 61: (1, {'@': 351}), 44: (1, {'@': 351}), 62: (1, {'@': 351}), 42: (1, {'@': 351}), 15: (1, {'@': 351}), 63: (1, {'@': 351}), 64: (1, {'@': 351}), 65: (1, {'@': 351}), 53: (1, {'@': 351}), 66: (1, {'@': 351}), 67: (1, {'@': 351}), 58: (1, {'@': 351}), 68: (1, {'@': 351}), 56: (1, {'@': 351}), 8: (1, {'@': 351}), 69: (1, {'@': 351}), 70: (1, {'@': 351}), 31: (1, {'@': 351}), 71: (1, {'@': 351}), 13: (1, {'@': 351}), 72: (1, {'@': 351}), 73: (1, {'@': 351}), 41: (1, {'@': 351}), 1: (1, {'@': 351}), 49: (1, {'@': 351}), 74: (1, {'@': 351}), 75: (1, {'@': 351}), 40: (1, {'@': 351}), 76: (1, {'@': 351}), 77: (1, {'@': 351}), 23: (1, {'@': 351}), 78: (1, {'@': 351}), 52: (1, {'@': 351}), 79: (1, {'@': 351}), 80: (1, {'@': 351}), 81: (1, {'@': 351}), 34: (1, {'@': 351})}, 297: {21: (0, 88), 61: (1, {'@': 358}), 44: (1, {'@': 358}), 62: (1, {'@': 358}), 42: (1, {'@': 358}), 15: (1, {'@': 358}), 63: (1, {'@': 358}), 64: (1, {'@': 358}), 65: (1, {'@': 358}), 53: (1, {'@': 358}), 66: (1, {'@': 358}), 67: (1, {'@': 358}), 58: (1, {'@': 358}), 68: (1, {'@': 358}), 56: (1, {'@': 358}), 8: (1, {'@': 358}), 69: (1, {'@': 358}), 70: (1, {'@': 358}), 31: (1, {'@': 358}), 71: (1, {'@': 358}), 13: (1, {'@': 358}), 72: (1, {'@': 358}), 73: (1, {'@': 358}), 41: (1, {'@': 358}), 1: (1, {'@': 358}), 49: (1, {'@': 358}), 74: (1, {'@': 358}), 75: (1, {'@': 358}), 40: (1, {'@': 358}), 76: (1, {'@': 358}), 77: (1, {'@': 358}), 23: (1, {'@': 358}), 78: (1, {'@': 358}), 52: (1, {'@': 358}), 79: (1, {'@': 358}), 80: (1, {'@': 358}), 81: (1, {'@': 358}), 34: (1, {'@': 358})}, 298: {21: (0, 181), 44: (1, {'@': 317}), 62: (1, {'@': 317}), 42: (1, {'@': 317}), 15: (1, {'@': 317}), 63: (1, {'@': 317}), 65: (1, {'@': 317}), 53: (1, {'@': 317}), 67: (1, {'@': 317}), 58: (1, {'@': 317}), 56: (1, {'@': 317}), 8: (1, {'@': 317}), 69: (1, {'@': 317}), 70: (1, {'@': 317}), 31: (1, {'@': 317}), 71: (1, {'@': 317}), 13: (1, {'@': 317}), 72: (1, {'@': 317}), 73: (1, {'@': 317}), 41: (1, {'@': 317}), 1: (1, {'@': 317}), 49: (1, {'@': 317}), 74: (1, {'@': 317}), 40: (1, {'@': 317}), 76: (1, {'@': 317}), 77: (1, {'@': 317}), 78: (1, {'@': 317}), 52: (1, {'@': 317}), 79: (1, {'@': 317}), 80: (1, {'@': 317}), 81: (1, {'@': 317}), 34: (1, {'@': 317}), 61: (1, {'@': 317}), 64: (1, {'@': 317}), 66: (1, {'@': 317}), 68: (1, {'@': 317}), 75: (1, {'@': 317}), 23: (1, {'@': 317})}, 299: {79: (0, 110), 90: (0, 359), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 300: {54: (0, 387), 34: (0, 400), 36: (0, 40), 31: (0, 597), 41: (0, 51), 57: (0, 553), 38: (0, 358), 1: (0, 572)}, 301: {29: (1, {'@': 237})}, 302: {60: (0, 266), 21: (0, 201), 61: (1, {'@': 341}), 44: (1, {'@': 341}), 62: (1, {'@': 341}), 42: (1, {'@': 341}), 15: (1, {'@': 341}), 63: (1, {'@': 341}), 64: (1, {'@': 341}), 65: (1, {'@': 341}), 53: (1, {'@': 341}), 66: (1, {'@': 341}), 67: (1, {'@': 341}), 58: (1, {'@': 341}), 68: (1, {'@': 341}), 56: (1, {'@': 341}), 8: (1, {'@': 341}), 69: (1, {'@': 341}), 70: (1, {'@': 341}), 31: (1, {'@': 341}), 71: (1, {'@': 341}), 13: (1, {'@': 341}), 72: (1, {'@': 341}), 73: (1, {'@': 341}), 41: (1, {'@': 341}), 1: (1, {'@': 341}), 49: (1, {'@': 341}), 74: (1, {'@': 341}), 75: (1, {'@': 341}), 40: (1, {'@': 341}), 76: (1, {'@': 341}), 77: (1, {'@': 341}), 23: (1, {'@': 341}), 78: (1, {'@': 341}), 52: (1, {'@': 341}), 79: (1, {'@': 341}), 80: (1, {'@': 341}), 81: (1, {'@': 341}), 34: (1, {'@': 341})}, 303: {2: (1, {'@': 134}), 3: (1, {'@': 134}), 5: (1, {'@': 134}), 21: (1, {'@': 134}), 8: (1, {'@': 134}), 9: (1, {'@': 134}), 23: (1, {'@': 134}), 13: (1, {'@': 134}), 14: (1, {'@': 134}), 26: (1, {'@': 134}), 16: (1, {'@': 134}), 17: (1, {'@': 134}), 28: (1, {'@': 134}), 29: (1, {'@': 134})}, 304: {3: (1, {'@': 263}), 5: (1, {'@': 263}), 21: (1, {'@': 263}), 8: (1, {'@': 263}), 31: (1, {'@': 263}), 23: (1, {'@': 263}), 13: (1, {'@': 263}), 26: (1, {'@': 263}), 16: (1, {'@': 263}), 17: (1, {'@': 263}), 29: (1, {'@': 263})}, 305: {21: (0, 279), 44: (1, {'@': 315}), 62: (1, {'@': 315}), 42: (1, {'@': 315}), 15: (1, {'@': 315}), 63: (1, {'@': 315}), 65: (1, {'@': 315}), 53: (1, {'@': 315}), 67: (1, {'@': 315}), 58: (1, {'@': 315}), 56: (1, {'@': 315}), 8: (1, {'@': 315}), 69: (1, {'@': 315}), 70: (1, {'@': 315}), 31: (1, {'@': 315}), 71: (1, {'@': 315}), 13: (1, {'@': 315}), 72: (1, {'@': 315}), 73: (1, {'@': 315}), 41: (1, {'@': 315}), 1: (1, {'@': 315}), 49: (1, {'@': 315}), 74: (1, {'@': 315}), 40: (1, {'@': 315}), 76: (1, {'@': 315}), 77: (1, {'@': 315}), 78: (1, {'@': 315}), 52: (1, {'@': 315}), 79: (1, {'@': 315}), 80: (1, {'@': 315}), 81: (1, {'@': 315}), 34: (1, {'@': 315}), 61: (1, {'@': 315}), 64: (1, {'@': 315}), 66: (1, {'@': 315}), 68: (1, {'@': 315}), 75: (1, {'@': 315}), 23: (1, {'@': 315})}, 306: {21: (1, {'@': 382}), 23: (1, {'@': 382}), 17: (1, {'@': 382})}, 307: {3: (1, {'@': 182})}, 308: {8: (0, 462), 5: (0, 177), 17: (0, 158), 3: (1, {'@': 183})}, 309: {60: (0, 517), 66: (0, 595), 135: (0, 574), 21: (0, 201), 136: (0, 527), 137: (0, 440), 64: (0, 363), 138: (0, 585), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 310: {26: (0, 484), 21: (1, {'@': 119})}, 311: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 197), 44: (1, {'@': 339}), 62: (1, {'@': 339}), 42: (1, {'@': 339}), 15: (1, {'@': 339}), 63: (1, {'@': 339}), 65: (1, {'@': 339}), 21: (1, {'@': 339}), 53: (1, {'@': 339}), 67: (1, {'@': 339}), 58: (1, {'@': 339}), 56: (1, {'@': 339}), 8: (1, {'@': 339}), 69: (1, {'@': 339}), 70: (1, {'@': 339}), 31: (1, {'@': 339}), 71: (1, {'@': 339}), 13: (1, {'@': 339}), 72: (1, {'@': 339}), 73: (1, {'@': 339}), 41: (1, {'@': 339}), 1: (1, {'@': 339}), 49: (1, {'@': 339}), 74: (1, {'@': 339}), 40: (1, {'@': 339}), 76: (1, {'@': 339}), 77: (1, {'@': 339}), 78: (1, {'@': 339}), 52: (1, {'@': 339}), 79: (1, {'@': 339}), 80: (1, {'@': 339}), 81: (1, {'@': 339}), 34: (1, {'@': 339}), 61: (1, {'@': 339}), 64: (1, {'@': 339}), 66: (1, {'@': 339}), 23: (1, {'@': 339})}, 312: {21: (0, 201), 60: (0, 242), 61: (1, {'@': 343}), 44: (1, {'@': 343}), 62: (1, {'@': 343}), 42: (1, {'@': 343}), 15: (1, {'@': 343}), 63: (1, {'@': 343}), 64: (1, {'@': 343}), 65: (1, {'@': 343}), 53: (1, {'@': 343}), 66: (1, {'@': 343}), 67: (1, {'@': 343}), 58: (1, {'@': 343}), 68: (1, {'@': 343}), 56: (1, {'@': 343}), 8: (1, {'@': 343}), 69: (1, {'@': 343}), 70: (1, {'@': 343}), 31: (1, {'@': 343}), 71: (1, {'@': 343}), 13: (1, {'@': 343}), 72: (1, {'@': 343}), 73: (1, {'@': 343}), 41: (1, {'@': 343}), 1: (1, {'@': 343}), 49: (1, {'@': 343}), 74: (1, {'@': 343}), 75: (1, {'@': 343}), 40: (1, {'@': 343}), 76: (1, {'@': 343}), 77: (1, {'@': 343}), 23: (1, {'@': 343}), 78: (1, {'@': 343}), 52: (1, {'@': 343}), 79: (1, {'@': 343}), 80: (1, {'@': 343}), 81: (1, {'@': 343}), 34: (1, {'@': 343})}, 313: {44: (1, {'@': 306}), 62: (1, {'@': 306}), 42: (1, {'@': 306}), 15: (1, {'@': 306}), 63: (1, {'@': 306}), 65: (1, {'@': 306}), 21: (1, {'@': 306}), 53: (1, {'@': 306}), 67: (1, {'@': 306}), 58: (1, {'@': 306}), 56: (1, {'@': 306}), 8: (1, {'@': 306}), 69: (1, {'@': 306}), 70: (1, {'@': 306}), 31: (1, {'@': 306}), 71: (1, {'@': 306}), 13: (1, {'@': 306}), 72: (1, {'@': 306}), 73: (1, {'@': 306}), 41: (1, {'@': 306}), 1: (1, {'@': 306}), 49: (1, {'@': 306}), 74: (1, {'@': 306}), 40: (1, {'@': 306}), 76: (1, {'@': 306}), 77: (1, {'@': 306}), 78: (1, {'@': 306}), 52: (1, {'@': 306}), 79: (1, {'@': 306}), 80: (1, {'@': 306}), 81: (1, {'@': 306}), 34: (1, {'@': 306}), 61: (1, {'@': 306}), 64: (1, {'@': 306}), 66: (1, {'@': 306}), 68: (1, {'@': 306}), 75: (1, {'@': 306}), 23: (1, {'@': 306})}, 314: {44: (1, {'@': 369}), 62: (1, {'@': 369}), 42: (1, {'@': 369}), 15: (1, {'@': 369}), 63: (1, {'@': 369}), 65: (1, {'@': 369}), 21: (1, {'@': 369}), 53: (1, {'@': 369}), 67: (1, {'@': 369}), 58: (1, {'@': 369}), 56: (1, {'@': 369}), 8: (1, {'@': 369}), 69: (1, {'@': 369}), 70: (1, {'@': 369}), 31: (1, {'@': 369}), 71: (1, {'@': 369}), 13: (1, {'@': 369}), 72: (1, {'@': 369}), 73: (1, {'@': 369}), 41: (1, {'@': 369}), 1: (1, {'@': 369}), 49: (1, {'@': 369}), 74: (1, {'@': 369}), 40: (1, {'@': 369}), 76: (1, {'@': 369}), 77: (1, {'@': 369}), 78: (1, {'@': 369}), 52: (1, {'@': 369}), 79: (1, {'@': 369}), 80: (1, {'@': 369}), 81: (1, {'@': 369}), 34: (1, {'@': 369}), 61: (1, {'@': 369}), 64: (1, {'@': 369}), 66: (1, {'@': 369}), 68: (1, {'@': 369}), 75: (1, {'@': 369}), 23: (1, {'@': 369})}, 315: {23: (0, 634), 21: (0, 88)}, 316: {21: (0, 88), 61: (1, {'@': 352}), 44: (1, {'@': 352}), 62: (1, {'@': 352}), 42: (1, {'@': 352}), 15: (1, {'@': 352}), 63: (1, {'@': 352}), 64: (1, {'@': 352}), 65: (1, {'@': 352}), 53: (1, {'@': 352}), 66: (1, {'@': 352}), 67: (1, {'@': 352}), 58: (1, {'@': 352}), 68: (1, {'@': 352}), 56: (1, {'@': 352}), 8: (1, {'@': 352}), 69: (1, {'@': 352}), 70: (1, {'@': 352}), 31: (1, {'@': 352}), 71: (1, {'@': 352}), 13: (1, {'@': 352}), 72: (1, {'@': 352}), 73: (1, {'@': 352}), 41: (1, {'@': 352}), 1: (1, {'@': 352}), 49: (1, {'@': 352}), 74: (1, {'@': 352}), 75: (1, {'@': 352}), 40: (1, {'@': 352}), 76: (1, {'@': 352}), 77: (1, {'@': 352}), 23: (1, {'@': 352}), 78: (1, {'@': 352}), 52: (1, {'@': 352}), 79: (1, {'@': 352}), 80: (1, {'@': 352}), 81: (1, {'@': 352}), 34: (1, {'@': 352})}, 317: {1: (0, 237), 42: (1, {'@': 397}), 17: (1, {'@': 397}), 21: (1, {'@': 397})}, 318: {44: (1, {'@': 279}), 62: (1, {'@': 279}), 42: (1, {'@': 279}), 15: (1, {'@': 279}), 63: (1, {'@': 279}), 65: (1, {'@': 279}), 21: (1, {'@': 279}), 53: (1, {'@': 279}), 67: (1, {'@': 279}), 58: (1, {'@': 279}), 56: (1, {'@': 279}), 8: (1, {'@': 279}), 69: (1, {'@': 279}), 70: (1, {'@': 279}), 31: (1, {'@': 279}), 71: (1, {'@': 279}), 13: (1, {'@': 279}), 72: (1, {'@': 279}), 73: (1, {'@': 279}), 41: (1, {'@': 279}), 1: (1, {'@': 279}), 49: (1, {'@': 279}), 74: (1, {'@': 279}), 40: (1, {'@': 279}), 76: (1, {'@': 279}), 77: (1, {'@': 279}), 78: (1, {'@': 279}), 52: (1, {'@': 279}), 79: (1, {'@': 279}), 80: (1, {'@': 279}), 81: (1, {'@': 279}), 34: (1, {'@': 279}), 61: (1, {'@': 279}), 64: (1, {'@': 279}), 66: (1, {'@': 279}), 68: (1, {'@': 279}), 75: (1, {'@': 279}), 23: (1, {'@': 279})}, 319: {26: (0, 428)}, 320: {8: (0, 462), 5: (0, 177), 26: (0, 235)}, 321: {8: (0, 462), 5: (0, 177), 29: (0, 626)}, 322: {138: (0, 195), 60: (0, 178), 66: (0, 595), 135: (0, 574), 21: (0, 201), 136: (0, 527), 137: (0, 440), 64: (0, 363), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 323: {8: (0, 462), 5: (0, 177), 3: (1, {'@': 187}), 17: (1, {'@': 187})}, 324: {31: (0, 651)}, 325: {60: (0, 187), 21: (0, 201)}, 326: {2: (1, {'@': 178}), 3: (1, {'@': 178}), 4: (1, {'@': 178}), 5: (1, {'@': 178}), 6: (1, {'@': 178}), 7: (1, {'@': 178}), 8: (1, {'@': 178}), 9: (1, {'@': 178}), 10: (1, {'@': 178}), 11: (1, {'@': 178}), 12: (1, {'@': 178}), 13: (1, {'@': 178}), 14: (1, {'@': 178}), 15: (1, {'@': 178}), 16: (1, {'@': 178}), 17: (1, {'@': 178}), 18: (1, {'@': 178}), 19: (1, {'@': 178}), 20: (1, {'@': 178}), 21: (1, {'@': 178}), 22: (1, {'@': 178}), 23: (1, {'@': 178}), 24: (1, {'@': 178}), 25: (1, {'@': 178}), 26: (1, {'@': 178}), 27: (1, {'@': 178}), 28: (1, {'@': 178}), 29: (1, {'@': 178}), 30: (1, {'@': 178})}, 327: {60: (0, 161), 21: (0, 201), 61: (1, {'@': 345}), 44: (1, {'@': 345}), 62: (1, {'@': 345}), 42: (1, {'@': 345}), 15: (1, {'@': 345}), 63: (1, {'@': 345}), 64: (1, {'@': 345}), 65: (1, {'@': 345}), 53: (1, {'@': 345}), 66: (1, {'@': 345}), 67: (1, {'@': 345}), 58: (1, {'@': 345}), 68: (1, {'@': 345}), 56: (1, {'@': 345}), 8: (1, {'@': 345}), 69: (1, {'@': 345}), 70: (1, {'@': 345}), 31: (1, {'@': 345}), 71: (1, {'@': 345}), 13: (1, {'@': 345}), 72: (1, {'@': 345}), 73: (1, {'@': 345}), 41: (1, {'@': 345}), 1: (1, {'@': 345}), 49: (1, {'@': 345}), 74: (1, {'@': 345}), 75: (1, {'@': 345}), 40: (1, {'@': 345}), 76: (1, {'@': 345}), 77: (1, {'@': 345}), 23: (1, {'@': 345}), 78: (1, {'@': 345}), 52: (1, {'@': 345}), 79: (1, {'@': 345}), 80: (1, {'@': 345}), 81: (1, {'@': 345}), 34: (1, {'@': 345})}, 328: {21: (0, 88), 61: (1, {'@': 348}), 44: (1, {'@': 348}), 62: (1, {'@': 348}), 42: (1, {'@': 348}), 15: (1, {'@': 348}), 63: (1, {'@': 348}), 64: (1, {'@': 348}), 65: (1, {'@': 348}), 53: (1, {'@': 348}), 66: (1, {'@': 348}), 67: (1, {'@': 348}), 58: (1, {'@': 348}), 68: (1, {'@': 348}), 56: (1, {'@': 348}), 8: (1, {'@': 348}), 69: (1, {'@': 348}), 70: (1, {'@': 348}), 31: (1, {'@': 348}), 71: (1, {'@': 348}), 13: (1, {'@': 348}), 72: (1, {'@': 348}), 73: (1, {'@': 348}), 41: (1, {'@': 348}), 1: (1, {'@': 348}), 49: (1, {'@': 348}), 74: (1, {'@': 348}), 75: (1, {'@': 348}), 40: (1, {'@': 348}), 76: (1, {'@': 348}), 77: (1, {'@': 348}), 23: (1, {'@': 348}), 78: (1, {'@': 348}), 52: (1, {'@': 348}), 79: (1, {'@': 348}), 80: (1, {'@': 348}), 81: (1, {'@': 348}), 34: (1, {'@': 348})}, 329: {79: (0, 110), 101: (0, 17), 80: (0, 70), 116: (0, 599), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 613), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 123: (0, 126), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 330: {21: (0, 201), 60: (0, 134), 61: (1, {'@': 355}), 44: (1, {'@': 355}), 62: (1, {'@': 355}), 42: (1, {'@': 355}), 15: (1, {'@': 355}), 63: (1, {'@': 355}), 64: (1, {'@': 355}), 65: (1, {'@': 355}), 53: (1, {'@': 355}), 66: (1, {'@': 355}), 67: (1, {'@': 355}), 58: (1, {'@': 355}), 68: (1, {'@': 355}), 56: (1, {'@': 355}), 8: (1, {'@': 355}), 69: (1, {'@': 355}), 70: (1, {'@': 355}), 31: (1, {'@': 355}), 71: (1, {'@': 355}), 13: (1, {'@': 355}), 72: (1, {'@': 355}), 73: (1, {'@': 355}), 41: (1, {'@': 355}), 1: (1, {'@': 355}), 49: (1, {'@': 355}), 74: (1, {'@': 355}), 75: (1, {'@': 355}), 40: (1, {'@': 355}), 76: (1, {'@': 355}), 77: (1, {'@': 355}), 23: (1, {'@': 355}), 78: (1, {'@': 355}), 52: (1, {'@': 355}), 79: (1, {'@': 355}), 80: (1, {'@': 355}), 81: (1, {'@': 355}), 34: (1, {'@': 355})}, 331: {21: (0, 88), 61: (1, {'@': 360}), 44: (1, {'@': 360}), 62: (1, {'@': 360}), 42: (1, {'@': 360}), 15: (1, {'@': 360}), 63: (1, {'@': 360}), 64: (1, {'@': 360}), 65: (1, {'@': 360}), 53: (1, {'@': 360}), 66: (1, {'@': 360}), 67: (1, {'@': 360}), 58: (1, {'@': 360}), 68: (1, {'@': 360}), 56: (1, {'@': 360}), 8: (1, {'@': 360}), 69: (1, {'@': 360}), 70: (1, {'@': 360}), 31: (1, {'@': 360}), 71: (1, {'@': 360}), 13: (1, {'@': 360}), 72: (1, {'@': 360}), 73: (1, {'@': 360}), 41: (1, {'@': 360}), 1: (1, {'@': 360}), 49: (1, {'@': 360}), 74: (1, {'@': 360}), 75: (1, {'@': 360}), 40: (1, {'@': 360}), 76: (1, {'@': 360}), 77: (1, {'@': 360}), 23: (1, {'@': 360}), 78: (1, {'@': 360}), 52: (1, {'@': 360}), 79: (1, {'@': 360}), 80: (1, {'@': 360}), 81: (1, {'@': 360}), 34: (1, {'@': 360})}, 332: {61: (1, {'@': 235}), 44: (1, {'@': 235}), 62: (1, {'@': 235}), 42: (1, {'@': 235}), 15: (1, {'@': 235}), 63: (1, {'@': 235}), 65: (1, {'@': 235}), 21: (1, {'@': 235}), 53: (1, {'@': 235}), 58: (1, {'@': 235}), 56: (1, {'@': 235}), 8: (1, {'@': 235}), 69: (1, {'@': 235}), 70: (1, {'@': 235}), 31: (1, {'@': 235}), 71: (1, {'@': 235}), 13: (1, {'@': 235}), 72: (1, {'@': 235}), 73: (1, {'@': 235}), 41: (1, {'@': 235}), 1: (1, {'@': 235}), 49: (1, {'@': 235}), 74: (1, {'@': 235}), 40: (1, {'@': 235}), 76: (1, {'@': 235}), 77: (1, {'@': 235}), 23: (1, {'@': 235}), 78: (1, {'@': 235}), 52: (1, {'@': 235}), 79: (1, {'@': 235}), 80: (1, {'@': 235}), 81: (1, {'@': 235}), 34: (1, {'@': 235})}, 333: {7: (0, 44), 2: (1, {'@': 139}), 3: (1, {'@': 139}), 5: (1, {'@': 139}), 8: (1, {'@': 139}), 9: (1, {'@': 139}), 11: (1, {'@': 139}), 12: (1, {'@': 139}), 13: (1, {'@': 139}), 14: (1, {'@': 139}), 16: (1, {'@': 139}), 17: (1, {'@': 139}), 18: (1, {'@': 139}), 20: (1, {'@': 139}), 21: (1, {'@': 139}), 23: (1, {'@': 139}), 24: (1, {'@': 139}), 26: (1, {'@': 139}), 28: (1, {'@': 139}), 29: (1, {'@': 139}), 30: (1, {'@': 139})}, 334: {22: (0, 566), 2: (1, {'@': 146}), 3: (1, {'@': 146}), 5: (1, {'@': 146}), 11: (1, {'@': 146}), 20: (1, {'@': 146}), 21: (1, {'@': 146}), 24: (1, {'@': 146}), 28: (1, {'@': 146}), 30: (1, {'@': 146}), 7: (1, {'@': 146}), 8: (1, {'@': 146}), 9: (1, {'@': 146}), 12: (1, {'@': 146}), 13: (1, {'@': 146}), 14: (1, {'@': 146}), 16: (1, {'@': 146}), 17: (1, {'@': 146}), 18: (1, {'@': 146}), 23: (1, {'@': 146}), 26: (1, {'@': 146}), 29: (1, {'@': 146})}, 335: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 116: (0, 582), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 123: (0, 589), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 336: {68: (0, 57), 60: (0, 477), 21: (0, 201), 128: (0, 461), 83: (0, 372)}, 337: {1: (1, {'@': 399}), 17: (1, {'@': 399}), 42: (1, {'@': 399}), 21: (1, {'@': 399}), 29: (1, {'@': 399})}, 338: {2: (1, {'@': 165}), 3: (1, {'@': 165}), 4: (1, {'@': 165}), 5: (1, {'@': 165}), 6: (1, {'@': 165}), 7: (1, {'@': 165}), 8: (1, {'@': 165}), 9: (1, {'@': 165}), 10: (1, {'@': 165}), 11: (1, {'@': 165}), 12: (1, {'@': 165}), 13: (1, {'@': 165}), 14: (1, {'@': 165}), 15: (1, {'@': 165}), 16: (1, {'@': 165}), 17: (1, {'@': 165}), 18: (1, {'@': 165}), 19: (1, {'@': 165}), 20: (1, {'@': 165}), 21: (1, {'@': 165}), 22: (1, {'@': 165}), 23: (1, {'@': 165}), 24: (1, {'@': 165}), 25: (1, {'@': 165}), 26: (1, {'@': 165}), 27: (1, {'@': 165}), 28: (1, {'@': 165}), 29: (1, {'@': 165}), 30: (1, {'@': 165})}, 339: {74: (0, 39), 21: (0, 88)}, 340: {44: (1, {'@': 379}), 62: (1, {'@': 379}), 42: (1, {'@': 379}), 15: (1, {'@': 379}), 63: (1, {'@': 379}), 65: (1, {'@': 379}), 21: (1, {'@': 379}), 53: (1, {'@': 379}), 67: (1, {'@': 379}), 58: (1, {'@': 379}), 56: (1, {'@': 379}), 8: (1, {'@': 379}), 69: (1, {'@': 379}), 70: (1, {'@': 379}), 31: (1, {'@': 379}), 71: (1, {'@': 379}), 13: (1, {'@': 379}), 72: (1, {'@': 379}), 73: (1, {'@': 379}), 41: (1, {'@': 379}), 1: (1, {'@': 379}), 49: (1, {'@': 379}), 74: (1, {'@': 379}), 40: (1, {'@': 379}), 76: (1, {'@': 379}), 77: (1, {'@': 379}), 78: (1, {'@': 379}), 52: (1, {'@': 379}), 79: (1, {'@': 379}), 80: (1, {'@': 379}), 81: (1, {'@': 379}), 34: (1, {'@': 379}), 61: (1, {'@': 379}), 64: (1, {'@': 379}), 66: (1, {'@': 379}), 68: (1, {'@': 379}), 75: (1, {'@': 379}), 23: (1, {'@': 379})}, 341: {61: (1, {'@': 389}), 44: (1, {'@': 389}), 62: (1, {'@': 389}), 42: (1, {'@': 389}), 15: (1, {'@': 389}), 63: (1, {'@': 389}), 64: (1, {'@': 389}), 65: (1, {'@': 389}), 21: (1, {'@': 389}), 53: (1, {'@': 389}), 66: (1, {'@': 389}), 67: (1, {'@': 389}), 58: (1, {'@': 389}), 68: (1, {'@': 389}), 56: (1, {'@': 389}), 8: (1, {'@': 389}), 69: (1, {'@': 389}), 70: (1, {'@': 389}), 31: (1, {'@': 389}), 71: (1, {'@': 389}), 13: (1, {'@': 389}), 72: (1, {'@': 389}), 73: (1, {'@': 389}), 41: (1, {'@': 389}), 1: (1, {'@': 389}), 49: (1, {'@': 389}), 74: (1, {'@': 389}), 75: (1, {'@': 389}), 40: (1, {'@': 389}), 76: (1, {'@': 389}), 77: (1, {'@': 389}), 23: (1, {'@': 389}), 78: (1, {'@': 389}), 52: (1, {'@': 389}), 79: (1, {'@': 389}), 80: (1, {'@': 389}), 81: (1, {'@': 389}), 34: (1, {'@': 389})}, 342: {17: (1, {'@': 197}), 23: (1, {'@': 197})}, 343: {8: (0, 462), 5: (0, 177), 3: (0, 155)}, 344: {79: (0, 110), 90: (0, 175), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 345: {21: (0, 201), 60: (0, 234), 61: (1, {'@': 357}), 44: (1, {'@': 357}), 62: (1, {'@': 357}), 42: (1, {'@': 357}), 15: (1, {'@': 357}), 63: (1, {'@': 357}), 64: (1, {'@': 357}), 65: (1, {'@': 357}), 53: (1, {'@': 357}), 66: (1, {'@': 357}), 67: (1, {'@': 357}), 58: (1, {'@': 357}), 68: (1, {'@': 357}), 56: (1, {'@': 357}), 8: (1, {'@': 357}), 69: (1, {'@': 357}), 70: (1, {'@': 357}), 31: (1, {'@': 357}), 71: (1, {'@': 357}), 13: (1, {'@': 357}), 72: (1, {'@': 357}), 73: (1, {'@': 357}), 41: (1, {'@': 357}), 1: (1, {'@': 357}), 49: (1, {'@': 357}), 74: (1, {'@': 357}), 75: (1, {'@': 357}), 40: (1, {'@': 357}), 76: (1, {'@': 357}), 77: (1, {'@': 357}), 23: (1, {'@': 357}), 78: (1, {'@': 357}), 52: (1, {'@': 357}), 79: (1, {'@': 357}), 80: (1, {'@': 357}), 81: (1, {'@': 357}), 34: (1, {'@': 357})}, 346: {89: (0, 301), 87: (0, 263), 41: (0, 3), 88: (0, 4), 27: (0, 173)}, 347: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 150), 44: (1, {'@': 331}), 62: (1, {'@': 331}), 42: (1, {'@': 331}), 15: (1, {'@': 331}), 63: (1, {'@': 331}), 65: (1, {'@': 331}), 21: (1, {'@': 331}), 53: (1, {'@': 331}), 67: (1, {'@': 331}), 58: (1, {'@': 331}), 56: (1, {'@': 331}), 8: (1, {'@': 331}), 69: (1, {'@': 331}), 70: (1, {'@': 331}), 31: (1, {'@': 331}), 71: (1, {'@': 331}), 13: (1, {'@': 331}), 72: (1, {'@': 331}), 73: (1, {'@': 331}), 41: (1, {'@': 331}), 1: (1, {'@': 331}), 49: (1, {'@': 331}), 74: (1, {'@': 331}), 40: (1, {'@': 331}), 76: (1, {'@': 331}), 77: (1, {'@': 331}), 78: (1, {'@': 331}), 52: (1, {'@': 331}), 79: (1, {'@': 331}), 80: (1, {'@': 331}), 81: (1, {'@': 331}), 34: (1, {'@': 331}), 61: (1, {'@': 331}), 64: (1, {'@': 331}), 66: (1, {'@': 331}), 23: (1, {'@': 331})}, 348: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 116: (0, 312), 102: (0, 512), 62: (0, 481), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 123: (0, 302), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 349: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 411), 44: (1, {'@': 335}), 62: (1, {'@': 335}), 42: (1, {'@': 335}), 15: (1, {'@': 335}), 63: (1, {'@': 335}), 65: (1, {'@': 335}), 21: (1, {'@': 335}), 53: (1, {'@': 335}), 67: (1, {'@': 335}), 58: (1, {'@': 335}), 56: (1, {'@': 335}), 8: (1, {'@': 335}), 69: (1, {'@': 335}), 70: (1, {'@': 335}), 31: (1, {'@': 335}), 71: (1, {'@': 335}), 13: (1, {'@': 335}), 72: (1, {'@': 335}), 73: (1, {'@': 335}), 41: (1, {'@': 335}), 1: (1, {'@': 335}), 49: (1, {'@': 335}), 74: (1, {'@': 335}), 40: (1, {'@': 335}), 76: (1, {'@': 335}), 77: (1, {'@': 335}), 78: (1, {'@': 335}), 52: (1, {'@': 335}), 79: (1, {'@': 335}), 80: (1, {'@': 335}), 81: (1, {'@': 335}), 34: (1, {'@': 335}), 61: (1, {'@': 335}), 64: (1, {'@': 335}), 66: (1, {'@': 335}), 23: (1, {'@': 335})}, 350: {60: (0, 412), 21: (0, 201), 56: (1, {'@': 89}), 44: (1, {'@': 89}), 62: (1, {'@': 89}), 8: (1, {'@': 89}), 69: (1, {'@': 89}), 70: (1, {'@': 89}), 31: (1, {'@': 89}), 42: (1, {'@': 89}), 71: (1, {'@': 89}), 13: (1, {'@': 89}), 15: (1, {'@': 89}), 72: (1, {'@': 89}), 73: (1, {'@': 89}), 41: (1, {'@': 89}), 1: (1, {'@': 89}), 63: (1, {'@': 89}), 49: (1, {'@': 89}), 74: (1, {'@': 89}), 65: (1, {'@': 89}), 40: (1, {'@': 89}), 81: (1, {'@': 89}), 76: (1, {'@': 89}), 53: (1, {'@': 89}), 77: (1, {'@': 89}), 67: (1, {'@': 89}), 78: (1, {'@': 89}), 52: (1, {'@': 89}), 79: (1, {'@': 89}), 80: (1, {'@': 89}), 58: (1, {'@': 89}), 34: (1, {'@': 89}), 61: (1, {'@': 89}), 64: (1, {'@': 89}), 66: (1, {'@': 89}), 68: (1, {'@': 89}), 75: (1, {'@': 89}), 23: (1, {'@': 89})}, 351: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 41: (0, 490), 40: (0, 356), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 439), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 352: {41: (0, 14)}, 353: {41: (0, 380), 82: (0, 632), 21: (0, 88), 17: (1, {'@': 388}), 23: (1, {'@': 388})}, 354: {79: (0, 110), 90: (0, 343), 3: (0, 644), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 355: {60: (0, 508), 21: (0, 201), 23: (0, 616)}, 356: {2: (1, {'@': 167}), 3: (1, {'@': 167}), 4: (1, {'@': 167}), 5: (1, {'@': 167}), 6: (1, {'@': 167}), 7: (1, {'@': 167}), 8: (1, {'@': 167}), 9: (1, {'@': 167}), 10: (1, {'@': 167}), 11: (1, {'@': 167}), 12: (1, {'@': 167}), 13: (1, {'@': 167}), 14: (1, {'@': 167}), 15: (1, {'@': 167}), 16: (1, {'@': 167}), 17: (1, {'@': 167}), 18: (1, {'@': 167}), 19: (1, {'@': 167}), 20: (1, {'@': 167}), 21: (1, {'@': 167}), 22: (1, {'@': 167}), 23: (1, {'@': 167}), 24: (1, {'@': 167}), 25: (1, {'@': 167}), 26: (1, {'@': 167}), 27: (1, {'@': 167}), 28: (1, {'@': 167}), 29: (1, {'@': 167}), 30: (1, {'@': 167})}, 357: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 196}), 23: (1, {'@': 196})}, 358: {1: (0, 437), 0: (0, 631), 2: (1, {'@': 405}), 3: (1, {'@': 405}), 4: (1, {'@': 405}), 5: (1, {'@': 405}), 6: (1, {'@': 405}), 7: (1, {'@': 405}), 8: (1, {'@': 405}), 9: (1, {'@': 405}), 10: (1, {'@': 405}), 11: (1, {'@': 405}), 12: (1, {'@': 405}), 13: (1, {'@': 405}), 14: (1, {'@': 405}), 15: (1, {'@': 405}), 16: (1, {'@': 405}), 17: (1, {'@': 405}), 18: (1, {'@': 405}), 19: (1, {'@': 405}), 20: (1, {'@': 405}), 21: (1, {'@': 405}), 22: (1, {'@': 405}), 23: (1, {'@': 405}), 24: (1, {'@': 405}), 25: (1, {'@': 405}), 26: (1, {'@': 405}), 27: (1, {'@': 405}), 28: (1, {'@': 405}), 29: (1, {'@': 405}), 30: (1, {'@': 405}), 31: (1, {'@': 405}), 32: (1, {'@': 405}), 33: (1, {'@': 405})}, 359: {8: (0, 462), 5: (0, 177), 3: (1, {'@': 186}), 17: (1, {'@': 186})}, 360: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 415), 44: (1, {'@': 337}), 62: (1, {'@': 337}), 42: (1, {'@': 337}), 15: (1, {'@': 337}), 63: (1, {'@': 337}), 65: (1, {'@': 337}), 21: (1, {'@': 337}), 53: (1, {'@': 337}), 67: (1, {'@': 337}), 58: (1, {'@': 337}), 56: (1, {'@': 337}), 8: (1, {'@': 337}), 69: (1, {'@': 337}), 70: (1, {'@': 337}), 31: (1, {'@': 337}), 71: (1, {'@': 337}), 13: (1, {'@': 337}), 72: (1, {'@': 337}), 73: (1, {'@': 337}), 41: (1, {'@': 337}), 1: (1, {'@': 337}), 49: (1, {'@': 337}), 74: (1, {'@': 337}), 40: (1, {'@': 337}), 76: (1, {'@': 337}), 77: (1, {'@': 337}), 78: (1, {'@': 337}), 52: (1, {'@': 337}), 79: (1, {'@': 337}), 80: (1, {'@': 337}), 81: (1, {'@': 337}), 34: (1, {'@': 337}), 61: (1, {'@': 337}), 64: (1, {'@': 337}), 66: (1, {'@': 337}), 23: (1, {'@': 337})}, 361: {3: (1, {'@': 223}), 5: (1, {'@': 223}), 21: (1, {'@': 223}), 8: (1, {'@': 223}), 31: (1, {'@': 223}), 23: (1, {'@': 223}), 13: (1, {'@': 223}), 26: (1, {'@': 223}), 16: (1, {'@': 223}), 17: (1, {'@': 223}), 29: (1, {'@': 223})}, 362: {44: (1, {'@': 122}), 62: (1, {'@': 122}), 42: (1, {'@': 122}), 15: (1, {'@': 122}), 63: (1, {'@': 122}), 65: (1, {'@': 122}), 21: (1, {'@': 122}), 53: (1, {'@': 122}), 67: (1, {'@': 122}), 58: (1, {'@': 122}), 56: (1, {'@': 122}), 8: (1, {'@': 122}), 69: (1, {'@': 122}), 70: (1, {'@': 122}), 31: (1, {'@': 122}), 71: (1, {'@': 122}), 13: (1, {'@': 122}), 72: (1, {'@': 122}), 73: (1, {'@': 122}), 41: (1, {'@': 122}), 1: (1, {'@': 122}), 49: (1, {'@': 122}), 74: (1, {'@': 122}), 40: (1, {'@': 122}), 76: (1, {'@': 122}), 77: (1, {'@': 122}), 78: (1, {'@': 122}), 52: (1, {'@': 122}), 79: (1, {'@': 122}), 80: (1, {'@': 122}), 81: (1, {'@': 122}), 34: (1, {'@': 122}), 61: (1, {'@': 122}), 64: (1, {'@': 122}), 66: (1, {'@': 122}), 68: (1, {'@': 122}), 75: (1, {'@': 122}), 23: (1, {'@': 122})}, 363: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 72), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 123: (0, 275), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 116: (0, 269), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 364: {79: (0, 110), 90: (0, 247), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 365: {19: (0, 271), 2: (1, {'@': 153}), 3: (1, {'@': 153}), 4: (1, {'@': 153}), 5: (1, {'@': 153}), 6: (1, {'@': 153}), 7: (1, {'@': 153}), 8: (1, {'@': 153}), 9: (1, {'@': 153}), 10: (1, {'@': 153}), 11: (1, {'@': 153}), 12: (1, {'@': 153}), 13: (1, {'@': 153}), 14: (1, {'@': 153}), 15: (1, {'@': 153}), 16: (1, {'@': 153}), 17: (1, {'@': 153}), 18: (1, {'@': 153}), 20: (1, {'@': 153}), 21: (1, {'@': 153}), 22: (1, {'@': 153}), 23: (1, {'@': 153}), 24: (1, {'@': 153}), 25: (1, {'@': 153}), 26: (1, {'@': 153}), 27: (1, {'@': 153}), 28: (1, {'@': 153}), 29: (1, {'@': 153}), 30: (1, {'@': 153})}, 366: {17: (0, 652), 21: (1, {'@': 109})}, 367: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 41: (0, 490), 40: (0, 356), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 453), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 368: {41: (0, 380), 82: (0, 95), 21: (0, 88), 23: (1, {'@': 388})}, 369: {44: (1, {'@': 311}), 62: (1, {'@': 311}), 42: (1, {'@': 311}), 15: (1, {'@': 311}), 63: (1, {'@': 311}), 65: (1, {'@': 311}), 21: (1, {'@': 311}), 53: (1, {'@': 311}), 67: (1, {'@': 311}), 58: (1, {'@': 311}), 56: (1, {'@': 311}), 8: (1, {'@': 311}), 69: (1, {'@': 311}), 70: (1, {'@': 311}), 31: (1, {'@': 311}), 71: (1, {'@': 311}), 13: (1, {'@': 311}), 72: (1, {'@': 311}), 73: (1, {'@': 311}), 41: (1, {'@': 311}), 1: (1, {'@': 311}), 49: (1, {'@': 311}), 74: (1, {'@': 311}), 40: (1, {'@': 311}), 76: (1, {'@': 311}), 77: (1, {'@': 311}), 78: (1, {'@': 311}), 52: (1, {'@': 311}), 79: (1, {'@': 311}), 80: (1, {'@': 311}), 81: (1, {'@': 311}), 34: (1, {'@': 311}), 61: (1, {'@': 311}), 64: (1, {'@': 311}), 66: (1, {'@': 311}), 68: (1, {'@': 311}), 75: (1, {'@': 311}), 23: (1, {'@': 311})}, 370: {10: (0, 485), 15: (0, 464), 2: (1, {'@': 147}), 3: (1, {'@': 147}), 5: (1, {'@': 147}), 7: (1, {'@': 147}), 8: (1, {'@': 147}), 9: (1, {'@': 147}), 11: (1, {'@': 147}), 12: (1, {'@': 147}), 13: (1, {'@': 147}), 14: (1, {'@': 147}), 16: (1, {'@': 147}), 17: (1, {'@': 147}), 18: (1, {'@': 147}), 20: (1, {'@': 147}), 21: (1, {'@': 147}), 22: (1, {'@': 147}), 23: (1, {'@': 147}), 24: (1, {'@': 147}), 26: (1, {'@': 147}), 28: (1, {'@': 147}), 29: (1, {'@': 147}), 30: (1, {'@': 147})}, 371: {31: (0, 550)}, 372: {61: (1, {'@': 423}), 44: (1, {'@': 423}), 62: (1, {'@': 423}), 42: (1, {'@': 423}), 15: (1, {'@': 423}), 63: (1, {'@': 423}), 64: (1, {'@': 423}), 65: (1, {'@': 423}), 21: (1, {'@': 423}), 53: (1, {'@': 423}), 66: (1, {'@': 423}), 67: (1, {'@': 423}), 58: (1, {'@': 423}), 68: (1, {'@': 423}), 56: (1, {'@': 423}), 8: (1, {'@': 423}), 69: (1, {'@': 423}), 70: (1, {'@': 423}), 31: (1, {'@': 423}), 71: (1, {'@': 423}), 13: (1, {'@': 423}), 72: (1, {'@': 423}), 73: (1, {'@': 423}), 41: (1, {'@': 423}), 1: (1, {'@': 423}), 49: (1, {'@': 423}), 74: (1, {'@': 423}), 75: (1, {'@': 423}), 40: (1, {'@': 423}), 76: (1, {'@': 423}), 77: (1, {'@': 423}), 23: (1, {'@': 423}), 78: (1, {'@': 423}), 52: (1, {'@': 423}), 79: (1, {'@': 423}), 80: (1, {'@': 423}), 81: (1, {'@': 423}), 34: (1, {'@': 423})}, 373: {79: (0, 110), 90: (0, 642), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 96: (0, 401), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 374: {17: (0, 502), 21: (1, {'@': 385}), 23: (1, {'@': 385})}, 375: {21: (0, 201), 60: (0, 50), 23: (0, 580)}, 376: {44: (1, {'@': 312}), 62: (1, {'@': 312}), 42: (1, {'@': 312}), 15: (1, {'@': 312}), 63: (1, {'@': 312}), 65: (1, {'@': 312}), 21: (1, {'@': 312}), 53: (1, {'@': 312}), 67: (1, {'@': 312}), 58: (1, {'@': 312}), 56: (1, {'@': 312}), 8: (1, {'@': 312}), 69: (1, {'@': 312}), 70: (1, {'@': 312}), 31: (1, {'@': 312}), 71: (1, {'@': 312}), 13: (1, {'@': 312}), 72: (1, {'@': 312}), 73: (1, {'@': 312}), 41: (1, {'@': 312}), 1: (1, {'@': 312}), 49: (1, {'@': 312}), 74: (1, {'@': 312}), 40: (1, {'@': 312}), 76: (1, {'@': 312}), 77: (1, {'@': 312}), 78: (1, {'@': 312}), 52: (1, {'@': 312}), 79: (1, {'@': 312}), 80: (1, {'@': 312}), 81: (1, {'@': 312}), 34: (1, {'@': 312}), 61: (1, {'@': 312}), 64: (1, {'@': 312}), 66: (1, {'@': 312}), 68: (1, {'@': 312}), 75: (1, {'@': 312}), 23: (1, {'@': 312})}, 377: {31: (0, 446)}, 378: {17: (1, {'@': 322}), 26: (1, {'@': 322})}, 379: {79: (0, 110), 90: (0, 37), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 96: (0, 47), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 380: {60: (0, 145), 17: (0, 112), 21: (0, 201), 23: (1, {'@': 387})}, 381: {2: (0, 382), 9: (0, 611), 3: (1, {'@': 131}), 5: (1, {'@': 131}), 21: (1, {'@': 131}), 8: (1, {'@': 131}), 23: (1, {'@': 131}), 13: (1, {'@': 131}), 14: (1, {'@': 131}), 26: (1, {'@': 131}), 16: (1, {'@': 131}), 17: (1, {'@': 131}), 28: (1, {'@': 131}), 29: (1, {'@': 131})}, 382: {79: (0, 110), 34: (0, 400), 35: (0, 571), 36: (0, 40), 91: (0, 144), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 45: (0, 525), 44: (0, 436), 98: (0, 12), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 77: (0, 554), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 383: {8: (0, 462), 5: (0, 177), 3: (0, 470)}, 384: {8: (0, 462), 5: (0, 177), 3: (0, 489)}, 385: {29: (0, 278)}, 386: {23: (0, 519), 21: (0, 88)}, 387: {32: (1, {'@': 206}), 17: (1, {'@': 206})}, 388: {79: (0, 110), 90: (0, 584), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 96: (0, 398), 59: (0, 551)}, 389: {3: (1, {'@': 220}), 5: (1, {'@': 220}), 21: (1, {'@': 220}), 8: (1, {'@': 220}), 31: (1, {'@': 220}), 23: (1, {'@': 220}), 13: (1, {'@': 220}), 26: (1, {'@': 220}), 16: (1, {'@': 220}), 17: (1, {'@': 220}), 29: (1, {'@': 220})}, 390: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 123: (0, 73), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 55), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 116: (0, 146), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 391: {79: (0, 110), 90: (0, 603), 35: (0, 571), 36: (0, 40), 37: (0, 370), 106: (0, 474), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 109: (0, 424), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 623), 99: (0, 598), 34: (0, 400), 100: (0, 627), 54: (0, 569), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 96: (0, 619), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 392: {44: (1, {'@': 302}), 62: (1, {'@': 302}), 42: (1, {'@': 302}), 15: (1, {'@': 302}), 63: (1, {'@': 302}), 65: (1, {'@': 302}), 21: (1, {'@': 302}), 53: (1, {'@': 302}), 67: (1, {'@': 302}), 58: (1, {'@': 302}), 56: (1, {'@': 302}), 8: (1, {'@': 302}), 69: (1, {'@': 302}), 70: (1, {'@': 302}), 31: (1, {'@': 302}), 71: (1, {'@': 302}), 13: (1, {'@': 302}), 72: (1, {'@': 302}), 73: (1, {'@': 302}), 41: (1, {'@': 302}), 1: (1, {'@': 302}), 49: (1, {'@': 302}), 74: (1, {'@': 302}), 40: (1, {'@': 302}), 76: (1, {'@': 302}), 77: (1, {'@': 302}), 78: (1, {'@': 302}), 52: (1, {'@': 302}), 79: (1, {'@': 302}), 80: (1, {'@': 302}), 81: (1, {'@': 302}), 34: (1, {'@': 302}), 61: (1, {'@': 302}), 64: (1, {'@': 302}), 66: (1, {'@': 302}), 68: (1, {'@': 302}), 75: (1, {'@': 302}), 23: (1, {'@': 302})}, 393: {143: (0, 633), 17: (1, {'@': 111}), 21: (1, {'@': 111})}, 394: {79: (0, 110), 90: (0, 109), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 395: {21: (0, 88), 74: (0, 324)}, 396: {2: (1, {'@': 169}), 3: (1, {'@': 169}), 4: (1, {'@': 169}), 5: (1, {'@': 169}), 6: (1, {'@': 169}), 7: (1, {'@': 169}), 8: (1, {'@': 169}), 9: (1, {'@': 169}), 10: (1, {'@': 169}), 11: (1, {'@': 169}), 12: (1, {'@': 169}), 13: (1, {'@': 169}), 14: (1, {'@': 169}), 15: (1, {'@': 169}), 16: (1, {'@': 169}), 17: (1, {'@': 169}), 18: (1, {'@': 169}), 19: (1, {'@': 169}), 20: (1, {'@': 169}), 21: (1, {'@': 169}), 22: (1, {'@': 169}), 23: (1, {'@': 169}), 24: (1, {'@': 169}), 25: (1, {'@': 169}), 26: (1, {'@': 169}), 27: (1, {'@': 169}), 28: (1, {'@': 169}), 29: (1, {'@': 169}), 30: (1, {'@': 169})}, 397: {3: (1, {'@': 209}), 5: (1, {'@': 209}), 21: (1, {'@': 209}), 8: (1, {'@': 209}), 31: (1, {'@': 209}), 23: (1, {'@': 209}), 13: (1, {'@': 209}), 26: (1, {'@': 209}), 16: (1, {'@': 209}), 17: (1, {'@': 209}), 29: (1, {'@': 209})}, 398: {21: (1, {'@': 205})}, 399: {123: (0, 67), 60: (0, 96), 42: (0, 123), 41: (0, 131), 21: (0, 201)}, 400: {31: (0, 658), 41: (0, 51), 57: (0, 553), 38: (0, 66), 36: (0, 40)}, 401: {17: (1, {'@': 195}), 23: (1, {'@': 195})}, 402: {21: (0, 88), 56: (1, {'@': 77}), 44: (1, {'@': 77}), 62: (1, {'@': 77}), 8: (1, {'@': 77}), 69: (1, {'@': 77}), 70: (1, {'@': 77}), 31: (1, {'@': 77}), 42: (1, {'@': 77}), 71: (1, {'@': 77}), 13: (1, {'@': 77}), 15: (1, {'@': 77}), 72: (1, {'@': 77}), 73: (1, {'@': 77}), 41: (1, {'@': 77}), 1: (1, {'@': 77}), 63: (1, {'@': 77}), 49: (1, {'@': 77}), 74: (1, {'@': 77}), 65: (1, {'@': 77}), 40: (1, {'@': 77}), 81: (1, {'@': 77}), 76: (1, {'@': 77}), 53: (1, {'@': 77}), 77: (1, {'@': 77}), 67: (1, {'@': 77}), 78: (1, {'@': 77}), 52: (1, {'@': 77}), 79: (1, {'@': 77}), 80: (1, {'@': 77}), 58: (1, {'@': 77}), 34: (1, {'@': 77}), 61: (1, {'@': 77}), 64: (1, {'@': 77}), 66: (1, {'@': 77}), 68: (1, {'@': 77}), 75: (1, {'@': 77}), 23: (1, {'@': 77})}, 403: {2: (1, {'@': 158}), 3: (1, {'@': 158}), 4: (1, {'@': 158}), 5: (1, {'@': 158}), 6: (1, {'@': 158}), 7: (1, {'@': 158}), 8: (1, {'@': 158}), 9: (1, {'@': 158}), 10: (1, {'@': 158}), 11: (1, {'@': 158}), 12: (1, {'@': 158}), 13: (1, {'@': 158}), 14: (1, {'@': 158}), 15: (1, {'@': 158}), 16: (1, {'@': 158}), 17: (1, {'@': 158}), 18: (1, {'@': 158}), 19: (1, {'@': 158}), 20: (1, {'@': 158}), 21: (1, {'@': 158}), 22: (1, {'@': 158}), 23: (1, {'@': 158}), 24: (1, {'@': 158}), 25: (1, {'@': 158}), 26: (1, {'@': 158}), 27: (1, {'@': 158}), 28: (1, {'@': 158}), 29: (1, {'@': 158}), 30: (1, {'@': 158})}, 404: {22: (0, 566), 2: (1, {'@': 145}), 3: (1, {'@': 145}), 5: (1, {'@': 145}), 11: (1, {'@': 145}), 20: (1, {'@': 145}), 21: (1, {'@': 145}), 24: (1, {'@': 145}), 28: (1, {'@': 145}), 30: (1, {'@': 145}), 7: (1, {'@': 145}), 8: (1, {'@': 145}), 9: (1, {'@': 145}), 12: (1, {'@': 145}), 13: (1, {'@': 145}), 14: (1, {'@': 145}), 16: (1, {'@': 145}), 17: (1, {'@': 145}), 18: (1, {'@': 145}), 23: (1, {'@': 145}), 26: (1, {'@': 145}), 29: (1, {'@': 145})}, 405: {79: (0, 110), 90: (0, 156), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 406: {11: (0, 609), 30: (0, 273), 18: (0, 2), 24: (0, 8), 12: (0, 202), 20: (0, 211), 2: (1, {'@': 136}), 3: (1, {'@': 136}), 5: (1, {'@': 136}), 21: (1, {'@': 136}), 8: (1, {'@': 136}), 9: (1, {'@': 136}), 23: (1, {'@': 136}), 13: (1, {'@': 136}), 14: (1, {'@': 136}), 26: (1, {'@': 136}), 16: (1, {'@': 136}), 17: (1, {'@': 136}), 28: (1, {'@': 136}), 29: (1, {'@': 136})}, 407: {21: (1, {'@': 199})}, 408: {3: (1, {'@': 208}), 5: (1, {'@': 208}), 21: (1, {'@': 208}), 8: (1, {'@': 208}), 31: (1, {'@': 208}), 23: (1, {'@': 208}), 13: (1, {'@': 208}), 26: (1, {'@': 208}), 16: (1, {'@': 208}), 17: (1, {'@': 208}), 29: (1, {'@': 208})}, 409: {29: (0, 488)}, 410: {33: (0, 388), 32: (0, 646), 31: (0, 555), 2: (1, {'@': 163}), 4: (1, {'@': 163}), 5: (1, {'@': 163}), 6: (1, {'@': 163}), 7: (1, {'@': 163}), 8: (1, {'@': 163}), 9: (1, {'@': 163}), 10: (1, {'@': 163}), 11: (1, {'@': 163}), 12: (1, {'@': 163}), 14: (1, {'@': 163}), 15: (1, {'@': 163}), 18: (1, {'@': 163}), 19: (1, {'@': 163}), 20: (1, {'@': 163}), 21: (1, {'@': 163}), 22: (1, {'@': 163}), 24: (1, {'@': 163}), 25: (1, {'@': 163}), 27: (1, {'@': 163}), 28: (1, {'@': 163}), 30: (1, {'@': 163}), 26: (1, {'@': 163})}, 411: {44: (1, {'@': 334}), 62: (1, {'@': 334}), 42: (1, {'@': 334}), 15: (1, {'@': 334}), 63: (1, {'@': 334}), 65: (1, {'@': 334}), 21: (1, {'@': 334}), 53: (1, {'@': 334}), 67: (1, {'@': 334}), 58: (1, {'@': 334}), 56: (1, {'@': 334}), 8: (1, {'@': 334}), 69: (1, {'@': 334}), 70: (1, {'@': 334}), 31: (1, {'@': 334}), 71: (1, {'@': 334}), 13: (1, {'@': 334}), 72: (1, {'@': 334}), 73: (1, {'@': 334}), 41: (1, {'@': 334}), 1: (1, {'@': 334}), 49: (1, {'@': 334}), 74: (1, {'@': 334}), 40: (1, {'@': 334}), 76: (1, {'@': 334}), 77: (1, {'@': 334}), 78: (1, {'@': 334}), 52: (1, {'@': 334}), 79: (1, {'@': 334}), 80: (1, {'@': 334}), 81: (1, {'@': 334}), 34: (1, {'@': 334}), 61: (1, {'@': 334}), 64: (1, {'@': 334}), 66: (1, {'@': 334}), 68: (1, {'@': 334}), 75: (1, {'@': 334}), 23: (1, {'@': 334})}, 412: {21: (0, 88), 56: (1, {'@': 88}), 44: (1, {'@': 88}), 62: (1, {'@': 88}), 8: (1, {'@': 88}), 69: (1, {'@': 88}), 70: (1, {'@': 88}), 31: (1, {'@': 88}), 42: (1, {'@': 88}), 71: (1, {'@': 88}), 13: (1, {'@': 88}), 15: (1, {'@': 88}), 72: (1, {'@': 88}), 73: (1, {'@': 88}), 41: (1, {'@': 88}), 1: (1, {'@': 88}), 63: (1, {'@': 88}), 49: (1, {'@': 88}), 74: (1, {'@': 88}), 65: (1, {'@': 88}), 40: (1, {'@': 88}), 81: (1, {'@': 88}), 76: (1, {'@': 88}), 53: (1, {'@': 88}), 77: (1, {'@': 88}), 67: (1, {'@': 88}), 78: (1, {'@': 88}), 52: (1, {'@': 88}), 79: (1, {'@': 88}), 80: (1, {'@': 88}), 58: (1, {'@': 88}), 34: (1, {'@': 88}), 61: (1, {'@': 88}), 64: (1, {'@': 88}), 66: (1, {'@': 88}), 68: (1, {'@': 88}), 75: (1, {'@': 88}), 23: (1, {'@': 88})}, 413: {3: (1, {'@': 213}), 5: (1, {'@': 213}), 21: (1, {'@': 213}), 8: (1, {'@': 213}), 31: (1, {'@': 213}), 23: (1, {'@': 213}), 13: (1, {'@': 213}), 26: (1, {'@': 213}), 16: (1, {'@': 213}), 17: (1, {'@': 213}), 29: (1, {'@': 213})}, 414: {8: (0, 462), 5: (0, 177), 3: (0, 657)}, 415: {44: (1, {'@': 336}), 62: (1, {'@': 336}), 42: (1, {'@': 336}), 15: (1, {'@': 336}), 63: (1, {'@': 336}), 65: (1, {'@': 336}), 21: (1, {'@': 336}), 53: (1, {'@': 336}), 67: (1, {'@': 336}), 58: (1, {'@': 336}), 56: (1, {'@': 336}), 8: (1, {'@': 336}), 69: (1, {'@': 336}), 70: (1, {'@': 336}), 31: (1, {'@': 336}), 71: (1, {'@': 336}), 13: (1, {'@': 336}), 72: (1, {'@': 336}), 73: (1, {'@': 336}), 41: (1, {'@': 336}), 1: (1, {'@': 336}), 49: (1, {'@': 336}), 74: (1, {'@': 336}), 40: (1, {'@': 336}), 76: (1, {'@': 336}), 77: (1, {'@': 336}), 78: (1, {'@': 336}), 52: (1, {'@': 336}), 79: (1, {'@': 336}), 80: (1, {'@': 336}), 81: (1, {'@': 336}), 34: (1, {'@': 336}), 61: (1, {'@': 336}), 64: (1, {'@': 336}), 66: (1, {'@': 336}), 68: (1, {'@': 336}), 75: (1, {'@': 336}), 23: (1, {'@': 336})}, 416: {79: (0, 110), 90: (0, 452), 38: (0, 253), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 92: (0, 251), 40: (0, 356), 42: (0, 444), 54: (0, 117), 41: (0, 490), 94: (0, 114), 93: (0, 426), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 417: {31: (0, 28)}, 418: {3: (0, 239), 17: (0, 240)}, 419: {21: (1, {'@': 117}), 3: (1, {'@': 117}), 5: (1, {'@': 117}), 8: (1, {'@': 117}), 13: (1, {'@': 117}), 16: (1, {'@': 117}), 17: (1, {'@': 117}), 23: (1, {'@': 117}), 26: (1, {'@': 117}), 29: (1, {'@': 117})}, 420: {79: (0, 110), 90: (0, 451), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 421: {61: (1, {'@': 424}), 44: (1, {'@': 424}), 62: (1, {'@': 424}), 42: (1, {'@': 424}), 15: (1, {'@': 424}), 63: (1, {'@': 424}), 64: (1, {'@': 424}), 65: (1, {'@': 424}), 21: (1, {'@': 424}), 53: (1, {'@': 424}), 66: (1, {'@': 424}), 67: (1, {'@': 424}), 58: (1, {'@': 424}), 68: (1, {'@': 424}), 56: (1, {'@': 424}), 8: (1, {'@': 424}), 69: (1, {'@': 424}), 70: (1, {'@': 424}), 31: (1, {'@': 424}), 71: (1, {'@': 424}), 13: (1, {'@': 424}), 72: (1, {'@': 424}), 73: (1, {'@': 424}), 41: (1, {'@': 424}), 1: (1, {'@': 424}), 49: (1, {'@': 424}), 74: (1, {'@': 424}), 75: (1, {'@': 424}), 40: (1, {'@': 424}), 76: (1, {'@': 424}), 77: (1, {'@': 424}), 23: (1, {'@': 424}), 78: (1, {'@': 424}), 52: (1, {'@': 424}), 79: (1, {'@': 424}), 80: (1, {'@': 424}), 81: (1, {'@': 424}), 34: (1, {'@': 424})}, 422: {44: (1, {'@': 74}), 62: (1, {'@': 74}), 42: (1, {'@': 74}), 15: (1, {'@': 74}), 63: (1, {'@': 74}), 65: (1, {'@': 74}), 53: (1, {'@': 74}), 67: (1, {'@': 74}), 58: (1, {'@': 74}), 56: (1, {'@': 74}), 8: (1, {'@': 74}), 69: (1, {'@': 74}), 70: (1, {'@': 74}), 31: (1, {'@': 74}), 71: (1, {'@': 74}), 13: (1, {'@': 74}), 72: (1, {'@': 74}), 73: (1, {'@': 74}), 41: (1, {'@': 74}), 1: (1, {'@': 74}), 49: (1, {'@': 74}), 74: (1, {'@': 74}), 40: (1, {'@': 74}), 76: (1, {'@': 74}), 77: (1, {'@': 74}), 78: (1, {'@': 74}), 52: (1, {'@': 74}), 79: (1, {'@': 74}), 80: (1, {'@': 74}), 81: (1, {'@': 74}), 34: (1, {'@': 74}), 23: (1, {'@': 74})}, 423: {34: (0, 400), 8: (0, 293), 144: (0, 16), 54: (0, 267), 43: (0, 15), 36: (0, 40), 31: (0, 597), 41: (0, 51), 57: (0, 553), 38: (0, 358), 1: (0, 572)}, 424: {17: (0, 450), 32: (0, 391)}, 425: {19: (0, 271), 2: (1, {'@': 155}), 3: (1, {'@': 155}), 4: (1, {'@': 155}), 5: (1, {'@': 155}), 6: (1, {'@': 155}), 7: (1, {'@': 155}), 8: (1, {'@': 155}), 9: (1, {'@': 155}), 10: (1, {'@': 155}), 11: (1, {'@': 155}), 12: (1, {'@': 155}), 13: (1, {'@': 155}), 14: (1, {'@': 155}), 15: (1, {'@': 155}), 16: (1, {'@': 155}), 17: (1, {'@': 155}), 18: (1, {'@': 155}), 20: (1, {'@': 155}), 21: (1, {'@': 155}), 22: (1, {'@': 155}), 23: (1, {'@': 155}), 24: (1, {'@': 155}), 25: (1, {'@': 155}), 26: (1, {'@': 155}), 27: (1, {'@': 155}), 28: (1, {'@': 155}), 29: (1, {'@': 155}), 30: (1, {'@': 155})}, 426: {2: (0, 382), 9: (0, 611), 3: (1, {'@': 129}), 5: (1, {'@': 129}), 21: (1, {'@': 129}), 8: (1, {'@': 129}), 23: (1, {'@': 129}), 13: (1, {'@': 129}), 14: (1, {'@': 129}), 26: (1, {'@': 129}), 16: (1, {'@': 129}), 17: (1, {'@': 129}), 28: (1, {'@': 129}), 29: (1, {'@': 129})}, 427: {2: (1, {'@': 170}), 3: (1, {'@': 170}), 4: (1, {'@': 170}), 5: (1, {'@': 170}), 6: (1, {'@': 170}), 7: (1, {'@': 170}), 8: (1, {'@': 170}), 9: (1, {'@': 170}), 10: (1, {'@': 170}), 11: (1, {'@': 170}), 12: (1, {'@': 170}), 13: (1, {'@': 170}), 14: (1, {'@': 170}), 15: (1, {'@': 170}), 16: (1, {'@': 170}), 17: (1, {'@': 170}), 18: (1, {'@': 170}), 19: (1, {'@': 170}), 20: (1, {'@': 170}), 21: (1, {'@': 170}), 22: (1, {'@': 170}), 23: (1, {'@': 170}), 24: (1, {'@': 170}), 25: (1, {'@': 170}), 26: (1, {'@': 170}), 27: (1, {'@': 170}), 28: (1, {'@': 170}), 29: (1, {'@': 170}), 30: (1, {'@': 170})}, 428: {79: (0, 110), 90: (0, 85), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 96: (0, 75), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 429: {1: (1, {'@': 398}), 17: (1, {'@': 398}), 42: (1, {'@': 398}), 21: (1, {'@': 398}), 29: (1, {'@': 398})}, 430: {42: (1, {'@': 373}), 17: (1, {'@': 373}), 21: (1, {'@': 373})}, 431: {41: (0, 448)}, 432: {82: (0, 475), 60: (0, 7), 41: (0, 380), 21: (0, 201), 23: (1, {'@': 388})}, 433: {79: (0, 110), 90: (0, 255), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 96: (0, 270), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 434: {17: (1, {'@': 112}), 21: (1, {'@': 112})}, 435: {79: (0, 110), 90: (0, 185), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 96: (0, 54), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 21: (1, {'@': 414})}, 436: {2: (1, {'@': 168}), 3: (1, {'@': 168}), 4: (1, {'@': 168}), 5: (1, {'@': 168}), 6: (1, {'@': 168}), 7: (1, {'@': 168}), 8: (1, {'@': 168}), 9: (1, {'@': 168}), 10: (1, {'@': 168}), 11: (1, {'@': 168}), 12: (1, {'@': 168}), 13: (1, {'@': 168}), 14: (1, {'@': 168}), 15: (1, {'@': 168}), 16: (1, {'@': 168}), 17: (1, {'@': 168}), 18: (1, {'@': 168}), 19: (1, {'@': 168}), 20: (1, {'@': 168}), 21: (1, {'@': 168}), 22: (1, {'@': 168}), 23: (1, {'@': 168}), 24: (1, {'@': 168}), 25: (1, {'@': 168}), 26: (1, {'@': 168}), 27: (1, {'@': 168}), 28: (1, {'@': 168}), 29: (1, {'@': 168}), 30: (1, {'@': 168})}, 437: {41: (0, 98)}, 438: {129: (0, 203), 1: (0, 647), 41: (0, 636), 131: (0, 206), 31: (0, 438), 34: (0, 531)}, 439: {19: (0, 271), 2: (1, {'@': 154}), 3: (1, {'@': 154}), 4: (1, {'@': 154}), 5: (1, {'@': 154}), 6: (1, {'@': 154}), 7: (1, {'@': 154}), 8: (1, {'@': 154}), 9: (1, {'@': 154}), 10: (1, {'@': 154}), 11: (1, {'@': 154}), 12: (1, {'@': 154}), 13: (1, {'@': 154}), 14: (1, {'@': 154}), 15: (1, {'@': 154}), 16: (1, {'@': 154}), 17: (1, {'@': 154}), 18: (1, {'@': 154}), 20: (1, {'@': 154}), 21: (1, {'@': 154}), 22: (1, {'@': 154}), 23: (1, {'@': 154}), 24: (1, {'@': 154}), 25: (1, {'@': 154}), 26: (1, {'@': 154}), 27: (1, {'@': 154}), 28: (1, {'@': 154}), 29: (1, {'@': 154}), 30: (1, {'@': 154})}, 440: {61: (1, {'@': 288}), 44: (1, {'@': 288}), 62: (1, {'@': 288}), 42: (1, {'@': 288}), 15: (1, {'@': 288}), 63: (1, {'@': 288}), 64: (1, {'@': 288}), 65: (1, {'@': 288}), 21: (1, {'@': 288}), 53: (1, {'@': 288}), 66: (1, {'@': 288}), 67: (1, {'@': 288}), 58: (1, {'@': 288}), 68: (1, {'@': 288}), 56: (1, {'@': 288}), 8: (1, {'@': 288}), 69: (1, {'@': 288}), 70: (1, {'@': 288}), 31: (1, {'@': 288}), 71: (1, {'@': 288}), 13: (1, {'@': 288}), 72: (1, {'@': 288}), 73: (1, {'@': 288}), 41: (1, {'@': 288}), 1: (1, {'@': 288}), 49: (1, {'@': 288}), 74: (1, {'@': 288}), 75: (1, {'@': 288}), 40: (1, {'@': 288}), 76: (1, {'@': 288}), 77: (1, {'@': 288}), 23: (1, {'@': 288}), 78: (1, {'@': 288}), 52: (1, {'@': 288}), 79: (1, {'@': 288}), 80: (1, {'@': 288}), 81: (1, {'@': 288}), 34: (1, {'@': 288})}, 441: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 118}), 3: (1, {'@': 118}), 13: (1, {'@': 118}), 16: (1, {'@': 118}), 17: (1, {'@': 118}), 23: (1, {'@': 118}), 26: (1, {'@': 118}), 29: (1, {'@': 118})}, 442: {31: (0, 496)}, 443: {8: (0, 462), 29: (0, 376), 5: (0, 177)}, 444: {79: (0, 110), 90: (0, 147), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 133: (0, 167), 39: (0, 655), 49: (0, 596), 96: (0, 252), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 17: (0, 30), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 445: {31: (0, 482)}, 446: {145: (0, 523), 41: (0, 378)}, 447: {2: (1, {'@': 171}), 3: (1, {'@': 171}), 4: (1, {'@': 171}), 5: (1, {'@': 171}), 6: (1, {'@': 171}), 7: (1, {'@': 171}), 8: (1, {'@': 171}), 9: (1, {'@': 171}), 10: (1, {'@': 171}), 11: (1, {'@': 171}), 12: (1, {'@': 171}), 13: (1, {'@': 171}), 14: (1, {'@': 171}), 15: (1, {'@': 171}), 16: (1, {'@': 171}), 17: (1, {'@': 171}), 18: (1, {'@': 171}), 19: (1, {'@': 171}), 20: (1, {'@': 171}), 21: (1, {'@': 171}), 22: (1, {'@': 171}), 23: (1, {'@': 171}), 24: (1, {'@': 171}), 25: (1, {'@': 171}), 26: (1, {'@': 171}), 27: (1, {'@': 171}), 28: (1, {'@': 171}), 29: (1, {'@': 171}), 30: (1, {'@': 171})}, 448: {60: (0, 86), 42: (0, 199), 21: (0, 201)}, 449: {41: (0, 222)}, 450: {34: (0, 400), 36: (0, 40), 31: (0, 597), 54: (0, 643), 41: (0, 51), 57: (0, 553), 38: (0, 358), 1: (0, 572)}, 451: {8: (0, 462), 5: (0, 177), 29: (0, 547)}, 452: {8: (0, 462), 5: (0, 177), 29: (0, 49)}, 453: {19: (0, 271), 2: (1, {'@': 156}), 3: (1, {'@': 156}), 4: (1, {'@': 156}), 5: (1, {'@': 156}), 6: (1, {'@': 156}), 7: (1, {'@': 156}), 8: (1, {'@': 156}), 9: (1, {'@': 156}), 10: (1, {'@': 156}), 11: (1, {'@': 156}), 12: (1, {'@': 156}), 13: (1, {'@': 156}), 14: (1, {'@': 156}), 15: (1, {'@': 156}), 16: (1, {'@': 156}), 17: (1, {'@': 156}), 18: (1, {'@': 156}), 20: (1, {'@': 156}), 21: (1, {'@': 156}), 22: (1, {'@': 156}), 23: (1, {'@': 156}), 24: (1, {'@': 156}), 25: (1, {'@': 156}), 26: (1, {'@': 156}), 27: (1, {'@': 156}), 28: (1, {'@': 156}), 29: (1, {'@': 156}), 30: (1, {'@': 156})}, 454: {21: (0, 201), 60: (0, 107)}, 455: {29: (0, 304)}, 456: {79: (0, 110), 90: (0, 81), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 457: {8: (0, 462), 5: (0, 177), 29: (0, 545)}, 458: {79: (0, 110), 90: (0, 308), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 96: (0, 630), 134: (0, 307), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 3: (1, {'@': 185})}, 459: {44: (1, {'@': 370}), 62: (1, {'@': 370}), 42: (1, {'@': 370}), 15: (1, {'@': 370}), 63: (1, {'@': 370}), 65: (1, {'@': 370}), 21: (1, {'@': 370}), 53: (1, {'@': 370}), 67: (1, {'@': 370}), 58: (1, {'@': 370}), 56: (1, {'@': 370}), 8: (1, {'@': 370}), 69: (1, {'@': 370}), 70: (1, {'@': 370}), 31: (1, {'@': 370}), 71: (1, {'@': 370}), 13: (1, {'@': 370}), 72: (1, {'@': 370}), 73: (1, {'@': 370}), 41: (1, {'@': 370}), 1: (1, {'@': 370}), 49: (1, {'@': 370}), 74: (1, {'@': 370}), 40: (1, {'@': 370}), 76: (1, {'@': 370}), 77: (1, {'@': 370}), 78: (1, {'@': 370}), 52: (1, {'@': 370}), 79: (1, {'@': 370}), 80: (1, {'@': 370}), 81: (1, {'@': 370}), 34: (1, {'@': 370}), 61: (1, {'@': 370}), 64: (1, {'@': 370}), 66: (1, {'@': 370}), 68: (1, {'@': 370}), 75: (1, {'@': 370}), 23: (1, {'@': 370})}, 460: {44: (1, {'@': 275}), 62: (1, {'@': 275}), 42: (1, {'@': 275}), 15: (1, {'@': 275}), 63: (1, {'@': 275}), 65: (1, {'@': 275}), 21: (1, {'@': 275}), 53: (1, {'@': 275}), 67: (1, {'@': 275}), 58: (1, {'@': 275}), 56: (1, {'@': 275}), 8: (1, {'@': 275}), 69: (1, {'@': 275}), 70: (1, {'@': 275}), 31: (1, {'@': 275}), 71: (1, {'@': 275}), 13: (1, {'@': 275}), 72: (1, {'@': 275}), 73: (1, {'@': 275}), 41: (1, {'@': 275}), 1: (1, {'@': 275}), 49: (1, {'@': 275}), 74: (1, {'@': 275}), 40: (1, {'@': 275}), 76: (1, {'@': 275}), 77: (1, {'@': 275}), 78: (1, {'@': 275}), 52: (1, {'@': 275}), 79: (1, {'@': 275}), 80: (1, {'@': 275}), 81: (1, {'@': 275}), 34: (1, {'@': 275}), 61: (1, {'@': 275}), 64: (1, {'@': 275}), 66: (1, {'@': 275}), 68: (1, {'@': 275}), 75: (1, {'@': 275}), 23: (1, {'@': 275})}, 461: {68: (0, 57), 75: (0, 56), 83: (0, 421), 84: (0, 19), 44: (1, {'@': 327}), 62: (1, {'@': 327}), 42: (1, {'@': 327}), 15: (1, {'@': 327}), 63: (1, {'@': 327}), 65: (1, {'@': 327}), 21: (1, {'@': 327}), 53: (1, {'@': 327}), 67: (1, {'@': 327}), 58: (1, {'@': 327}), 56: (1, {'@': 327}), 8: (1, {'@': 327}), 69: (1, {'@': 327}), 70: (1, {'@': 327}), 31: (1, {'@': 327}), 71: (1, {'@': 327}), 13: (1, {'@': 327}), 72: (1, {'@': 327}), 73: (1, {'@': 327}), 41: (1, {'@': 327}), 1: (1, {'@': 327}), 49: (1, {'@': 327}), 74: (1, {'@': 327}), 40: (1, {'@': 327}), 76: (1, {'@': 327}), 77: (1, {'@': 327}), 78: (1, {'@': 327}), 52: (1, {'@': 327}), 79: (1, {'@': 327}), 80: (1, {'@': 327}), 81: (1, {'@': 327}), 34: (1, {'@': 327}), 61: (1, {'@': 327}), 64: (1, {'@': 327}), 66: (1, {'@': 327}), 23: (1, {'@': 327})}, 462: {79: (0, 110), 90: (0, 38), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 26: (0, 130), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 463: {21: (0, 201), 60: (0, 297), 61: (1, {'@': 359}), 44: (1, {'@': 359}), 62: (1, {'@': 359}), 42: (1, {'@': 359}), 15: (1, {'@': 359}), 63: (1, {'@': 359}), 64: (1, {'@': 359}), 65: (1, {'@': 359}), 53: (1, {'@': 359}), 66: (1, {'@': 359}), 67: (1, {'@': 359}), 58: (1, {'@': 359}), 68: (1, {'@': 359}), 56: (1, {'@': 359}), 8: (1, {'@': 359}), 69: (1, {'@': 359}), 70: (1, {'@': 359}), 31: (1, {'@': 359}), 71: (1, {'@': 359}), 13: (1, {'@': 359}), 72: (1, {'@': 359}), 73: (1, {'@': 359}), 41: (1, {'@': 359}), 1: (1, {'@': 359}), 49: (1, {'@': 359}), 74: (1, {'@': 359}), 75: (1, {'@': 359}), 40: (1, {'@': 359}), 76: (1, {'@': 359}), 77: (1, {'@': 359}), 23: (1, {'@': 359}), 78: (1, {'@': 359}), 52: (1, {'@': 359}), 79: (1, {'@': 359}), 80: (1, {'@': 359}), 81: (1, {'@': 359}), 34: (1, {'@': 359})}, 464: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 39: (0, 111), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 465: {60: (0, 116), 21: (0, 201), 61: (1, {'@': 100}), 44: (1, {'@': 100}), 62: (1, {'@': 100}), 42: (1, {'@': 100}), 15: (1, {'@': 100}), 63: (1, {'@': 100}), 65: (1, {'@': 100}), 53: (1, {'@': 100}), 58: (1, {'@': 100}), 56: (1, {'@': 100}), 8: (1, {'@': 100}), 69: (1, {'@': 100}), 70: (1, {'@': 100}), 31: (1, {'@': 100}), 71: (1, {'@': 100}), 13: (1, {'@': 100}), 72: (1, {'@': 100}), 73: (1, {'@': 100}), 41: (1, {'@': 100}), 1: (1, {'@': 100}), 49: (1, {'@': 100}), 74: (1, {'@': 100}), 40: (1, {'@': 100}), 76: (1, {'@': 100}), 77: (1, {'@': 100}), 23: (1, {'@': 100}), 78: (1, {'@': 100}), 52: (1, {'@': 100}), 79: (1, {'@': 100}), 80: (1, {'@': 100}), 81: (1, {'@': 100}), 34: (1, {'@': 100})}, 466: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 41: (0, 490), 40: (0, 356), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 59: (0, 33), 49: (0, 596), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561)}, 467: {68: (0, 57), 128: (0, 142), 83: (0, 372), 21: (0, 88)}, 468: {79: (0, 110), 90: (0, 34), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 96: (0, 53), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 469: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 21: (0, 201), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 123: (0, 510), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 511), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 116: (0, 536), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 470: {2: (1, {'@': 175}), 3: (1, {'@': 175}), 4: (1, {'@': 175}), 5: (1, {'@': 175}), 6: (1, {'@': 175}), 7: (1, {'@': 175}), 8: (1, {'@': 175}), 9: (1, {'@': 175}), 10: (1, {'@': 175}), 11: (1, {'@': 175}), 12: (1, {'@': 175}), 13: (1, {'@': 175}), 14: (1, {'@': 175}), 15: (1, {'@': 175}), 16: (1, {'@': 175}), 17: (1, {'@': 175}), 18: (1, {'@': 175}), 19: (1, {'@': 175}), 20: (1, {'@': 175}), 21: (1, {'@': 175}), 22: (1, {'@': 175}), 23: (1, {'@': 175}), 24: (1, {'@': 175}), 25: (1, {'@': 175}), 26: (1, {'@': 175}), 27: (1, {'@': 175}), 28: (1, {'@': 175}), 29: (1, {'@': 175}), 30: (1, {'@': 175})}, 471: {79: (0, 110), 90: (0, 383), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 472: {17: (1, {'@': 255}), 29: (1, {'@': 255})}, 473: {44: (1, {'@': 277}), 62: (1, {'@': 277}), 42: (1, {'@': 277}), 15: (1, {'@': 277}), 63: (1, {'@': 277}), 65: (1, {'@': 277}), 21: (1, {'@': 277}), 53: (1, {'@': 277}), 67: (1, {'@': 277}), 58: (1, {'@': 277}), 56: (1, {'@': 277}), 8: (1, {'@': 277}), 69: (1, {'@': 277}), 70: (1, {'@': 277}), 31: (1, {'@': 277}), 71: (1, {'@': 277}), 13: (1, {'@': 277}), 72: (1, {'@': 277}), 73: (1, {'@': 277}), 41: (1, {'@': 277}), 1: (1, {'@': 277}), 49: (1, {'@': 277}), 74: (1, {'@': 277}), 40: (1, {'@': 277}), 76: (1, {'@': 277}), 77: (1, {'@': 277}), 78: (1, {'@': 277}), 52: (1, {'@': 277}), 79: (1, {'@': 277}), 80: (1, {'@': 277}), 81: (1, {'@': 277}), 34: (1, {'@': 277}), 61: (1, {'@': 277}), 64: (1, {'@': 277}), 66: (1, {'@': 277}), 68: (1, {'@': 277}), 75: (1, {'@': 277}), 23: (1, {'@': 277})}, 474: {21: (1, {'@': 203})}, 475: {21: (0, 201), 23: (0, 256), 60: (0, 315)}, 476: {138: (0, 245), 66: (0, 595), 135: (0, 574), 136: (0, 527), 137: (0, 440), 21: (0, 88), 64: (0, 363), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 477: {68: (0, 57), 83: (0, 372), 21: (0, 88), 128: (0, 11)}, 478: {44: (1, {'@': 313}), 62: (1, {'@': 313}), 42: (1, {'@': 313}), 15: (1, {'@': 313}), 63: (1, {'@': 313}), 65: (1, {'@': 313}), 21: (1, {'@': 313}), 53: (1, {'@': 313}), 67: (1, {'@': 313}), 58: (1, {'@': 313}), 56: (1, {'@': 313}), 8: (1, {'@': 313}), 69: (1, {'@': 313}), 70: (1, {'@': 313}), 31: (1, {'@': 313}), 71: (1, {'@': 313}), 13: (1, {'@': 313}), 72: (1, {'@': 313}), 73: (1, {'@': 313}), 41: (1, {'@': 313}), 1: (1, {'@': 313}), 49: (1, {'@': 313}), 74: (1, {'@': 313}), 40: (1, {'@': 313}), 76: (1, {'@': 313}), 77: (1, {'@': 313}), 78: (1, {'@': 313}), 52: (1, {'@': 313}), 79: (1, {'@': 313}), 80: (1, {'@': 313}), 81: (1, {'@': 313}), 34: (1, {'@': 313}), 61: (1, {'@': 313}), 64: (1, {'@': 313}), 66: (1, {'@': 313}), 68: (1, {'@': 313}), 75: (1, {'@': 313}), 23: (1, {'@': 313})}, 479: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 192}), 23: (1, {'@': 192})}, 480: {31: (0, 229)}, 481: {21: (0, 201), 60: (0, 82)}, 482: {79: (0, 110), 90: (0, 443), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 483: {86: (0, 29), 87: (0, 198), 41: (0, 1), 88: (0, 120), 89: (0, 135), 27: (0, 173), 85: (0, 556), 29: (1, {'@': 243})}, 484: {79: (0, 110), 90: (0, 479), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 96: (0, 541), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 485: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 39: (0, 246), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 486: {3: (1, {'@': 211}), 5: (1, {'@': 211}), 21: (1, {'@': 211}), 8: (1, {'@': 211}), 31: (1, {'@': 211}), 23: (1, {'@': 211}), 13: (1, {'@': 211}), 26: (1, {'@': 211}), 16: (1, {'@': 211}), 17: (1, {'@': 211}), 29: (1, {'@': 211})}, 487: {60: (0, 221), 21: (0, 201)}, 488: {3: (1, {'@': 262}), 5: (1, {'@': 262}), 21: (1, {'@': 262}), 8: (1, {'@': 262}), 31: (1, {'@': 262}), 23: (1, {'@': 262}), 13: (1, {'@': 262}), 26: (1, {'@': 262}), 16: (1, {'@': 262}), 17: (1, {'@': 262}), 29: (1, {'@': 262})}, 489: {3: (1, {'@': 219}), 5: (1, {'@': 219}), 21: (1, {'@': 219}), 8: (1, {'@': 219}), 31: (1, {'@': 219}), 23: (1, {'@': 219}), 13: (1, {'@': 219}), 26: (1, {'@': 219}), 16: (1, {'@': 219}), 17: (1, {'@': 219}), 29: (1, {'@': 219})}, 490: {146: (0, 113), 147: (0, 74), 2: (1, {'@': 409}), 3: (1, {'@': 409}), 4: (1, {'@': 409}), 5: (1, {'@': 409}), 6: (1, {'@': 409}), 7: (1, {'@': 409}), 8: (1, {'@': 409}), 9: (1, {'@': 409}), 10: (1, {'@': 409}), 11: (1, {'@': 409}), 12: (1, {'@': 409}), 13: (1, {'@': 409}), 14: (1, {'@': 409}), 15: (1, {'@': 409}), 16: (1, {'@': 409}), 0: (1, {'@': 409}), 1: (1, {'@': 409}), 17: (1, {'@': 409}), 18: (1, {'@': 409}), 19: (1, {'@': 409}), 20: (1, {'@': 409}), 21: (1, {'@': 409}), 22: (1, {'@': 409}), 23: (1, {'@': 409}), 24: (1, {'@': 409}), 25: (1, {'@': 409}), 26: (1, {'@': 409}), 27: (1, {'@': 409}), 28: (1, {'@': 409}), 29: (1, {'@': 409}), 30: (1, {'@': 409}), 31: (1, {'@': 409}), 32: (1, {'@': 409}), 33: (1, {'@': 409})}, 491: {2: (1, {'@': 410}), 3: (1, {'@': 410}), 4: (1, {'@': 410}), 5: (1, {'@': 410}), 6: (1, {'@': 410}), 7: (1, {'@': 410}), 8: (1, {'@': 410}), 9: (1, {'@': 410}), 10: (1, {'@': 410}), 11: (1, {'@': 410}), 12: (1, {'@': 410}), 13: (1, {'@': 410}), 14: (1, {'@': 410}), 15: (1, {'@': 410}), 16: (1, {'@': 410}), 0: (1, {'@': 410}), 1: (1, {'@': 410}), 17: (1, {'@': 410}), 18: (1, {'@': 410}), 19: (1, {'@': 410}), 20: (1, {'@': 410}), 21: (1, {'@': 410}), 22: (1, {'@': 410}), 23: (1, {'@': 410}), 24: (1, {'@': 410}), 25: (1, {'@': 410}), 26: (1, {'@': 410}), 27: (1, {'@': 410}), 28: (1, {'@': 410}), 29: (1, {'@': 410}), 30: (1, {'@': 410}), 31: (1, {'@': 410}), 32: (1, {'@': 410}), 33: (1, {'@': 410})}, 492: {2: (1, {'@': 157}), 3: (1, {'@': 157}), 4: (1, {'@': 157}), 5: (1, {'@': 157}), 6: (1, {'@': 157}), 7: (1, {'@': 157}), 8: (1, {'@': 157}), 9: (1, {'@': 157}), 10: (1, {'@': 157}), 11: (1, {'@': 157}), 12: (1, {'@': 157}), 13: (1, {'@': 157}), 14: (1, {'@': 157}), 15: (1, {'@': 157}), 16: (1, {'@': 157}), 17: (1, {'@': 157}), 18: (1, {'@': 157}), 19: (1, {'@': 157}), 20: (1, {'@': 157}), 21: (1, {'@': 157}), 22: (1, {'@': 157}), 23: (1, {'@': 157}), 24: (1, {'@': 157}), 25: (1, {'@': 157}), 26: (1, {'@': 157}), 27: (1, {'@': 157}), 28: (1, {'@': 157}), 29: (1, {'@': 157}), 30: (1, {'@': 157})}, 493: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 116: (0, 97), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427), 67: (1, {'@': 72})}, 494: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 190}), 23: (1, {'@': 190})}, 495: {1: (0, 437), 29: (0, 63), 0: (0, 631)}, 496: {79: (0, 110), 90: (0, 522), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 497: {44: (1, {'@': 120}), 62: (1, {'@': 120}), 42: (1, {'@': 120}), 15: (1, {'@': 120}), 63: (1, {'@': 120}), 65: (1, {'@': 120}), 21: (1, {'@': 120}), 53: (1, {'@': 120}), 67: (1, {'@': 120}), 58: (1, {'@': 120}), 56: (1, {'@': 120}), 8: (1, {'@': 120}), 69: (1, {'@': 120}), 70: (1, {'@': 120}), 31: (1, {'@': 120}), 71: (1, {'@': 120}), 13: (1, {'@': 120}), 72: (1, {'@': 120}), 73: (1, {'@': 120}), 41: (1, {'@': 120}), 1: (1, {'@': 120}), 49: (1, {'@': 120}), 74: (1, {'@': 120}), 40: (1, {'@': 120}), 76: (1, {'@': 120}), 77: (1, {'@': 120}), 78: (1, {'@': 120}), 52: (1, {'@': 120}), 79: (1, {'@': 120}), 80: (1, {'@': 120}), 81: (1, {'@': 120}), 34: (1, {'@': 120}), 61: (1, {'@': 120}), 64: (1, {'@': 120}), 66: (1, {'@': 120}), 68: (1, {'@': 120}), 75: (1, {'@': 120}), 23: (1, {'@': 120})}, 498: {60: (0, 46), 21: (0, 201)}, 499: {8: (0, 462), 5: (0, 177), 17: (0, 192), 26: (0, 76), 13: (0, 43), 16: (0, 471), 3: (1, {'@': 183})}, 500: {21: (0, 88), 44: (1, {'@': 75}), 62: (1, {'@': 75}), 42: (1, {'@': 75}), 15: (1, {'@': 75}), 63: (1, {'@': 75}), 65: (1, {'@': 75}), 53: (1, {'@': 75}), 67: (1, {'@': 75}), 58: (1, {'@': 75}), 56: (1, {'@': 75}), 8: (1, {'@': 75}), 69: (1, {'@': 75}), 70: (1, {'@': 75}), 31: (1, {'@': 75}), 71: (1, {'@': 75}), 13: (1, {'@': 75}), 72: (1, {'@': 75}), 73: (1, {'@': 75}), 41: (1, {'@': 75}), 1: (1, {'@': 75}), 49: (1, {'@': 75}), 74: (1, {'@': 75}), 40: (1, {'@': 75}), 76: (1, {'@': 75}), 77: (1, {'@': 75}), 78: (1, {'@': 75}), 52: (1, {'@': 75}), 79: (1, {'@': 75}), 80: (1, {'@': 75}), 81: (1, {'@': 75}), 34: (1, {'@': 75})}, 501: {21: (1, {'@': 200})}, 502: {21: (1, {'@': 384}), 23: (1, {'@': 384}), 17: (1, {'@': 384})}, 503: {}, 504: {10: (0, 485), 15: (0, 464), 2: (1, {'@': 148}), 3: (1, {'@': 148}), 5: (1, {'@': 148}), 7: (1, {'@': 148}), 8: (1, {'@': 148}), 9: (1, {'@': 148}), 11: (1, {'@': 148}), 12: (1, {'@': 148}), 13: (1, {'@': 148}), 14: (1, {'@': 148}), 16: (1, {'@': 148}), 17: (1, {'@': 148}), 18: (1, {'@': 148}), 20: (1, {'@': 148}), 21: (1, {'@': 148}), 22: (1, {'@': 148}), 23: (1, {'@': 148}), 24: (1, {'@': 148}), 26: (1, {'@': 148}), 28: (1, {'@': 148}), 29: (1, {'@': 148}), 30: (1, {'@': 148})}, 505: {21: (1, {'@': 110})}, 506: {41: (0, 194)}, 507: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 198})}, 508: {23: (0, 231), 21: (0, 88)}, 509: {2: (1, {'@': 161}), 3: (1, {'@': 161}), 4: (1, {'@': 161}), 5: (1, {'@': 161}), 6: (1, {'@': 161}), 7: (1, {'@': 161}), 8: (1, {'@': 161}), 9: (1, {'@': 161}), 10: (1, {'@': 161}), 11: (1, {'@': 161}), 12: (1, {'@': 161}), 13: (1, {'@': 161}), 14: (1, {'@': 161}), 15: (1, {'@': 161}), 16: (1, {'@': 161}), 17: (1, {'@': 161}), 18: (1, {'@': 161}), 19: (1, {'@': 161}), 20: (1, {'@': 161}), 21: (1, {'@': 161}), 22: (1, {'@': 161}), 23: (1, {'@': 161}), 24: (1, {'@': 161}), 25: (1, {'@': 161}), 26: (1, {'@': 161}), 27: (1, {'@': 161}), 28: (1, {'@': 161}), 29: (1, {'@': 161}), 30: (1, {'@': 161})}, 510: {21: (0, 201), 74: (0, 244), 60: (0, 227)}, 511: {79: (0, 110), 101: (0, 17), 80: (0, 70), 123: (0, 129), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 116: (0, 118), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 512: {44: (1, {'@': 276}), 62: (1, {'@': 276}), 42: (1, {'@': 276}), 15: (1, {'@': 276}), 63: (1, {'@': 276}), 65: (1, {'@': 276}), 21: (1, {'@': 276}), 53: (1, {'@': 276}), 67: (1, {'@': 276}), 58: (1, {'@': 276}), 56: (1, {'@': 276}), 8: (1, {'@': 276}), 69: (1, {'@': 276}), 70: (1, {'@': 276}), 31: (1, {'@': 276}), 71: (1, {'@': 276}), 13: (1, {'@': 276}), 72: (1, {'@': 276}), 73: (1, {'@': 276}), 41: (1, {'@': 276}), 1: (1, {'@': 276}), 49: (1, {'@': 276}), 74: (1, {'@': 276}), 40: (1, {'@': 276}), 76: (1, {'@': 276}), 77: (1, {'@': 276}), 78: (1, {'@': 276}), 52: (1, {'@': 276}), 79: (1, {'@': 276}), 80: (1, {'@': 276}), 81: (1, {'@': 276}), 34: (1, {'@': 276}), 61: (1, {'@': 276}), 64: (1, {'@': 276}), 66: (1, {'@': 276}), 68: (1, {'@': 276}), 75: (1, {'@': 276}), 23: (1, {'@': 276})}, 513: {79: (0, 110), 80: (0, 70), 110: (0, 529), 36: (0, 40), 70: (0, 92), 91: (0, 144), 115: (0, 567), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 61: (0, 601), 90: (0, 441), 72: (0, 469), 148: (0, 559), 74: (0, 480), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 620), 45: (0, 525), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 95: (0, 579), 106: (0, 549), 99: (0, 598), 107: (0, 592), 8: (0, 600), 100: (0, 627), 109: (0, 424), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 149: (0, 233), 101: (0, 454), 55: (0, 509), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 62: (0, 487), 96: (0, 639), 69: (0, 435), 94: (0, 408), 44: (0, 436), 105: (0, 465), 108: (0, 287), 23: (0, 200), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 122: (0, 276), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 113: (0, 325), 15: (0, 466), 71: (0, 405), 56: (0, 427)}, 514: {44: (1, {'@': 121}), 62: (1, {'@': 121}), 42: (1, {'@': 121}), 15: (1, {'@': 121}), 63: (1, {'@': 121}), 65: (1, {'@': 121}), 21: (1, {'@': 121}), 53: (1, {'@': 121}), 67: (1, {'@': 121}), 58: (1, {'@': 121}), 56: (1, {'@': 121}), 8: (1, {'@': 121}), 69: (1, {'@': 121}), 70: (1, {'@': 121}), 31: (1, {'@': 121}), 71: (1, {'@': 121}), 13: (1, {'@': 121}), 72: (1, {'@': 121}), 73: (1, {'@': 121}), 41: (1, {'@': 121}), 1: (1, {'@': 121}), 49: (1, {'@': 121}), 74: (1, {'@': 121}), 40: (1, {'@': 121}), 76: (1, {'@': 121}), 77: (1, {'@': 121}), 78: (1, {'@': 121}), 52: (1, {'@': 121}), 79: (1, {'@': 121}), 80: (1, {'@': 121}), 81: (1, {'@': 121}), 34: (1, {'@': 121}), 61: (1, {'@': 121}), 64: (1, {'@': 121}), 66: (1, {'@': 121}), 68: (1, {'@': 121}), 75: (1, {'@': 121}), 23: (1, {'@': 121})}, 515: {17: (1, {'@': 191}), 23: (1, {'@': 191})}, 516: {21: (0, 201), 60: (0, 164), 56: (1, {'@': 83}), 44: (1, {'@': 83}), 62: (1, {'@': 83}), 8: (1, {'@': 83}), 69: (1, {'@': 83}), 70: (1, {'@': 83}), 31: (1, {'@': 83}), 42: (1, {'@': 83}), 71: (1, {'@': 83}), 13: (1, {'@': 83}), 15: (1, {'@': 83}), 72: (1, {'@': 83}), 73: (1, {'@': 83}), 41: (1, {'@': 83}), 1: (1, {'@': 83}), 63: (1, {'@': 83}), 49: (1, {'@': 83}), 74: (1, {'@': 83}), 65: (1, {'@': 83}), 40: (1, {'@': 83}), 81: (1, {'@': 83}), 76: (1, {'@': 83}), 53: (1, {'@': 83}), 77: (1, {'@': 83}), 67: (1, {'@': 83}), 78: (1, {'@': 83}), 52: (1, {'@': 83}), 79: (1, {'@': 83}), 80: (1, {'@': 83}), 58: (1, {'@': 83}), 34: (1, {'@': 83}), 61: (1, {'@': 83}), 64: (1, {'@': 83}), 66: (1, {'@': 83}), 68: (1, {'@': 83}), 75: (1, {'@': 83}), 23: (1, {'@': 83})}, 517: {66: (0, 595), 135: (0, 574), 136: (0, 527), 137: (0, 440), 138: (0, 618), 21: (0, 88), 64: (0, 363), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 518: {3: (0, 80), 17: (0, 240)}, 519: {44: (1, {'@': 378}), 62: (1, {'@': 378}), 42: (1, {'@': 378}), 15: (1, {'@': 378}), 63: (1, {'@': 378}), 65: (1, {'@': 378}), 21: (1, {'@': 378}), 53: (1, {'@': 378}), 67: (1, {'@': 378}), 58: (1, {'@': 378}), 56: (1, {'@': 378}), 8: (1, {'@': 378}), 69: (1, {'@': 378}), 70: (1, {'@': 378}), 31: (1, {'@': 378}), 71: (1, {'@': 378}), 13: (1, {'@': 378}), 72: (1, {'@': 378}), 73: (1, {'@': 378}), 41: (1, {'@': 378}), 1: (1, {'@': 378}), 49: (1, {'@': 378}), 74: (1, {'@': 378}), 40: (1, {'@': 378}), 76: (1, {'@': 378}), 77: (1, {'@': 378}), 78: (1, {'@': 378}), 52: (1, {'@': 378}), 79: (1, {'@': 378}), 80: (1, {'@': 378}), 81: (1, {'@': 378}), 34: (1, {'@': 378}), 61: (1, {'@': 378}), 64: (1, {'@': 378}), 66: (1, {'@': 378}), 68: (1, {'@': 378}), 75: (1, {'@': 378}), 23: (1, {'@': 378})}, 520: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 272}), 29: (1, {'@': 272})}, 521: {19: (0, 271), 2: (1, {'@': 152}), 3: (1, {'@': 152}), 4: (1, {'@': 152}), 5: (1, {'@': 152}), 6: (1, {'@': 152}), 7: (1, {'@': 152}), 8: (1, {'@': 152}), 9: (1, {'@': 152}), 10: (1, {'@': 152}), 11: (1, {'@': 152}), 12: (1, {'@': 152}), 13: (1, {'@': 152}), 14: (1, {'@': 152}), 15: (1, {'@': 152}), 16: (1, {'@': 152}), 17: (1, {'@': 152}), 18: (1, {'@': 152}), 20: (1, {'@': 152}), 21: (1, {'@': 152}), 22: (1, {'@': 152}), 23: (1, {'@': 152}), 24: (1, {'@': 152}), 25: (1, {'@': 152}), 26: (1, {'@': 152}), 27: (1, {'@': 152}), 28: (1, {'@': 152}), 29: (1, {'@': 152}), 30: (1, {'@': 152})}, 522: {8: (0, 462), 5: (0, 177), 29: (0, 638)}, 523: {26: (0, 394), 17: (0, 352)}, 524: {8: (0, 462), 5: (0, 177), 26: (0, 373)}, 525: {7: (0, 44), 2: (1, {'@': 138}), 3: (1, {'@': 138}), 5: (1, {'@': 138}), 8: (1, {'@': 138}), 9: (1, {'@': 138}), 11: (1, {'@': 138}), 12: (1, {'@': 138}), 13: (1, {'@': 138}), 14: (1, {'@': 138}), 16: (1, {'@': 138}), 17: (1, {'@': 138}), 18: (1, {'@': 138}), 20: (1, {'@': 138}), 21: (1, {'@': 138}), 23: (1, {'@': 138}), 24: (1, {'@': 138}), 26: (1, {'@': 138}), 28: (1, {'@': 138}), 29: (1, {'@': 138}), 30: (1, {'@': 138})}, 526: {42: (1, {'@': 372}), 17: (1, {'@': 372}), 21: (1, {'@': 372})}, 527: {66: (1, {'@': 421}), 21: (1, {'@': 421}), 64: (1, {'@': 421})}, 528: {21: (0, 201), 60: (0, 402)}, 529: {60: (0, 182), 21: (0, 201), 61: (1, {'@': 106}), 44: (1, {'@': 106}), 62: (1, {'@': 106}), 42: (1, {'@': 106}), 15: (1, {'@': 106}), 63: (1, {'@': 106}), 65: (1, {'@': 106}), 53: (1, {'@': 106}), 58: (1, {'@': 106}), 56: (1, {'@': 106}), 8: (1, {'@': 106}), 69: (1, {'@': 106}), 70: (1, {'@': 106}), 31: (1, {'@': 106}), 71: (1, {'@': 106}), 13: (1, {'@': 106}), 72: (1, {'@': 106}), 73: (1, {'@': 106}), 41: (1, {'@': 106}), 1: (1, {'@': 106}), 49: (1, {'@': 106}), 74: (1, {'@': 106}), 40: (1, {'@': 106}), 76: (1, {'@': 106}), 77: (1, {'@': 106}), 23: (1, {'@': 106}), 78: (1, {'@': 106}), 52: (1, {'@': 106}), 79: (1, {'@': 106}), 80: (1, {'@': 106}), 81: (1, {'@': 106}), 34: (1, {'@': 106})}, 530: {21: (0, 201), 60: (0, 204)}, 531: {129: (0, 183), 31: (0, 157), 41: (0, 636)}, 532: {42: (1, {'@': 394}), 17: (1, {'@': 394}), 21: (1, {'@': 394}), 29: (1, {'@': 394})}, 533: {27: (0, 173), 41: (0, 26), 88: (0, 25), 89: (0, 22)}, 534: {2: (1, {'@': 162}), 3: (1, {'@': 162}), 4: (1, {'@': 162}), 5: (1, {'@': 162}), 6: (1, {'@': 162}), 7: (1, {'@': 162}), 8: (1, {'@': 162}), 9: (1, {'@': 162}), 10: (1, {'@': 162}), 11: (1, {'@': 162}), 12: (1, {'@': 162}), 13: (1, {'@': 162}), 14: (1, {'@': 162}), 15: (1, {'@': 162}), 16: (1, {'@': 162}), 17: (1, {'@': 162}), 18: (1, {'@': 162}), 19: (1, {'@': 162}), 20: (1, {'@': 162}), 21: (1, {'@': 162}), 22: (1, {'@': 162}), 23: (1, {'@': 162}), 24: (1, {'@': 162}), 25: (1, {'@': 162}), 26: (1, {'@': 162}), 27: (1, {'@': 162}), 28: (1, {'@': 162}), 29: (1, {'@': 162}), 30: (1, {'@': 162})}, 535: {26: (0, 69)}, 536: {74: (0, 132), 21: (0, 201), 60: (0, 154)}, 537: {31: (0, 196)}, 538: {2: (1, {'@': 132}), 3: (1, {'@': 132}), 5: (1, {'@': 132}), 21: (1, {'@': 132}), 8: (1, {'@': 132}), 9: (1, {'@': 132}), 23: (1, {'@': 132}), 13: (1, {'@': 132}), 14: (1, {'@': 132}), 26: (1, {'@': 132}), 16: (1, {'@': 132}), 17: (1, {'@': 132}), 28: (1, {'@': 132}), 29: (1, {'@': 132})}, 539: {86: (0, 29), 87: (0, 198), 41: (0, 1), 88: (0, 120), 89: (0, 135), 27: (0, 173), 85: (0, 295), 29: (1, {'@': 243})}, 540: {41: (0, 648)}, 541: {17: (1, {'@': 193}), 23: (1, {'@': 193})}, 542: {2: (1, {'@': 189}), 3: (1, {'@': 189}), 4: (1, {'@': 189}), 5: (1, {'@': 189}), 6: (1, {'@': 189}), 7: (1, {'@': 189}), 8: (1, {'@': 189}), 9: (1, {'@': 189}), 10: (1, {'@': 189}), 11: (1, {'@': 189}), 12: (1, {'@': 189}), 13: (1, {'@': 189}), 14: (1, {'@': 189}), 15: (1, {'@': 189}), 16: (1, {'@': 189}), 17: (1, {'@': 189}), 18: (1, {'@': 189}), 19: (1, {'@': 189}), 20: (1, {'@': 189}), 21: (1, {'@': 189}), 22: (1, {'@': 189}), 23: (1, {'@': 189}), 24: (1, {'@': 189}), 25: (1, {'@': 189}), 26: (1, {'@': 189}), 27: (1, {'@': 189}), 28: (1, {'@': 189}), 29: (1, {'@': 189}), 30: (1, {'@': 189})}, 543: {79: (0, 110), 90: (0, 494), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 96: (0, 515), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 544: {3: (1, {'@': 222}), 5: (1, {'@': 222}), 21: (1, {'@': 222}), 8: (1, {'@': 222}), 31: (1, {'@': 222}), 23: (1, {'@': 222}), 13: (1, {'@': 222}), 26: (1, {'@': 222}), 16: (1, {'@': 222}), 17: (1, {'@': 222}), 29: (1, {'@': 222})}, 545: {44: (1, {'@': 309}), 62: (1, {'@': 309}), 42: (1, {'@': 309}), 15: (1, {'@': 309}), 63: (1, {'@': 309}), 65: (1, {'@': 309}), 21: (1, {'@': 309}), 53: (1, {'@': 309}), 67: (1, {'@': 309}), 58: (1, {'@': 309}), 56: (1, {'@': 309}), 8: (1, {'@': 309}), 69: (1, {'@': 309}), 70: (1, {'@': 309}), 31: (1, {'@': 309}), 71: (1, {'@': 309}), 13: (1, {'@': 309}), 72: (1, {'@': 309}), 73: (1, {'@': 309}), 41: (1, {'@': 309}), 1: (1, {'@': 309}), 49: (1, {'@': 309}), 74: (1, {'@': 309}), 40: (1, {'@': 309}), 76: (1, {'@': 309}), 77: (1, {'@': 309}), 78: (1, {'@': 309}), 52: (1, {'@': 309}), 79: (1, {'@': 309}), 80: (1, {'@': 309}), 81: (1, {'@': 309}), 34: (1, {'@': 309}), 61: (1, {'@': 309}), 64: (1, {'@': 309}), 66: (1, {'@': 309}), 68: (1, {'@': 309}), 75: (1, {'@': 309}), 23: (1, {'@': 309})}, 546: {29: (0, 429), 1: (0, 237)}, 547: {44: (1, {'@': 307}), 62: (1, {'@': 307}), 42: (1, {'@': 307}), 15: (1, {'@': 307}), 63: (1, {'@': 307}), 65: (1, {'@': 307}), 21: (1, {'@': 307}), 53: (1, {'@': 307}), 67: (1, {'@': 307}), 58: (1, {'@': 307}), 56: (1, {'@': 307}), 8: (1, {'@': 307}), 69: (1, {'@': 307}), 70: (1, {'@': 307}), 31: (1, {'@': 307}), 71: (1, {'@': 307}), 13: (1, {'@': 307}), 72: (1, {'@': 307}), 73: (1, {'@': 307}), 41: (1, {'@': 307}), 1: (1, {'@': 307}), 49: (1, {'@': 307}), 74: (1, {'@': 307}), 40: (1, {'@': 307}), 76: (1, {'@': 307}), 77: (1, {'@': 307}), 78: (1, {'@': 307}), 52: (1, {'@': 307}), 79: (1, {'@': 307}), 80: (1, {'@': 307}), 81: (1, {'@': 307}), 34: (1, {'@': 307}), 61: (1, {'@': 307}), 64: (1, {'@': 307}), 66: (1, {'@': 307}), 68: (1, {'@': 307}), 75: (1, {'@': 307}), 23: (1, {'@': 307})}, 548: {3: (0, 52)}, 549: {60: (0, 168), 21: (0, 201)}, 550: {85: (0, 210), 86: (0, 29), 87: (0, 198), 41: (0, 1), 88: (0, 120), 89: (0, 135), 27: (0, 173), 29: (1, {'@': 243})}, 551: {2: (1, {'@': 159}), 3: (1, {'@': 159}), 4: (1, {'@': 159}), 5: (1, {'@': 159}), 6: (1, {'@': 159}), 7: (1, {'@': 159}), 8: (1, {'@': 159}), 9: (1, {'@': 159}), 10: (1, {'@': 159}), 11: (1, {'@': 159}), 12: (1, {'@': 159}), 13: (1, {'@': 159}), 14: (1, {'@': 159}), 15: (1, {'@': 159}), 16: (1, {'@': 159}), 17: (1, {'@': 159}), 18: (1, {'@': 159}), 19: (1, {'@': 159}), 20: (1, {'@': 159}), 21: (1, {'@': 159}), 22: (1, {'@': 159}), 23: (1, {'@': 159}), 24: (1, {'@': 159}), 25: (1, {'@': 159}), 26: (1, {'@': 159}), 27: (1, {'@': 159}), 28: (1, {'@': 159}), 29: (1, {'@': 159}), 30: (1, {'@': 159})}, 552: {17: (0, 610), 29: (1, {'@': 268})}, 553: {2: (1, {'@': 407}), 3: (1, {'@': 407}), 4: (1, {'@': 407}), 5: (1, {'@': 407}), 6: (1, {'@': 407}), 7: (1, {'@': 407}), 8: (1, {'@': 407}), 9: (1, {'@': 407}), 10: (1, {'@': 407}), 11: (1, {'@': 407}), 12: (1, {'@': 407}), 13: (1, {'@': 407}), 14: (1, {'@': 407}), 15: (1, {'@': 407}), 16: (1, {'@': 407}), 0: (1, {'@': 407}), 1: (1, {'@': 407}), 17: (1, {'@': 407}), 18: (1, {'@': 407}), 19: (1, {'@': 407}), 20: (1, {'@': 407}), 21: (1, {'@': 407}), 22: (1, {'@': 407}), 23: (1, {'@': 407}), 24: (1, {'@': 407}), 25: (1, {'@': 407}), 26: (1, {'@': 407}), 27: (1, {'@': 407}), 28: (1, {'@': 407}), 29: (1, {'@': 407}), 30: (1, {'@': 407}), 31: (1, {'@': 407}), 32: (1, {'@': 407}), 33: (1, {'@': 407})}, 554: {34: (0, 400), 35: (0, 571), 36: (0, 40), 91: (0, 406), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 45: (0, 525), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 555: {79: (0, 110), 90: (0, 520), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 568), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 126: (0, 617), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 96: (0, 615), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 127: (0, 552), 125: (0, 409), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 29: (1, {'@': 269})}, 556: {29: (0, 258)}, 557: {31: (0, 420)}, 558: {150: (0, 650), 41: (0, 629), 151: (0, 366), 152: (0, 393), 31: (0, 614)}, 559: {21: (0, 201), 60: (0, 91), 61: (1, {'@': 108}), 44: (1, {'@': 108}), 62: (1, {'@': 108}), 42: (1, {'@': 108}), 15: (1, {'@': 108}), 63: (1, {'@': 108}), 65: (1, {'@': 108}), 53: (1, {'@': 108}), 58: (1, {'@': 108}), 56: (1, {'@': 108}), 8: (1, {'@': 108}), 69: (1, {'@': 108}), 70: (1, {'@': 108}), 31: (1, {'@': 108}), 71: (1, {'@': 108}), 13: (1, {'@': 108}), 72: (1, {'@': 108}), 73: (1, {'@': 108}), 41: (1, {'@': 108}), 1: (1, {'@': 108}), 49: (1, {'@': 108}), 74: (1, {'@': 108}), 40: (1, {'@': 108}), 76: (1, {'@': 108}), 77: (1, {'@': 108}), 23: (1, {'@': 108}), 78: (1, {'@': 108}), 52: (1, {'@': 108}), 79: (1, {'@': 108}), 80: (1, {'@': 108}), 81: (1, {'@': 108}), 34: (1, {'@': 108})}, 560: {44: (1, {'@': 303}), 62: (1, {'@': 303}), 42: (1, {'@': 303}), 15: (1, {'@': 303}), 63: (1, {'@': 303}), 65: (1, {'@': 303}), 21: (1, {'@': 303}), 53: (1, {'@': 303}), 67: (1, {'@': 303}), 58: (1, {'@': 303}), 56: (1, {'@': 303}), 8: (1, {'@': 303}), 69: (1, {'@': 303}), 70: (1, {'@': 303}), 31: (1, {'@': 303}), 71: (1, {'@': 303}), 13: (1, {'@': 303}), 72: (1, {'@': 303}), 73: (1, {'@': 303}), 41: (1, {'@': 303}), 1: (1, {'@': 303}), 49: (1, {'@': 303}), 74: (1, {'@': 303}), 40: (1, {'@': 303}), 76: (1, {'@': 303}), 77: (1, {'@': 303}), 78: (1, {'@': 303}), 52: (1, {'@': 303}), 79: (1, {'@': 303}), 80: (1, {'@': 303}), 81: (1, {'@': 303}), 34: (1, {'@': 303}), 61: (1, {'@': 303}), 64: (1, {'@': 303}), 66: (1, {'@': 303}), 68: (1, {'@': 303}), 75: (1, {'@': 303}), 23: (1, {'@': 303})}, 561: {2: (1, {'@': 173}), 3: (1, {'@': 173}), 4: (1, {'@': 173}), 5: (1, {'@': 173}), 6: (1, {'@': 173}), 7: (1, {'@': 173}), 8: (1, {'@': 173}), 9: (1, {'@': 173}), 10: (1, {'@': 173}), 11: (1, {'@': 173}), 12: (1, {'@': 173}), 13: (1, {'@': 173}), 14: (1, {'@': 173}), 15: (1, {'@': 173}), 16: (1, {'@': 173}), 17: (1, {'@': 173}), 18: (1, {'@': 173}), 19: (1, {'@': 173}), 20: (1, {'@': 173}), 21: (1, {'@': 173}), 22: (1, {'@': 173}), 23: (1, {'@': 173}), 24: (1, {'@': 173}), 25: (1, {'@': 173}), 26: (1, {'@': 173}), 27: (1, {'@': 173}), 28: (1, {'@': 173}), 29: (1, {'@': 173}), 30: (1, {'@': 173})}, 562: {3: (0, 326), 17: (0, 240)}, 563: {23: (0, 184), 21: (0, 88), 61: (1, {'@': 92}), 44: (1, {'@': 92}), 62: (1, {'@': 92}), 42: (1, {'@': 92}), 15: (1, {'@': 92}), 63: (1, {'@': 92}), 65: (1, {'@': 92}), 53: (1, {'@': 92}), 58: (1, {'@': 92}), 56: (1, {'@': 92}), 8: (1, {'@': 92}), 69: (1, {'@': 92}), 70: (1, {'@': 92}), 31: (1, {'@': 92}), 71: (1, {'@': 92}), 13: (1, {'@': 92}), 72: (1, {'@': 92}), 73: (1, {'@': 92}), 41: (1, {'@': 92}), 1: (1, {'@': 92}), 49: (1, {'@': 92}), 74: (1, {'@': 92}), 40: (1, {'@': 92}), 76: (1, {'@': 92}), 77: (1, {'@': 92}), 78: (1, {'@': 92}), 52: (1, {'@': 92}), 79: (1, {'@': 92}), 80: (1, {'@': 92}), 81: (1, {'@': 92}), 34: (1, {'@': 92})}, 564: {13: (0, 77), 26: (0, 262), 17: (0, 458), 3: (1, {'@': 184})}, 565: {21: (0, 201), 60: (0, 243)}, 566: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 504), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 567: {60: (0, 160), 21: (0, 201)}, 568: {32: (0, 433), 146: (0, 113), 147: (0, 74), 2: (1, {'@': 409}), 4: (1, {'@': 409}), 5: (1, {'@': 409}), 6: (1, {'@': 409}), 7: (1, {'@': 409}), 8: (1, {'@': 409}), 9: (1, {'@': 409}), 10: (1, {'@': 409}), 31: (1, {'@': 409}), 11: (1, {'@': 409}), 12: (1, {'@': 409}), 14: (1, {'@': 409}), 15: (1, {'@': 409}), 0: (1, {'@': 409}), 1: (1, {'@': 409}), 17: (1, {'@': 409}), 18: (1, {'@': 409}), 19: (1, {'@': 409}), 20: (1, {'@': 409}), 22: (1, {'@': 409}), 24: (1, {'@': 409}), 25: (1, {'@': 409}), 27: (1, {'@': 409}), 28: (1, {'@': 409}), 29: (1, {'@': 409}), 30: (1, {'@': 409})}, 569: {17: (0, 300), 32: (1, {'@': 401}), 2: (1, {'@': 401}), 4: (1, {'@': 401}), 5: (1, {'@': 401}), 6: (1, {'@': 401}), 7: (1, {'@': 401}), 8: (1, {'@': 401}), 9: (1, {'@': 401}), 33: (1, {'@': 401}), 31: (1, {'@': 401}), 10: (1, {'@': 401}), 11: (1, {'@': 401}), 12: (1, {'@': 401}), 14: (1, {'@': 401}), 15: (1, {'@': 401}), 18: (1, {'@': 401}), 19: (1, {'@': 401}), 20: (1, {'@': 401}), 21: (1, {'@': 401}), 22: (1, {'@': 401}), 24: (1, {'@': 401}), 25: (1, {'@': 401}), 27: (1, {'@': 401}), 28: (1, {'@': 401}), 30: (1, {'@': 401}), 26: (1, {'@': 401})}, 570: {8: (0, 462), 5: (0, 177), 26: (0, 224)}, 571: {2: (1, {'@': 164}), 3: (1, {'@': 164}), 4: (1, {'@': 164}), 5: (1, {'@': 164}), 6: (1, {'@': 164}), 7: (1, {'@': 164}), 8: (1, {'@': 164}), 9: (1, {'@': 164}), 10: (1, {'@': 164}), 11: (1, {'@': 164}), 12: (1, {'@': 164}), 13: (1, {'@': 164}), 14: (1, {'@': 164}), 15: (1, {'@': 164}), 16: (1, {'@': 164}), 17: (1, {'@': 164}), 18: (1, {'@': 164}), 19: (1, {'@': 164}), 20: (1, {'@': 164}), 21: (1, {'@': 164}), 22: (1, {'@': 164}), 23: (1, {'@': 164}), 24: (1, {'@': 164}), 25: (1, {'@': 164}), 26: (1, {'@': 164}), 27: (1, {'@': 164}), 28: (1, {'@': 164}), 29: (1, {'@': 164}), 30: (1, {'@': 164})}, 572: {31: (0, 658), 38: (0, 0), 41: (0, 51), 57: (0, 553), 36: (0, 40)}, 573: {8: (0, 462), 5: (0, 177), 17: (0, 158), 16: (0, 274), 3: (1, {'@': 183})}, 574: {60: (0, 217), 66: (0, 595), 21: (0, 201), 137: (0, 9), 64: (0, 363), 136: (0, 180)}, 575: {44: (1, {'@': 123}), 62: (1, {'@': 123}), 42: (1, {'@': 123}), 15: (1, {'@': 123}), 63: (1, {'@': 123}), 65: (1, {'@': 123}), 21: (1, {'@': 123}), 53: (1, {'@': 123}), 67: (1, {'@': 123}), 58: (1, {'@': 123}), 56: (1, {'@': 123}), 8: (1, {'@': 123}), 69: (1, {'@': 123}), 70: (1, {'@': 123}), 31: (1, {'@': 123}), 71: (1, {'@': 123}), 13: (1, {'@': 123}), 72: (1, {'@': 123}), 73: (1, {'@': 123}), 41: (1, {'@': 123}), 1: (1, {'@': 123}), 49: (1, {'@': 123}), 74: (1, {'@': 123}), 40: (1, {'@': 123}), 76: (1, {'@': 123}), 77: (1, {'@': 123}), 78: (1, {'@': 123}), 52: (1, {'@': 123}), 79: (1, {'@': 123}), 80: (1, {'@': 123}), 81: (1, {'@': 123}), 34: (1, {'@': 123}), 61: (1, {'@': 123}), 64: (1, {'@': 123}), 66: (1, {'@': 123}), 68: (1, {'@': 123}), 75: (1, {'@': 123}), 23: (1, {'@': 123})}, 576: {128: (0, 149), 68: (0, 57), 83: (0, 372), 21: (0, 88)}, 577: {34: (0, 400), 35: (0, 571), 36: (0, 40), 31: (0, 248), 38: (0, 358), 41: (0, 490), 40: (0, 356), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 46: (0, 338), 48: (0, 365), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 578: {8: (0, 462), 5: (0, 177), 3: (0, 612)}, 579: {28: (0, 205), 14: (0, 207), 3: (1, {'@': 128}), 5: (1, {'@': 128}), 8: (1, {'@': 128}), 13: (1, {'@': 128}), 16: (1, {'@': 128}), 17: (1, {'@': 128}), 21: (1, {'@': 128}), 23: (1, {'@': 128}), 26: (1, {'@': 128}), 29: (1, {'@': 128})}, 580: {44: (1, {'@': 381}), 62: (1, {'@': 381}), 42: (1, {'@': 381}), 15: (1, {'@': 381}), 63: (1, {'@': 381}), 65: (1, {'@': 381}), 21: (1, {'@': 381}), 53: (1, {'@': 381}), 67: (1, {'@': 381}), 58: (1, {'@': 381}), 56: (1, {'@': 381}), 8: (1, {'@': 381}), 69: (1, {'@': 381}), 70: (1, {'@': 381}), 31: (1, {'@': 381}), 71: (1, {'@': 381}), 13: (1, {'@': 381}), 72: (1, {'@': 381}), 73: (1, {'@': 381}), 41: (1, {'@': 381}), 1: (1, {'@': 381}), 49: (1, {'@': 381}), 74: (1, {'@': 381}), 40: (1, {'@': 381}), 76: (1, {'@': 381}), 77: (1, {'@': 381}), 78: (1, {'@': 381}), 52: (1, {'@': 381}), 79: (1, {'@': 381}), 80: (1, {'@': 381}), 81: (1, {'@': 381}), 34: (1, {'@': 381}), 61: (1, {'@': 381}), 64: (1, {'@': 381}), 66: (1, {'@': 381}), 68: (1, {'@': 381}), 75: (1, {'@': 381}), 23: (1, {'@': 381})}, 581: {8: (0, 462), 5: (0, 177), 26: (0, 48), 3: (0, 42)}, 582: {60: (0, 660), 66: (0, 595), 135: (0, 574), 21: (0, 201), 136: (0, 527), 137: (0, 440), 64: (0, 363), 138: (0, 288), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 583: {3: (0, 119), 17: (0, 240)}, 584: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 204})}, 585: {44: (1, {'@': 285}), 62: (1, {'@': 285}), 42: (1, {'@': 285}), 15: (1, {'@': 285}), 63: (1, {'@': 285}), 65: (1, {'@': 285}), 21: (1, {'@': 285}), 53: (1, {'@': 285}), 67: (1, {'@': 285}), 58: (1, {'@': 285}), 56: (1, {'@': 285}), 8: (1, {'@': 285}), 69: (1, {'@': 285}), 70: (1, {'@': 285}), 31: (1, {'@': 285}), 71: (1, {'@': 285}), 13: (1, {'@': 285}), 72: (1, {'@': 285}), 73: (1, {'@': 285}), 41: (1, {'@': 285}), 1: (1, {'@': 285}), 49: (1, {'@': 285}), 74: (1, {'@': 285}), 40: (1, {'@': 285}), 76: (1, {'@': 285}), 77: (1, {'@': 285}), 78: (1, {'@': 285}), 52: (1, {'@': 285}), 79: (1, {'@': 285}), 80: (1, {'@': 285}), 81: (1, {'@': 285}), 34: (1, {'@': 285}), 61: (1, {'@': 285}), 64: (1, {'@': 285}), 66: (1, {'@': 285}), 68: (1, {'@': 285}), 75: (1, {'@': 285}), 23: (1, {'@': 285})}, 586: {79: (0, 110), 90: (0, 323), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 587: {32: (1, {'@': 259}), 17: (1, {'@': 259}), 29: (1, {'@': 259})}, 588: {3: (1, {'@': 210}), 5: (1, {'@': 210}), 21: (1, {'@': 210}), 8: (1, {'@': 210}), 31: (1, {'@': 210}), 23: (1, {'@': 210}), 13: (1, {'@': 210}), 26: (1, {'@': 210}), 16: (1, {'@': 210}), 17: (1, {'@': 210}), 29: (1, {'@': 210})}, 589: {60: (0, 476), 66: (0, 595), 135: (0, 574), 21: (0, 201), 136: (0, 527), 137: (0, 440), 138: (0, 318), 64: (0, 363), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}, 590: {3: (1, {'@': 212}), 5: (1, {'@': 212}), 21: (1, {'@': 212}), 8: (1, {'@': 212}), 31: (1, {'@': 212}), 23: (1, {'@': 212}), 13: (1, {'@': 212}), 26: (1, {'@': 212}), 16: (1, {'@': 212}), 17: (1, {'@': 212}), 29: (1, {'@': 212})}, 591: {29: (0, 605)}, 592: {44: (1, {'@': 274}), 62: (1, {'@': 274}), 42: (1, {'@': 274}), 15: (1, {'@': 274}), 63: (1, {'@': 274}), 65: (1, {'@': 274}), 21: (1, {'@': 274}), 53: (1, {'@': 274}), 67: (1, {'@': 274}), 58: (1, {'@': 274}), 56: (1, {'@': 274}), 8: (1, {'@': 274}), 69: (1, {'@': 274}), 70: (1, {'@': 274}), 31: (1, {'@': 274}), 71: (1, {'@': 274}), 13: (1, {'@': 274}), 72: (1, {'@': 274}), 73: (1, {'@': 274}), 41: (1, {'@': 274}), 1: (1, {'@': 274}), 49: (1, {'@': 274}), 74: (1, {'@': 274}), 40: (1, {'@': 274}), 76: (1, {'@': 274}), 77: (1, {'@': 274}), 78: (1, {'@': 274}), 52: (1, {'@': 274}), 79: (1, {'@': 274}), 80: (1, {'@': 274}), 81: (1, {'@': 274}), 34: (1, {'@': 274}), 61: (1, {'@': 274}), 64: (1, {'@': 274}), 66: (1, {'@': 274}), 68: (1, {'@': 274}), 75: (1, {'@': 274}), 23: (1, {'@': 274})}, 593: {3: (1, {'@': 230}), 5: (1, {'@': 230}), 8: (1, {'@': 230}), 13: (1, {'@': 230}), 16: (1, {'@': 230}), 17: (1, {'@': 230}), 21: (1, {'@': 230}), 23: (1, {'@': 230}), 26: (1, {'@': 230}), 29: (1, {'@': 230})}, 594: {21: (0, 201), 60: (0, 622), 56: (1, {'@': 87}), 44: (1, {'@': 87}), 62: (1, {'@': 87}), 8: (1, {'@': 87}), 69: (1, {'@': 87}), 70: (1, {'@': 87}), 31: (1, {'@': 87}), 42: (1, {'@': 87}), 71: (1, {'@': 87}), 13: (1, {'@': 87}), 15: (1, {'@': 87}), 72: (1, {'@': 87}), 73: (1, {'@': 87}), 41: (1, {'@': 87}), 1: (1, {'@': 87}), 63: (1, {'@': 87}), 49: (1, {'@': 87}), 74: (1, {'@': 87}), 65: (1, {'@': 87}), 40: (1, {'@': 87}), 81: (1, {'@': 87}), 76: (1, {'@': 87}), 53: (1, {'@': 87}), 77: (1, {'@': 87}), 67: (1, {'@': 87}), 78: (1, {'@': 87}), 52: (1, {'@': 87}), 79: (1, {'@': 87}), 80: (1, {'@': 87}), 58: (1, {'@': 87}), 34: (1, {'@': 87}), 61: (1, {'@': 87}), 64: (1, {'@': 87}), 66: (1, {'@': 87}), 68: (1, {'@': 87}), 75: (1, {'@': 87}), 23: (1, {'@': 87})}, 595: {31: (0, 364)}, 596: {2: (1, {'@': 172}), 3: (1, {'@': 172}), 4: (1, {'@': 172}), 5: (1, {'@': 172}), 6: (1, {'@': 172}), 7: (1, {'@': 172}), 8: (1, {'@': 172}), 9: (1, {'@': 172}), 10: (1, {'@': 172}), 11: (1, {'@': 172}), 12: (1, {'@': 172}), 13: (1, {'@': 172}), 14: (1, {'@': 172}), 15: (1, {'@': 172}), 16: (1, {'@': 172}), 17: (1, {'@': 172}), 18: (1, {'@': 172}), 19: (1, {'@': 172}), 20: (1, {'@': 172}), 21: (1, {'@': 172}), 22: (1, {'@': 172}), 23: (1, {'@': 172}), 24: (1, {'@': 172}), 25: (1, {'@': 172}), 26: (1, {'@': 172}), 27: (1, {'@': 172}), 28: (1, {'@': 172}), 29: (1, {'@': 172}), 30: (1, {'@': 172})}, 597: {38: (0, 253), 34: (0, 400), 36: (0, 40), 31: (0, 597), 41: (0, 51), 57: (0, 553), 54: (0, 591), 1: (0, 572)}, 598: {31: (0, 101), 3: (1, {'@': 127}), 5: (1, {'@': 127}), 8: (1, {'@': 127}), 13: (1, {'@': 127}), 16: (1, {'@': 127}), 17: (1, {'@': 127}), 21: (1, {'@': 127}), 23: (1, {'@': 127}), 26: (1, {'@': 127}), 29: (1, {'@': 127})}, 599: {21: (0, 62), 44: (1, {'@': 321}), 62: (1, {'@': 321}), 42: (1, {'@': 321}), 15: (1, {'@': 321}), 63: (1, {'@': 321}), 65: (1, {'@': 321}), 53: (1, {'@': 321}), 67: (1, {'@': 321}), 58: (1, {'@': 321}), 56: (1, {'@': 321}), 8: (1, {'@': 321}), 69: (1, {'@': 321}), 70: (1, {'@': 321}), 31: (1, {'@': 321}), 71: (1, {'@': 321}), 13: (1, {'@': 321}), 72: (1, {'@': 321}), 73: (1, {'@': 321}), 41: (1, {'@': 321}), 1: (1, {'@': 321}), 49: (1, {'@': 321}), 74: (1, {'@': 321}), 40: (1, {'@': 321}), 76: (1, {'@': 321}), 77: (1, {'@': 321}), 78: (1, {'@': 321}), 52: (1, {'@': 321}), 79: (1, {'@': 321}), 80: (1, {'@': 321}), 81: (1, {'@': 321}), 34: (1, {'@': 321}), 61: (1, {'@': 321}), 64: (1, {'@': 321}), 66: (1, {'@': 321}), 68: (1, {'@': 321}), 75: (1, {'@': 321}), 23: (1, {'@': 321})}, 600: {79: (0, 110), 90: (0, 499), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 134: (0, 548), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 8: (0, 600), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 96: (0, 564), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 3: (1, {'@': 185})}, 601: {41: (0, 121)}, 602: {42: (0, 123), 123: (0, 218), 140: (0, 219)}, 603: {8: (0, 462), 5: (0, 177), 21: (1, {'@': 201})}, 604: {29: (1, {'@': 241})}, 605: {2: (1, {'@': 402}), 3: (1, {'@': 402}), 4: (1, {'@': 402}), 5: (1, {'@': 402}), 6: (1, {'@': 402}), 7: (1, {'@': 402}), 8: (1, {'@': 402}), 9: (1, {'@': 402}), 10: (1, {'@': 402}), 11: (1, {'@': 402}), 12: (1, {'@': 402}), 13: (1, {'@': 402}), 14: (1, {'@': 402}), 15: (1, {'@': 402}), 16: (1, {'@': 402}), 17: (1, {'@': 402}), 18: (1, {'@': 402}), 19: (1, {'@': 402}), 20: (1, {'@': 402}), 21: (1, {'@': 402}), 22: (1, {'@': 402}), 23: (1, {'@': 402}), 24: (1, {'@': 402}), 25: (1, {'@': 402}), 26: (1, {'@': 402}), 27: (1, {'@': 402}), 28: (1, {'@': 402}), 29: (1, {'@': 402}), 30: (1, {'@': 402}), 31: (1, {'@': 402}), 32: (1, {'@': 402}), 33: (1, {'@': 402})}, 606: {3: (1, {'@': 229}), 5: (1, {'@': 229}), 8: (1, {'@': 229}), 13: (1, {'@': 229}), 16: (1, {'@': 229}), 17: (1, {'@': 229}), 21: (1, {'@': 229}), 23: (1, {'@': 229}), 26: (1, {'@': 229}), 29: (1, {'@': 229})}, 607: {32: (0, 299)}, 608: {79: (0, 110), 80: (0, 70), 110: (0, 529), 36: (0, 40), 70: (0, 92), 91: (0, 144), 60: (0, 563), 153: (0, 513), 115: (0, 567), 63: (0, 141), 21: (0, 201), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 444), 93: (0, 426), 61: (0, 601), 90: (0, 441), 72: (0, 469), 148: (0, 559), 74: (0, 480), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 620), 45: (0, 525), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 95: (0, 579), 106: (0, 549), 99: (0, 598), 107: (0, 592), 8: (0, 600), 100: (0, 627), 109: (0, 424), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 101: (0, 454), 55: (0, 509), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 62: (0, 487), 96: (0, 639), 69: (0, 435), 94: (0, 408), 44: (0, 436), 105: (0, 465), 108: (0, 287), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 122: (0, 276), 149: (0, 284), 48: (0, 521), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 113: (0, 325), 15: (0, 466), 71: (0, 405), 56: (0, 427), 23: (1, {'@': 93})}, 609: {34: (0, 400), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 44: (0, 436), 45: (0, 170), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 610: {79: (0, 110), 90: (0, 520), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 568), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 126: (0, 617), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 96: (0, 615), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 127: (0, 552), 100: (0, 627), 125: (0, 238), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551), 29: (1, {'@': 269})}, 611: {79: (0, 110), 34: (0, 400), 35: (0, 571), 36: (0, 40), 91: (0, 144), 37: (0, 370), 31: (0, 248), 38: (0, 358), 39: (0, 655), 40: (0, 356), 41: (0, 490), 42: (0, 444), 43: (0, 261), 8: (0, 600), 45: (0, 525), 44: (0, 436), 46: (0, 338), 47: (0, 404), 48: (0, 521), 49: (0, 596), 98: (0, 303), 50: (0, 492), 51: (0, 534), 52: (0, 447), 53: (0, 396), 1: (0, 572), 54: (0, 267), 15: (0, 466), 55: (0, 509), 77: (0, 554), 56: (0, 427), 57: (0, 553), 58: (0, 561), 59: (0, 551)}, 612: {2: (1, {'@': 174}), 3: (1, {'@': 174}), 4: (1, {'@': 174}), 5: (1, {'@': 174}), 6: (1, {'@': 174}), 7: (1, {'@': 174}), 8: (1, {'@': 174}), 9: (1, {'@': 174}), 10: (1, {'@': 174}), 11: (1, {'@': 174}), 12: (1, {'@': 174}), 13: (1, {'@': 174}), 14: (1, {'@': 174}), 15: (1, {'@': 174}), 16: (1, {'@': 174}), 17: (1, {'@': 174}), 18: (1, {'@': 174}), 19: (1, {'@': 174}), 20: (1, {'@': 174}), 21: (1, {'@': 174}), 22: (1, {'@': 174}), 23: (1, {'@': 174}), 24: (1, {'@': 174}), 25: (1, {'@': 174}), 26: (1, {'@': 174}), 27: (1, {'@': 174}), 28: (1, {'@': 174}), 29: (1, {'@': 174}), 30: (1, {'@': 174})}, 613: {79: (0, 110), 101: (0, 17), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 116: (0, 298), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 123: (0, 305), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 69: (0, 435), 94: (0, 408), 115: (0, 641), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 34: (0, 400), 21: (0, 88), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 614: {150: (0, 656), 41: (0, 629), 31: (0, 614)}, 615: {17: (1, {'@': 273}), 29: (1, {'@': 273})}, 616: {44: (1, {'@': 375}), 62: (1, {'@': 375}), 42: (1, {'@': 375}), 15: (1, {'@': 375}), 63: (1, {'@': 375}), 65: (1, {'@': 375}), 21: (1, {'@': 375}), 53: (1, {'@': 375}), 67: (1, {'@': 375}), 58: (1, {'@': 375}), 56: (1, {'@': 375}), 8: (1, {'@': 375}), 69: (1, {'@': 375}), 70: (1, {'@': 375}), 31: (1, {'@': 375}), 71: (1, {'@': 375}), 13: (1, {'@': 375}), 72: (1, {'@': 375}), 73: (1, {'@': 375}), 41: (1, {'@': 375}), 1: (1, {'@': 375}), 49: (1, {'@': 375}), 74: (1, {'@': 375}), 40: (1, {'@': 375}), 76: (1, {'@': 375}), 77: (1, {'@': 375}), 78: (1, {'@': 375}), 52: (1, {'@': 375}), 79: (1, {'@': 375}), 80: (1, {'@': 375}), 81: (1, {'@': 375}), 34: (1, {'@': 375}), 61: (1, {'@': 375}), 64: (1, {'@': 375}), 66: (1, {'@': 375}), 68: (1, {'@': 375}), 75: (1, {'@': 375}), 23: (1, {'@': 375})}, 617: {17: (0, 290), 29: (1, {'@': 267})}, 618: {44: (1, {'@': 284}), 62: (1, {'@': 284}), 42: (1, {'@': 284}), 15: (1, {'@': 284}), 63: (1, {'@': 284}), 65: (1, {'@': 284}), 21: (1, {'@': 284}), 53: (1, {'@': 284}), 67: (1, {'@': 284}), 58: (1, {'@': 284}), 56: (1, {'@': 284}), 8: (1, {'@': 284}), 69: (1, {'@': 284}), 70: (1, {'@': 284}), 31: (1, {'@': 284}), 71: (1, {'@': 284}), 13: (1, {'@': 284}), 72: (1, {'@': 284}), 73: (1, {'@': 284}), 41: (1, {'@': 284}), 1: (1, {'@': 284}), 49: (1, {'@': 284}), 74: (1, {'@': 284}), 40: (1, {'@': 284}), 76: (1, {'@': 284}), 77: (1, {'@': 284}), 78: (1, {'@': 284}), 52: (1, {'@': 284}), 79: (1, {'@': 284}), 80: (1, {'@': 284}), 81: (1, {'@': 284}), 34: (1, {'@': 284}), 61: (1, {'@': 284}), 64: (1, {'@': 284}), 66: (1, {'@': 284}), 68: (1, {'@': 284}), 75: (1, {'@': 284}), 23: (1, {'@': 284})}, 619: {21: (1, {'@': 202})}, 620: {60: (0, 32), 21: (0, 201)}, 621: {90: (0, 106), 79: (0, 110), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 3: (0, 83), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 622: {21: (0, 88), 56: (1, {'@': 86}), 44: (1, {'@': 86}), 62: (1, {'@': 86}), 8: (1, {'@': 86}), 69: (1, {'@': 86}), 70: (1, {'@': 86}), 31: (1, {'@': 86}), 42: (1, {'@': 86}), 71: (1, {'@': 86}), 13: (1, {'@': 86}), 15: (1, {'@': 86}), 72: (1, {'@': 86}), 73: (1, {'@': 86}), 41: (1, {'@': 86}), 1: (1, {'@': 86}), 63: (1, {'@': 86}), 49: (1, {'@': 86}), 74: (1, {'@': 86}), 65: (1, {'@': 86}), 40: (1, {'@': 86}), 81: (1, {'@': 86}), 76: (1, {'@': 86}), 53: (1, {'@': 86}), 77: (1, {'@': 86}), 67: (1, {'@': 86}), 78: (1, {'@': 86}), 52: (1, {'@': 86}), 79: (1, {'@': 86}), 80: (1, {'@': 86}), 58: (1, {'@': 86}), 34: (1, {'@': 86}), 61: (1, {'@': 86}), 64: (1, {'@': 86}), 66: (1, {'@': 86}), 68: (1, {'@': 86}), 75: (1, {'@': 86}), 23: (1, {'@': 86})}, 623: {32: (0, 646), 31: (0, 555), 2: (1, {'@': 163}), 4: (1, {'@': 163}), 5: (1, {'@': 163}), 6: (1, {'@': 163}), 7: (1, {'@': 163}), 8: (1, {'@': 163}), 9: (1, {'@': 163}), 10: (1, {'@': 163}), 11: (1, {'@': 163}), 12: (1, {'@': 163}), 14: (1, {'@': 163}), 15: (1, {'@': 163}), 18: (1, {'@': 163}), 19: (1, {'@': 163}), 20: (1, {'@': 163}), 21: (1, {'@': 163}), 22: (1, {'@': 163}), 24: (1, {'@': 163}), 25: (1, {'@': 163}), 27: (1, {'@': 163}), 28: (1, {'@': 163}), 30: (1, {'@': 163})}, 624: {3: (1, {'@': 181})}, 625: {21: (0, 88), 66: (1, {'@': 294}), 64: (1, {'@': 294})}, 626: {101: (0, 17), 79: (0, 110), 80: (0, 70), 36: (0, 40), 70: (0, 92), 91: (0, 144), 63: (0, 141), 116: (0, 188), 21: (0, 201), 38: (0, 358), 92: (0, 397), 65: (0, 399), 76: (0, 377), 37: (0, 370), 81: (0, 431), 42: (0, 153), 93: (0, 426), 90: (0, 441), 72: (0, 469), 74: (0, 480), 62: (0, 481), 102: (0, 512), 41: (0, 490), 73: (0, 506), 60: (0, 191), 104: (0, 530), 45: (0, 525), 105: (0, 516), 51: (0, 534), 13: (0, 537), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 106: (0, 565), 95: (0, 579), 99: (0, 598), 107: (0, 592), 108: (0, 594), 8: (0, 600), 100: (0, 627), 109: (0, 424), 110: (0, 350), 47: (0, 404), 43: (0, 410), 31: (0, 416), 50: (0, 492), 111: (0, 497), 112: (0, 514), 55: (0, 509), 113: (0, 528), 59: (0, 551), 78: (0, 558), 35: (0, 571), 114: (0, 460), 40: (0, 356), 96: (0, 639), 115: (0, 641), 69: (0, 435), 94: (0, 408), 44: (0, 436), 39: (0, 655), 49: (0, 596), 117: (0, 362), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 48: (0, 521), 123: (0, 268), 34: (0, 400), 118: (0, 419), 119: (0, 575), 120: (0, 473), 54: (0, 569), 46: (0, 338), 15: (0, 466), 71: (0, 405), 122: (0, 498), 56: (0, 427)}, 627: {31: (0, 84), 3: (1, {'@': 125}), 5: (1, {'@': 125}), 8: (1, {'@': 125}), 13: (1, {'@': 125}), 16: (1, {'@': 125}), 17: (1, {'@': 125}), 21: (1, {'@': 125}), 23: (1, {'@': 125}), 26: (1, {'@': 125}), 29: (1, {'@': 125})}, 628: {29: (0, 21)}, 629: {1: (1, {'@': 115}), 17: (1, {'@': 115}), 143: (1, {'@': 115}), 21: (1, {'@': 115}), 29: (1, {'@': 115})}, 630: {17: (0, 458), 3: (1, {'@': 184})}, 631: {41: (0, 491)}, 632: {17: (0, 306), 21: (1, {'@': 383}), 23: (1, {'@': 383})}, 633: {41: (0, 505)}, 634: {44: (1, {'@': 376}), 62: (1, {'@': 376}), 42: (1, {'@': 376}), 15: (1, {'@': 376}), 63: (1, {'@': 376}), 65: (1, {'@': 376}), 21: (1, {'@': 376}), 53: (1, {'@': 376}), 67: (1, {'@': 376}), 58: (1, {'@': 376}), 56: (1, {'@': 376}), 8: (1, {'@': 376}), 69: (1, {'@': 376}), 70: (1, {'@': 376}), 31: (1, {'@': 376}), 71: (1, {'@': 376}), 13: (1, {'@': 376}), 72: (1, {'@': 376}), 73: (1, {'@': 376}), 41: (1, {'@': 376}), 1: (1, {'@': 376}), 49: (1, {'@': 376}), 74: (1, {'@': 376}), 40: (1, {'@': 376}), 76: (1, {'@': 376}), 77: (1, {'@': 376}), 78: (1, {'@': 376}), 52: (1, {'@': 376}), 79: (1, {'@': 376}), 80: (1, {'@': 376}), 81: (1, {'@': 376}), 34: (1, {'@': 376}), 61: (1, {'@': 376}), 64: (1, {'@': 376}), 66: (1, {'@': 376}), 68: (1, {'@': 376}), 75: (1, {'@': 376}), 23: (1, {'@': 376})}, 635: {3: (1, {'@': 126}), 5: (1, {'@': 126}), 8: (1, {'@': 126}), 13: (1, {'@': 126}), 16: (1, {'@': 126}), 17: (1, {'@': 126}), 21: (1, {'@': 126}), 23: (1, {'@': 126}), 26: (1, {'@': 126}), 29: (1, {'@': 126})}, 636: {1: (1, {'@': 400}), 17: (1, {'@': 400}), 42: (1, {'@': 400}), 21: (1, {'@': 400}), 29: (1, {'@': 400})}, 637: {3: (1, {'@': 216}), 5: (1, {'@': 216}), 21: (1, {'@': 216}), 8: (1, {'@': 216}), 31: (1, {'@': 216}), 23: (1, {'@': 216}), 13: (1, {'@': 216}), 26: (1, {'@': 216}), 16: (1, {'@': 216}), 17: (1, {'@': 216}), 29: (1, {'@': 216})}, 638: {44: (1, {'@': 310}), 62: (1, {'@': 310}), 42: (1, {'@': 310}), 15: (1, {'@': 310}), 63: (1, {'@': 310}), 65: (1, {'@': 310}), 21: (1, {'@': 310}), 53: (1, {'@': 310}), 67: (1, {'@': 310}), 58: (1, {'@': 310}), 56: (1, {'@': 310}), 8: (1, {'@': 310}), 69: (1, {'@': 310}), 70: (1, {'@': 310}), 31: (1, {'@': 310}), 71: (1, {'@': 310}), 13: (1, {'@': 310}), 72: (1, {'@': 310}), 73: (1, {'@': 310}), 41: (1, {'@': 310}), 1: (1, {'@': 310}), 49: (1, {'@': 310}), 74: (1, {'@': 310}), 40: (1, {'@': 310}), 76: (1, {'@': 310}), 77: (1, {'@': 310}), 78: (1, {'@': 310}), 52: (1, {'@': 310}), 79: (1, {'@': 310}), 80: (1, {'@': 310}), 81: (1, {'@': 310}), 34: (1, {'@': 310}), 61: (1, {'@': 310}), 64: (1, {'@': 310}), 66: (1, {'@': 310}), 68: (1, {'@': 310}), 75: (1, {'@': 310}), 23: (1, {'@': 310})}, 639: {21: (1, {'@': 119}), 3: (1, {'@': 119}), 5: (1, {'@': 119}), 8: (1, {'@': 119}), 13: (1, {'@': 119}), 16: (1, {'@': 119}), 17: (1, {'@': 119}), 23: (1, {'@': 119}), 26: (1, {'@': 119}), 29: (1, {'@': 119})}, 640: {21: (0, 88), 56: (1, {'@': 80}), 44: (1, {'@': 80}), 62: (1, {'@': 80}), 8: (1, {'@': 80}), 69: (1, {'@': 80}), 70: (1, {'@': 80}), 31: (1, {'@': 80}), 42: (1, {'@': 80}), 71: (1, {'@': 80}), 13: (1, {'@': 80}), 15: (1, {'@': 80}), 72: (1, {'@': 80}), 73: (1, {'@': 80}), 41: (1, {'@': 80}), 1: (1, {'@': 80}), 63: (1, {'@': 80}), 49: (1, {'@': 80}), 74: (1, {'@': 80}), 65: (1, {'@': 80}), 40: (1, {'@': 80}), 81: (1, {'@': 80}), 76: (1, {'@': 80}), 53: (1, {'@': 80}), 77: (1, {'@': 80}), 67: (1, {'@': 80}), 78: (1, {'@': 80}), 52: (1, {'@': 80}), 79: (1, {'@': 80}), 80: (1, {'@': 80}), 58: (1, {'@': 80}), 34: (1, {'@': 80}), 61: (1, {'@': 80}), 64: (1, {'@': 80}), 66: (1, {'@': 80}), 68: (1, {'@': 80}), 75: (1, {'@': 80}), 23: (1, {'@': 80})}, 641: {60: (0, 640), 21: (0, 201)}, 642: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 194}), 23: (1, {'@': 194})}, 643: {32: (1, {'@': 207}), 17: (1, {'@': 207})}, 644: {3: (1, {'@': 218}), 5: (1, {'@': 218}), 21: (1, {'@': 218}), 8: (1, {'@': 218}), 31: (1, {'@': 218}), 23: (1, {'@': 218}), 13: (1, {'@': 218}), 26: (1, {'@': 218}), 16: (1, {'@': 218}), 17: (1, {'@': 218}), 29: (1, {'@': 218})}, 645: {44: (1, {'@': 368}), 62: (1, {'@': 368}), 42: (1, {'@': 368}), 15: (1, {'@': 368}), 63: (1, {'@': 368}), 65: (1, {'@': 368}), 21: (1, {'@': 368}), 53: (1, {'@': 368}), 67: (1, {'@': 368}), 58: (1, {'@': 368}), 56: (1, {'@': 368}), 8: (1, {'@': 368}), 69: (1, {'@': 368}), 70: (1, {'@': 368}), 31: (1, {'@': 368}), 71: (1, {'@': 368}), 13: (1, {'@': 368}), 72: (1, {'@': 368}), 73: (1, {'@': 368}), 41: (1, {'@': 368}), 1: (1, {'@': 368}), 49: (1, {'@': 368}), 74: (1, {'@': 368}), 40: (1, {'@': 368}), 76: (1, {'@': 368}), 77: (1, {'@': 368}), 78: (1, {'@': 368}), 52: (1, {'@': 368}), 79: (1, {'@': 368}), 80: (1, {'@': 368}), 81: (1, {'@': 368}), 34: (1, {'@': 368}), 61: (1, {'@': 368}), 64: (1, {'@': 368}), 66: (1, {'@': 368}), 68: (1, {'@': 368}), 75: (1, {'@': 368}), 23: (1, {'@': 368})}, 646: {79: (0, 110), 90: (0, 507), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 96: (0, 407), 38: (0, 358), 92: (0, 397), 40: (0, 356), 106: (0, 501), 42: (0, 444), 41: (0, 490), 109: (0, 424), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 623), 99: (0, 598), 34: (0, 400), 100: (0, 627), 54: (0, 569), 46: (0, 338), 47: (0, 404), 50: (0, 492), 70: (0, 159), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 647: {129: (0, 124), 31: (0, 157), 41: (0, 636)}, 648: {1: (1, {'@': 116}), 17: (1, {'@': 116}), 143: (1, {'@': 116}), 21: (1, {'@': 116}), 29: (1, {'@': 116})}, 649: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 254}), 29: (1, {'@': 254})}, 650: {1: (0, 540), 17: (1, {'@': 113}), 143: (1, {'@': 113}), 21: (1, {'@': 113})}, 651: {79: (0, 110), 90: (0, 277), 35: (0, 571), 36: (0, 40), 37: (0, 370), 31: (0, 416), 91: (0, 144), 38: (0, 358), 92: (0, 397), 40: (0, 356), 42: (0, 444), 41: (0, 490), 93: (0, 426), 94: (0, 408), 44: (0, 436), 95: (0, 579), 45: (0, 525), 8: (0, 600), 39: (0, 655), 49: (0, 596), 51: (0, 534), 97: (0, 635), 52: (0, 447), 53: (0, 396), 1: (0, 572), 98: (0, 538), 77: (0, 554), 57: (0, 553), 58: (0, 561), 48: (0, 521), 43: (0, 223), 99: (0, 598), 34: (0, 400), 100: (0, 627), 46: (0, 338), 47: (0, 404), 50: (0, 492), 54: (0, 267), 15: (0, 466), 55: (0, 509), 56: (0, 427), 59: (0, 551)}, 652: {150: (0, 650), 152: (0, 434), 41: (0, 629), 31: (0, 614)}, 653: {17: (1, {'@': 253}), 29: (1, {'@': 253})}, 654: {1: (1, {'@': 114}), 17: (1, {'@': 114}), 143: (1, {'@': 114}), 21: (1, {'@': 114}), 29: (1, {'@': 114})}, 655: {4: (0, 351), 25: (0, 108), 6: (0, 367), 27: (0, 577), 2: (1, {'@': 149}), 3: (1, {'@': 149}), 5: (1, {'@': 149}), 7: (1, {'@': 149}), 8: (1, {'@': 149}), 9: (1, {'@': 149}), 10: (1, {'@': 149}), 11: (1, {'@': 149}), 12: (1, {'@': 149}), 13: (1, {'@': 149}), 14: (1, {'@': 149}), 15: (1, {'@': 149}), 16: (1, {'@': 149}), 17: (1, {'@': 149}), 18: (1, {'@': 149}), 20: (1, {'@': 149}), 21: (1, {'@': 149}), 22: (1, {'@': 149}), 23: (1, {'@': 149}), 24: (1, {'@': 149}), 26: (1, {'@': 149}), 28: (1, {'@': 149}), 29: (1, {'@': 149}), 30: (1, {'@': 149})}, 656: {1: (0, 540), 29: (0, 654)}, 657: {3: (1, {'@': 221}), 5: (1, {'@': 221}), 21: (1, {'@': 221}), 8: (1, {'@': 221}), 31: (1, {'@': 221}), 23: (1, {'@': 221}), 13: (1, {'@': 221}), 26: (1, {'@': 221}), 16: (1, {'@': 221}), 17: (1, {'@': 221}), 29: (1, {'@': 221})}, 658: {31: (0, 658), 41: (0, 51), 38: (0, 495), 57: (0, 553), 36: (0, 40)}, 659: {8: (0, 462), 5: (0, 177), 17: (1, {'@': 252}), 29: (1, {'@': 252})}, 660: {66: (0, 595), 135: (0, 574), 136: (0, 527), 137: (0, 440), 138: (0, 236), 21: (0, 88), 64: (0, 363), 61: (1, {'@': 289}), 44: (1, {'@': 289}), 62: (1, {'@': 289}), 42: (1, {'@': 289}), 15: (1, {'@': 289}), 63: (1, {'@': 289}), 65: (1, {'@': 289}), 53: (1, {'@': 289}), 67: (1, {'@': 289}), 58: (1, {'@': 289}), 68: (1, {'@': 289}), 56: (1, {'@': 289}), 8: (1, {'@': 289}), 69: (1, {'@': 289}), 70: (1, {'@': 289}), 31: (1, {'@': 289}), 71: (1, {'@': 289}), 13: (1, {'@': 289}), 72: (1, {'@': 289}), 73: (1, {'@': 289}), 41: (1, {'@': 289}), 1: (1, {'@': 289}), 49: (1, {'@': 289}), 74: (1, {'@': 289}), 75: (1, {'@': 289}), 40: (1, {'@': 289}), 76: (1, {'@': 289}), 77: (1, {'@': 289}), 23: (1, {'@': 289}), 78: (1, {'@': 289}), 52: (1, {'@': 289}), 79: (1, {'@': 289}), 80: (1, {'@': 289}), 81: (1, {'@': 289}), 34: (1, {'@': 289})}}, 'start_states': {'start': 20}, 'end_states': {'start': 503}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'SIGNED_INT', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': 'WS_INLINE', 'pattern': {'value': '(?:(?:\\ |\t))+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': 'C_COMMENT', 'pattern': {'value': '/\\*(.|\n)*?\\*/', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': 'ASSIGN_OP', 'pattern': {'value': '(?://=|\\+\\+=|\\+=|\\-=|\\*=|/=|%=|\\^=)', 'flags': [], '_width': [2, 3], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'FUN_OP', 'pattern': {'value': '(?:\\[::\\]|and|//|in|\\[\\]|or|\\|\\||\\&\\&|<=|>=|==|!=|\\*|\\+|\\-|/|%|\\^|!|>|<)', 'flags': [], '_width': [1, 4], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'VAR_NAME', 'pattern': {'value': '(?!(if|elif|else|break|continue|do|while|for|import|internal|return|raise|as|finally|try|catch|nil|true|false|fun|class|space|in|or|and|not|new)\\b)[a-zA-Z_][a-zA-Z0-9_]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'INTERNAL', 'pattern': {'value': 'internal', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'HEX_INT', 'pattern': {'value': '0x[a-fA-F0-9]+', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': 'FLOW_CTRL', 'pattern': {'value': '(?:continue|break)', 'flags': [], '_width': [5, 8], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 10: {'name': 'MULT_STRING', 'pattern': {'value': '"""(.|\n)*?"""', 'flags': [], '_width': [6, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 11: {'name': 'ES_STR', 'pattern': {'value': '(?<!")"(?!").*?(?<!\\\\)(\\\\\\\\)*?(?<!")"(?!")', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 12: {'name': 'DOT', 'pattern': {'value': '(?<!\\.)\\.(?!\\.)', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 13: {'name': 'SCOPE', 'pattern': {'value': '::', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'NON_LOC', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'INL_COMMENT', 'pattern': {'value': '#[^\n]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': '_END', 'pattern': {'value': '(?:(?:(?:\r)?\n)+|;)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'SIGNED_FLOAT', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+(?<!\\.)\\.(?!\\.)(?:(?:[0-9])+)?|(?<!\\.)\\.(?!\\.)(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_0', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_1', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_2', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_3', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_4', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_5', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_6', 'pattern': {'value': '++', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': '__ANON_7', 'pattern': {'value': '//', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': 'NIL', 'pattern': {'value': 'nil', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': '__ANON_8', 'pattern': {'value': '..', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'FUN', 'pattern': {'value': 'fun', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'NEW', 'pattern': {'value': 'new', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'TRY', 'pattern': {'value': 'try', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': 'CATCH', 'pattern': {'value': 'catch', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': 'FINALLY', 'pattern': {'value': 'finally', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': 'SPACE', 'pattern': {'value': 'space', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'CLASS', 'pattern': {'value': 'class', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': 'ENUM', 'pattern': {'value': 'enum', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'name': 'RAISE', 'pattern': {'value': 'raise', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 72: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmt', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_rvalue', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOW_CTRL', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op_assign', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_clstmt', '__type__': 'NonTerminal'}, {'name': '_clstmts', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_clstmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_rvalue', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOW_CTRL', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op_assign', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', 'import'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_space_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', 'import'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_scope', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'import_as', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', '_list_space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', '_list_space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_list_space_scope', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_scope', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', 'space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_scope', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_scope', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'silent_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'class', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'enum', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'silent_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'member', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ternary_if', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_lor', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_land', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_and', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_not', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_not', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_lte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_gte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'expr_gt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'expr_lt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'expr_eq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'expr_neq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'in_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cat_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'in_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'in_e', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cat_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_in', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'cat_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'cat_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cat_e', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_cat', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_fdiv', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'expr_idiv', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'expr_mod', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'exp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'neg_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'exp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exp_e', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'neg_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'neg_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'neg_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'const', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xstring', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dict', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_FLOAT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'float', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': 'hex_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NIL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'nil', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'true', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'false', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'range', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'range', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'list_assig'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'list_assig'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'dict'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', 'dict'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assignment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assignment', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', 'op_assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'ASSIGN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', 'op_assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'ASSIGN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', 'scope_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pscope_name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', 'scope_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', 'member'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pmember', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'member'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pslice', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', '_pmember'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pmember', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', '_pmember'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pslice', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'lambda'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'lambda'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FUN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTERNAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'constructor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'constructor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTERNAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg_list', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'var_args_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'scope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'type_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_list_val', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', '_type_list_val'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', '_type_list_val'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_list_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'member', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_v', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_exp', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_v', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_exp', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'arg_list_call_exp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'arg_list_call_exp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'arg_list_call_v'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'arg_list_call_v'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'if', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'while', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'do_while', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'do_while', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'for', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'else', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': 'else', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'else', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'var_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'var_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_list', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'space_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'space_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmt', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', 'fun_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', '_class_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_clstmt', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', '_class_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_name', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NON_LOC', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_no_glob', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', 'scope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NON_LOC', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dot_name', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', '_dot_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': Token('RULE', '_space_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': Token('RULE', 'raise'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': Token('RULE', 'raise'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': Token('RULE', 'xstring'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'MULT_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'note', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': Token('RULE', 'xstring'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ES_STR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'elif', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': 'elif', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': '__try_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'catch', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': '__try_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'catch', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
