# The file was automatically generated by Lark v1.1.3
__version__ = "1.1.3"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Sequence, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:'rich.tree.Tree'=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        while stack:
            node = stack.pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack.append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    type: str
    start_pos: int
    value: Any
    line: int
    column: int
    end_line: int
    end_column: int
    end_pos: int

    def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)
        inst.type = type_
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr=None, last_token=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str):
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens: Dict[FrozenSet[str], BasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text):
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)
        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = md5_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_md5, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_md5 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_md5 is not None
                    f.write(cache_md5.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}], 'ignore': ['WS_INLINE', 'INL_COMMENT', 'C_COMMENT'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'COLON', 1: 'COMMA', 2: 'RBRACE', 3: '_END', 4: 'LPAR', 5: 'TILDE', 6: '$END', 7: 'NON_LOC', 8: 'LBRACE', 9: 'CLASS', 10: 'ENUM', 11: 'SIGNED_INT', 12: 'TRY', 13: 'TRUE', 14: 'NOT', 15: 'DO', 16: 'IF', 17: 'STRING', 18: 'FOR', 19: 'MINUS', 20: 'RAISE', 21: 'WHILE', 22: 'FALSE', 23: 'SPACE', 24: 'IMPORT', 25: 'FLOW_CTRL', 26: 'NIL', 27: 'FUN', 28: 'VAR_NAME', 29: 'SCOPE', 30: 'RETURN', 31: 'LSQB', 32: 'SIGNED_FLOAT', 33: 'BANG', 34: 'HEX_INT', 35: 'RPAR', 36: '___stmt_plus_0', 37: 'FINALLY', 38: 'ELIF', 39: 'NEW', 40: 'ELSE', 41: 'CATCH', 42: 'RSQB', 43: 'expr', 44: 'scope_name', 45: '_rvalue', 46: 'member', 47: 'do_while', 48: 'shc_e', 49: 'lambda', 50: '_dot_name', 51: '_stmts', 52: 'space', 53: 'product', 54: '_pslice', 55: 'in_e', 56: 'function', 57: 'assignment', 58: '_scope_no_glob', 59: 'try', 60: 'log_e', 61: 'add_e', 62: 'code_block', 63: 'if', 64: 'cat_e', 65: 'cmp_e', 66: 'enum', 67: 'const', 68: 'for', 69: 'xstring', 70: '_definition', 71: 'construct', 72: 'dict', 73: 'return', 74: 'import', 75: 'class', 76: 'while', 77: 'exp_e', 78: '_space_name', 79: 'neg_e', 80: 'raise', 81: 'list', 82: 'op_assign', 83: 'fun_call', 84: 'silent_expr', 85: 'ternary_if', 86: 'atom', 87: '_pscope_name', 88: '_pmember', 89: 'not_e', 90: 'arg_list', 91: '_arg_list_ndef', 92: 'fun_args', 93: 'typed_var', 94: 'var_args_list', 95: 'STAR', 96: 'OR', 97: '__ANON_0', 98: '__ANON_1', 99: 'QMARK', 100: 'AND', 101: '__ANON_8', 102: '_ifel', 103: 'else', 104: '___ifel_plus_1', 105: 'elif', 106: 'DOT', 107: 'LESSTHAN', 108: '__ANON_4', 109: '__ANON_3', 110: '__ANON_2', 111: '__ANON_5', 112: 'SLASH', 113: 'CIRCUMFLEX', 114: 'EQUAL', 115: 'PERCENT', 116: 'IN', 117: 'MORETHAN', 118: 'PLUS', 119: '__ANON_6', 120: '__ANON_7', 121: 'ASSIGN_OP', 122: '_stmt', 123: 'INTERNAL', 124: 'fun_code_block', 125: 'space_list', 126: '_space_no_glob', 127: '_pspace_name', 128: 'list_assig', 129: '_list_vals', 130: 'AS', 131: 'var_list', 132: '_class_code_block', 133: 'constructor', 134: '_clstmts', 135: '_clstmt', 136: '_enum_name_list', 137: '_pspace_scope', 138: 'space_scope', 139: 'catch', 140: '__try_plus_2', 141: 'arg_list_call_exp', 142: 'arg_list_call_v', 143: 'fun_call_args', 144: 'type_list', 145: 'finally', 146: 'FUN_OP', 147: '_dict_val_list', 148: 'ESCAPED_STRING', 149: 'start', 150: '_type_list_val', 151: '_list_space_scope'}, 'states': {0: {0: (0, 291), 1: (0, 320)}, 1: {2: (0, 22), 3: (0, 300)}, 2: {4: (0, 185)}, 3: {3: (0, 300), 5: (1, {'@': 74}), 6: (1, {'@': 74}), 7: (1, {'@': 74}), 8: (1, {'@': 74}), 9: (1, {'@': 74}), 10: (1, {'@': 74}), 11: (1, {'@': 74}), 12: (1, {'@': 74}), 13: (1, {'@': 74}), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 16: (1, {'@': 74}), 17: (1, {'@': 74}), 18: (1, {'@': 74}), 19: (1, {'@': 74}), 20: (1, {'@': 74}), 21: (1, {'@': 74}), 22: (1, {'@': 74}), 23: (1, {'@': 74}), 24: (1, {'@': 74}), 25: (1, {'@': 74}), 26: (1, {'@': 74}), 27: (1, {'@': 74}), 28: (1, {'@': 74}), 29: (1, {'@': 74}), 30: (1, {'@': 74}), 31: (1, {'@': 74}), 4: (1, {'@': 74}), 32: (1, {'@': 74}), 33: (1, {'@': 74}), 34: (1, {'@': 74})}, 4: {35: (0, 587)}, 5: {36: (0, 290), 3: (0, 534), 5: (1, {'@': 335}), 37: (1, {'@': 335}), 38: (1, {'@': 335}), 6: (1, {'@': 335}), 39: (1, {'@': 335}), 7: (1, {'@': 335}), 8: (1, {'@': 335}), 9: (1, {'@': 335}), 10: (1, {'@': 335}), 11: (1, {'@': 335}), 12: (1, {'@': 335}), 13: (1, {'@': 335}), 14: (1, {'@': 335}), 15: (1, {'@': 335}), 16: (1, {'@': 335}), 17: (1, {'@': 335}), 18: (1, {'@': 335}), 19: (1, {'@': 335}), 20: (1, {'@': 335}), 21: (1, {'@': 335}), 40: (1, {'@': 335}), 22: (1, {'@': 335}), 23: (1, {'@': 335}), 24: (1, {'@': 335}), 25: (1, {'@': 335}), 26: (1, {'@': 335}), 27: (1, {'@': 335}), 28: (1, {'@': 335}), 29: (1, {'@': 335}), 30: (1, {'@': 335}), 2: (1, {'@': 335}), 31: (1, {'@': 335}), 4: (1, {'@': 335}), 41: (1, {'@': 335}), 32: (1, {'@': 335}), 33: (1, {'@': 335}), 34: (1, {'@': 335})}, 6: {1: (0, 440), 42: (0, 220)}, 7: {3: (0, 300), 5: (1, {'@': 344}), 37: (1, {'@': 344}), 38: (1, {'@': 344}), 6: (1, {'@': 344}), 39: (1, {'@': 344}), 7: (1, {'@': 344}), 8: (1, {'@': 344}), 9: (1, {'@': 344}), 10: (1, {'@': 344}), 11: (1, {'@': 344}), 12: (1, {'@': 344}), 13: (1, {'@': 344}), 14: (1, {'@': 344}), 15: (1, {'@': 344}), 16: (1, {'@': 344}), 17: (1, {'@': 344}), 18: (1, {'@': 344}), 19: (1, {'@': 344}), 20: (1, {'@': 344}), 21: (1, {'@': 344}), 40: (1, {'@': 344}), 22: (1, {'@': 344}), 23: (1, {'@': 344}), 24: (1, {'@': 344}), 25: (1, {'@': 344}), 26: (1, {'@': 344}), 27: (1, {'@': 344}), 28: (1, {'@': 344}), 29: (1, {'@': 344}), 30: (1, {'@': 344}), 2: (1, {'@': 344}), 31: (1, {'@': 344}), 4: (1, {'@': 344}), 41: (1, {'@': 344}), 32: (1, {'@': 344}), 33: (1, {'@': 344}), 34: (1, {'@': 344})}, 8: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 51: (0, 109), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 62: (0, 147), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 9: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 62: (0, 32), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 51: (0, 56), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 10: {3: (0, 300), 5: (1, {'@': 102}), 39: (1, {'@': 102}), 7: (1, {'@': 102}), 8: (1, {'@': 102}), 9: (1, {'@': 102}), 10: (1, {'@': 102}), 11: (1, {'@': 102}), 12: (1, {'@': 102}), 13: (1, {'@': 102}), 14: (1, {'@': 102}), 15: (1, {'@': 102}), 16: (1, {'@': 102}), 17: (1, {'@': 102}), 18: (1, {'@': 102}), 19: (1, {'@': 102}), 20: (1, {'@': 102}), 21: (1, {'@': 102}), 22: (1, {'@': 102}), 23: (1, {'@': 102}), 24: (1, {'@': 102}), 25: (1, {'@': 102}), 26: (1, {'@': 102}), 27: (1, {'@': 102}), 28: (1, {'@': 102}), 29: (1, {'@': 102}), 30: (1, {'@': 102}), 2: (1, {'@': 102}), 31: (1, {'@': 102}), 4: (1, {'@': 102}), 32: (1, {'@': 102}), 33: (1, {'@': 102}), 34: (1, {'@': 102})}, 11: {5: (1, {'@': 314}), 37: (1, {'@': 314}), 38: (1, {'@': 314}), 6: (1, {'@': 314}), 39: (1, {'@': 314}), 7: (1, {'@': 314}), 8: (1, {'@': 314}), 9: (1, {'@': 314}), 10: (1, {'@': 314}), 11: (1, {'@': 314}), 12: (1, {'@': 314}), 13: (1, {'@': 314}), 14: (1, {'@': 314}), 15: (1, {'@': 314}), 16: (1, {'@': 314}), 3: (1, {'@': 314}), 17: (1, {'@': 314}), 18: (1, {'@': 314}), 19: (1, {'@': 314}), 20: (1, {'@': 314}), 21: (1, {'@': 314}), 40: (1, {'@': 314}), 22: (1, {'@': 314}), 23: (1, {'@': 314}), 24: (1, {'@': 314}), 25: (1, {'@': 314}), 26: (1, {'@': 314}), 27: (1, {'@': 314}), 28: (1, {'@': 314}), 29: (1, {'@': 314}), 30: (1, {'@': 314}), 2: (1, {'@': 314}), 31: (1, {'@': 314}), 4: (1, {'@': 314}), 41: (1, {'@': 314}), 32: (1, {'@': 314}), 33: (1, {'@': 314}), 34: (1, {'@': 314})}, 12: {5: (1, {'@': 294}), 37: (1, {'@': 294}), 38: (1, {'@': 294}), 6: (1, {'@': 294}), 39: (1, {'@': 294}), 7: (1, {'@': 294}), 8: (1, {'@': 294}), 9: (1, {'@': 294}), 10: (1, {'@': 294}), 11: (1, {'@': 294}), 12: (1, {'@': 294}), 13: (1, {'@': 294}), 14: (1, {'@': 294}), 15: (1, {'@': 294}), 16: (1, {'@': 294}), 3: (1, {'@': 294}), 17: (1, {'@': 294}), 18: (1, {'@': 294}), 19: (1, {'@': 294}), 20: (1, {'@': 294}), 21: (1, {'@': 294}), 40: (1, {'@': 294}), 22: (1, {'@': 294}), 23: (1, {'@': 294}), 24: (1, {'@': 294}), 25: (1, {'@': 294}), 26: (1, {'@': 294}), 27: (1, {'@': 294}), 28: (1, {'@': 294}), 29: (1, {'@': 294}), 30: (1, {'@': 294}), 2: (1, {'@': 294}), 31: (1, {'@': 294}), 4: (1, {'@': 294}), 41: (1, {'@': 294}), 32: (1, {'@': 294}), 33: (1, {'@': 294}), 34: (1, {'@': 294})}, 13: {36: (0, 144), 3: (0, 534), 5: (1, {'@': 343}), 37: (1, {'@': 343}), 38: (1, {'@': 343}), 6: (1, {'@': 343}), 39: (1, {'@': 343}), 7: (1, {'@': 343}), 8: (1, {'@': 343}), 9: (1, {'@': 343}), 10: (1, {'@': 343}), 11: (1, {'@': 343}), 12: (1, {'@': 343}), 13: (1, {'@': 343}), 14: (1, {'@': 343}), 15: (1, {'@': 343}), 16: (1, {'@': 343}), 17: (1, {'@': 343}), 18: (1, {'@': 343}), 19: (1, {'@': 343}), 20: (1, {'@': 343}), 21: (1, {'@': 343}), 40: (1, {'@': 343}), 22: (1, {'@': 343}), 23: (1, {'@': 343}), 24: (1, {'@': 343}), 25: (1, {'@': 343}), 26: (1, {'@': 343}), 27: (1, {'@': 343}), 28: (1, {'@': 343}), 29: (1, {'@': 343}), 30: (1, {'@': 343}), 2: (1, {'@': 343}), 31: (1, {'@': 343}), 4: (1, {'@': 343}), 41: (1, {'@': 343}), 32: (1, {'@': 343}), 33: (1, {'@': 343}), 34: (1, {'@': 343})}, 14: {3: (0, 534), 36: (0, 633), 5: (1, {'@': 82}), 37: (1, {'@': 82}), 38: (1, {'@': 82}), 6: (1, {'@': 82}), 39: (1, {'@': 82}), 7: (1, {'@': 82}), 8: (1, {'@': 82}), 9: (1, {'@': 82}), 10: (1, {'@': 82}), 11: (1, {'@': 82}), 12: (1, {'@': 82}), 13: (1, {'@': 82}), 14: (1, {'@': 82}), 15: (1, {'@': 82}), 16: (1, {'@': 82}), 17: (1, {'@': 82}), 18: (1, {'@': 82}), 19: (1, {'@': 82}), 20: (1, {'@': 82}), 21: (1, {'@': 82}), 40: (1, {'@': 82}), 22: (1, {'@': 82}), 23: (1, {'@': 82}), 24: (1, {'@': 82}), 25: (1, {'@': 82}), 26: (1, {'@': 82}), 27: (1, {'@': 82}), 28: (1, {'@': 82}), 29: (1, {'@': 82}), 30: (1, {'@': 82}), 2: (1, {'@': 82}), 31: (1, {'@': 82}), 4: (1, {'@': 82}), 41: (1, {'@': 82}), 32: (1, {'@': 82}), 33: (1, {'@': 82}), 34: (1, {'@': 82})}, 15: {43: (0, 341), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 16: {3: (0, 300), 5: (1, {'@': 98}), 39: (1, {'@': 98}), 7: (1, {'@': 98}), 8: (1, {'@': 98}), 9: (1, {'@': 98}), 10: (1, {'@': 98}), 11: (1, {'@': 98}), 12: (1, {'@': 98}), 13: (1, {'@': 98}), 14: (1, {'@': 98}), 15: (1, {'@': 98}), 16: (1, {'@': 98}), 17: (1, {'@': 98}), 18: (1, {'@': 98}), 19: (1, {'@': 98}), 20: (1, {'@': 98}), 21: (1, {'@': 98}), 22: (1, {'@': 98}), 23: (1, {'@': 98}), 24: (1, {'@': 98}), 25: (1, {'@': 98}), 26: (1, {'@': 98}), 27: (1, {'@': 98}), 28: (1, {'@': 98}), 29: (1, {'@': 98}), 30: (1, {'@': 98}), 2: (1, {'@': 98}), 31: (1, {'@': 98}), 4: (1, {'@': 98}), 32: (1, {'@': 98}), 33: (1, {'@': 98}), 34: (1, {'@': 98})}, 17: {3: (0, 534), 36: (0, 62), 5: (1, {'@': 337}), 37: (1, {'@': 337}), 38: (1, {'@': 337}), 6: (1, {'@': 337}), 39: (1, {'@': 337}), 7: (1, {'@': 337}), 8: (1, {'@': 337}), 9: (1, {'@': 337}), 10: (1, {'@': 337}), 11: (1, {'@': 337}), 12: (1, {'@': 337}), 13: (1, {'@': 337}), 14: (1, {'@': 337}), 15: (1, {'@': 337}), 16: (1, {'@': 337}), 17: (1, {'@': 337}), 18: (1, {'@': 337}), 19: (1, {'@': 337}), 20: (1, {'@': 337}), 21: (1, {'@': 337}), 40: (1, {'@': 337}), 22: (1, {'@': 337}), 23: (1, {'@': 337}), 24: (1, {'@': 337}), 25: (1, {'@': 337}), 26: (1, {'@': 337}), 27: (1, {'@': 337}), 28: (1, {'@': 337}), 29: (1, {'@': 337}), 30: (1, {'@': 337}), 2: (1, {'@': 337}), 31: (1, {'@': 337}), 4: (1, {'@': 337}), 41: (1, {'@': 337}), 32: (1, {'@': 337}), 33: (1, {'@': 337}), 34: (1, {'@': 337})}, 18: {5: (1, {'@': 363}), 37: (1, {'@': 363}), 38: (1, {'@': 363}), 6: (1, {'@': 363}), 39: (1, {'@': 363}), 7: (1, {'@': 363}), 8: (1, {'@': 363}), 9: (1, {'@': 363}), 10: (1, {'@': 363}), 11: (1, {'@': 363}), 12: (1, {'@': 363}), 13: (1, {'@': 363}), 14: (1, {'@': 363}), 15: (1, {'@': 363}), 16: (1, {'@': 363}), 3: (1, {'@': 363}), 17: (1, {'@': 363}), 18: (1, {'@': 363}), 19: (1, {'@': 363}), 20: (1, {'@': 363}), 21: (1, {'@': 363}), 40: (1, {'@': 363}), 22: (1, {'@': 363}), 23: (1, {'@': 363}), 24: (1, {'@': 363}), 25: (1, {'@': 363}), 26: (1, {'@': 363}), 27: (1, {'@': 363}), 28: (1, {'@': 363}), 29: (1, {'@': 363}), 30: (1, {'@': 363}), 2: (1, {'@': 363}), 31: (1, {'@': 363}), 4: (1, {'@': 363}), 41: (1, {'@': 363}), 32: (1, {'@': 363}), 33: (1, {'@': 363}), 34: (1, {'@': 363})}, 19: {35: (0, 143)}, 20: {3: (0, 300), 5: (1, {'@': 95}), 39: (1, {'@': 95}), 7: (1, {'@': 95}), 8: (1, {'@': 95}), 9: (1, {'@': 95}), 10: (1, {'@': 95}), 11: (1, {'@': 95}), 12: (1, {'@': 95}), 13: (1, {'@': 95}), 14: (1, {'@': 95}), 15: (1, {'@': 95}), 16: (1, {'@': 95}), 17: (1, {'@': 95}), 18: (1, {'@': 95}), 19: (1, {'@': 95}), 20: (1, {'@': 95}), 21: (1, {'@': 95}), 22: (1, {'@': 95}), 23: (1, {'@': 95}), 24: (1, {'@': 95}), 25: (1, {'@': 95}), 26: (1, {'@': 95}), 27: (1, {'@': 95}), 28: (1, {'@': 95}), 29: (1, {'@': 95}), 30: (1, {'@': 95}), 2: (1, {'@': 95}), 31: (1, {'@': 95}), 4: (1, {'@': 95}), 32: (1, {'@': 95}), 33: (1, {'@': 95}), 34: (1, {'@': 95})}, 21: {5: (1, {'@': 370}), 37: (1, {'@': 370}), 38: (1, {'@': 370}), 6: (1, {'@': 370}), 39: (1, {'@': 370}), 7: (1, {'@': 370}), 8: (1, {'@': 370}), 9: (1, {'@': 370}), 10: (1, {'@': 370}), 11: (1, {'@': 370}), 12: (1, {'@': 370}), 13: (1, {'@': 370}), 14: (1, {'@': 370}), 15: (1, {'@': 370}), 16: (1, {'@': 370}), 3: (1, {'@': 370}), 17: (1, {'@': 370}), 18: (1, {'@': 370}), 19: (1, {'@': 370}), 20: (1, {'@': 370}), 21: (1, {'@': 370}), 40: (1, {'@': 370}), 22: (1, {'@': 370}), 23: (1, {'@': 370}), 24: (1, {'@': 370}), 25: (1, {'@': 370}), 26: (1, {'@': 370}), 27: (1, {'@': 370}), 28: (1, {'@': 370}), 29: (1, {'@': 370}), 30: (1, {'@': 370}), 2: (1, {'@': 370}), 31: (1, {'@': 370}), 4: (1, {'@': 370}), 41: (1, {'@': 370}), 32: (1, {'@': 370}), 33: (1, {'@': 370}), 34: (1, {'@': 370})}, 22: {5: (1, {'@': 368}), 37: (1, {'@': 368}), 38: (1, {'@': 368}), 6: (1, {'@': 368}), 39: (1, {'@': 368}), 7: (1, {'@': 368}), 8: (1, {'@': 368}), 9: (1, {'@': 368}), 10: (1, {'@': 368}), 11: (1, {'@': 368}), 12: (1, {'@': 368}), 13: (1, {'@': 368}), 14: (1, {'@': 368}), 15: (1, {'@': 368}), 16: (1, {'@': 368}), 3: (1, {'@': 368}), 17: (1, {'@': 368}), 18: (1, {'@': 368}), 19: (1, {'@': 368}), 20: (1, {'@': 368}), 21: (1, {'@': 368}), 40: (1, {'@': 368}), 22: (1, {'@': 368}), 23: (1, {'@': 368}), 24: (1, {'@': 368}), 25: (1, {'@': 368}), 26: (1, {'@': 368}), 27: (1, {'@': 368}), 28: (1, {'@': 368}), 29: (1, {'@': 368}), 30: (1, {'@': 368}), 2: (1, {'@': 368}), 31: (1, {'@': 368}), 4: (1, {'@': 368}), 41: (1, {'@': 368}), 32: (1, {'@': 368}), 33: (1, {'@': 368}), 34: (1, {'@': 368})}, 23: {7: (0, 116), 43: (0, 228), 36: (0, 583), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 51: (0, 387), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 62: (0, 530), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 24: {3: (0, 300), 2: (0, 296), 5: (1, {'@': 74}), 7: (1, {'@': 74}), 8: (1, {'@': 74}), 9: (1, {'@': 74}), 10: (1, {'@': 74}), 11: (1, {'@': 74}), 12: (1, {'@': 74}), 13: (1, {'@': 74}), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 16: (1, {'@': 74}), 17: (1, {'@': 74}), 18: (1, {'@': 74}), 19: (1, {'@': 74}), 20: (1, {'@': 74}), 21: (1, {'@': 74}), 22: (1, {'@': 74}), 23: (1, {'@': 74}), 24: (1, {'@': 74}), 25: (1, {'@': 74}), 26: (1, {'@': 74}), 27: (1, {'@': 74}), 28: (1, {'@': 74}), 29: (1, {'@': 74}), 30: (1, {'@': 74}), 31: (1, {'@': 74}), 4: (1, {'@': 74}), 32: (1, {'@': 74}), 33: (1, {'@': 74}), 34: (1, {'@': 74})}, 25: {28: (0, 616), 90: (0, 575), 91: (0, 568), 92: (0, 581), 93: (0, 606), 94: (0, 621), 95: (0, 473), 35: (1, {'@': 237})}, 26: {3: (0, 300), 5: (1, {'@': 104}), 39: (1, {'@': 104}), 7: (1, {'@': 104}), 8: (1, {'@': 104}), 9: (1, {'@': 104}), 10: (1, {'@': 104}), 11: (1, {'@': 104}), 12: (1, {'@': 104}), 13: (1, {'@': 104}), 14: (1, {'@': 104}), 15: (1, {'@': 104}), 16: (1, {'@': 104}), 17: (1, {'@': 104}), 18: (1, {'@': 104}), 19: (1, {'@': 104}), 20: (1, {'@': 104}), 21: (1, {'@': 104}), 22: (1, {'@': 104}), 23: (1, {'@': 104}), 24: (1, {'@': 104}), 25: (1, {'@': 104}), 26: (1, {'@': 104}), 27: (1, {'@': 104}), 28: (1, {'@': 104}), 29: (1, {'@': 104}), 30: (1, {'@': 104}), 2: (1, {'@': 104}), 31: (1, {'@': 104}), 4: (1, {'@': 104}), 32: (1, {'@': 104}), 33: (1, {'@': 104}), 34: (1, {'@': 104})}, 27: {96: (1, {'@': 133}), 97: (1, {'@': 133}), 3: (1, {'@': 133}), 31: (1, {'@': 133}), 98: (1, {'@': 133}), 99: (1, {'@': 133}), 100: (1, {'@': 133}), 0: (1, {'@': 133}), 101: (1, {'@': 133}), 16: (1, {'@': 133}), 42: (1, {'@': 133}), 1: (1, {'@': 133}), 35: (1, {'@': 133}), 2: (1, {'@': 133})}, 28: {38: (0, 524), 102: (0, 472), 36: (0, 397), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 534), 105: (0, 644), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 29: {5: (1, {'@': 369}), 37: (1, {'@': 369}), 38: (1, {'@': 369}), 6: (1, {'@': 369}), 39: (1, {'@': 369}), 7: (1, {'@': 369}), 8: (1, {'@': 369}), 9: (1, {'@': 369}), 10: (1, {'@': 369}), 11: (1, {'@': 369}), 12: (1, {'@': 369}), 13: (1, {'@': 369}), 14: (1, {'@': 369}), 15: (1, {'@': 369}), 16: (1, {'@': 369}), 3: (1, {'@': 369}), 17: (1, {'@': 369}), 18: (1, {'@': 369}), 19: (1, {'@': 369}), 20: (1, {'@': 369}), 21: (1, {'@': 369}), 40: (1, {'@': 369}), 22: (1, {'@': 369}), 23: (1, {'@': 369}), 24: (1, {'@': 369}), 25: (1, {'@': 369}), 26: (1, {'@': 369}), 27: (1, {'@': 369}), 28: (1, {'@': 369}), 29: (1, {'@': 369}), 30: (1, {'@': 369}), 2: (1, {'@': 369}), 31: (1, {'@': 369}), 4: (1, {'@': 369}), 41: (1, {'@': 369}), 32: (1, {'@': 369}), 33: (1, {'@': 369}), 34: (1, {'@': 369})}, 30: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 51: (0, 432), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 2: (0, 171), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 31: {3: (0, 300), 5: (1, {'@': 354}), 37: (1, {'@': 354}), 38: (1, {'@': 354}), 6: (1, {'@': 354}), 39: (1, {'@': 354}), 7: (1, {'@': 354}), 8: (1, {'@': 354}), 9: (1, {'@': 354}), 10: (1, {'@': 354}), 11: (1, {'@': 354}), 12: (1, {'@': 354}), 13: (1, {'@': 354}), 14: (1, {'@': 354}), 15: (1, {'@': 354}), 16: (1, {'@': 354}), 17: (1, {'@': 354}), 18: (1, {'@': 354}), 19: (1, {'@': 354}), 20: (1, {'@': 354}), 21: (1, {'@': 354}), 40: (1, {'@': 354}), 22: (1, {'@': 354}), 23: (1, {'@': 354}), 24: (1, {'@': 354}), 25: (1, {'@': 354}), 26: (1, {'@': 354}), 27: (1, {'@': 354}), 28: (1, {'@': 354}), 29: (1, {'@': 354}), 30: (1, {'@': 354}), 2: (1, {'@': 354}), 31: (1, {'@': 354}), 4: (1, {'@': 354}), 41: (1, {'@': 354}), 32: (1, {'@': 354}), 33: (1, {'@': 354}), 34: (1, {'@': 354})}, 32: {5: (1, {'@': 292}), 37: (1, {'@': 292}), 38: (1, {'@': 292}), 6: (1, {'@': 292}), 39: (1, {'@': 292}), 7: (1, {'@': 292}), 8: (1, {'@': 292}), 9: (1, {'@': 292}), 10: (1, {'@': 292}), 11: (1, {'@': 292}), 12: (1, {'@': 292}), 13: (1, {'@': 292}), 14: (1, {'@': 292}), 15: (1, {'@': 292}), 16: (1, {'@': 292}), 3: (1, {'@': 292}), 17: (1, {'@': 292}), 18: (1, {'@': 292}), 19: (1, {'@': 292}), 20: (1, {'@': 292}), 21: (1, {'@': 292}), 40: (1, {'@': 292}), 22: (1, {'@': 292}), 23: (1, {'@': 292}), 24: (1, {'@': 292}), 25: (1, {'@': 292}), 26: (1, {'@': 292}), 27: (1, {'@': 292}), 28: (1, {'@': 292}), 29: (1, {'@': 292}), 30: (1, {'@': 292}), 2: (1, {'@': 292}), 31: (1, {'@': 292}), 4: (1, {'@': 292}), 41: (1, {'@': 292}), 32: (1, {'@': 292}), 33: (1, {'@': 292}), 34: (1, {'@': 292})}, 33: {3: (0, 534), 36: (0, 7), 5: (1, {'@': 345}), 37: (1, {'@': 345}), 38: (1, {'@': 345}), 6: (1, {'@': 345}), 39: (1, {'@': 345}), 7: (1, {'@': 345}), 8: (1, {'@': 345}), 9: (1, {'@': 345}), 10: (1, {'@': 345}), 11: (1, {'@': 345}), 12: (1, {'@': 345}), 13: (1, {'@': 345}), 14: (1, {'@': 345}), 15: (1, {'@': 345}), 16: (1, {'@': 345}), 17: (1, {'@': 345}), 18: (1, {'@': 345}), 19: (1, {'@': 345}), 20: (1, {'@': 345}), 21: (1, {'@': 345}), 40: (1, {'@': 345}), 22: (1, {'@': 345}), 23: (1, {'@': 345}), 24: (1, {'@': 345}), 25: (1, {'@': 345}), 26: (1, {'@': 345}), 27: (1, {'@': 345}), 28: (1, {'@': 345}), 29: (1, {'@': 345}), 30: (1, {'@': 345}), 2: (1, {'@': 345}), 31: (1, {'@': 345}), 4: (1, {'@': 345}), 41: (1, {'@': 345}), 32: (1, {'@': 345}), 33: (1, {'@': 345}), 34: (1, {'@': 345})}, 34: {3: (0, 300), 5: (1, {'@': 340}), 37: (1, {'@': 340}), 38: (1, {'@': 340}), 6: (1, {'@': 340}), 39: (1, {'@': 340}), 7: (1, {'@': 340}), 8: (1, {'@': 340}), 9: (1, {'@': 340}), 10: (1, {'@': 340}), 11: (1, {'@': 340}), 12: (1, {'@': 340}), 13: (1, {'@': 340}), 14: (1, {'@': 340}), 15: (1, {'@': 340}), 16: (1, {'@': 340}), 17: (1, {'@': 340}), 18: (1, {'@': 340}), 19: (1, {'@': 340}), 20: (1, {'@': 340}), 21: (1, {'@': 340}), 40: (1, {'@': 340}), 22: (1, {'@': 340}), 23: (1, {'@': 340}), 24: (1, {'@': 340}), 25: (1, {'@': 340}), 26: (1, {'@': 340}), 27: (1, {'@': 340}), 28: (1, {'@': 340}), 29: (1, {'@': 340}), 30: (1, {'@': 340}), 2: (1, {'@': 340}), 31: (1, {'@': 340}), 4: (1, {'@': 340}), 41: (1, {'@': 340}), 32: (1, {'@': 340}), 33: (1, {'@': 340}), 34: (1, {'@': 340})}, 35: {29: (0, 475), 106: (0, 371), 107: (1, {'@': 398}), 3: (1, {'@': 398}), 99: (1, {'@': 398}), 19: (1, {'@': 398}), 108: (1, {'@': 398}), 100: (1, {'@': 398}), 96: (1, {'@': 398}), 97: (1, {'@': 398}), 109: (1, {'@': 398}), 110: (1, {'@': 398}), 111: (1, {'@': 398}), 112: (1, {'@': 398}), 113: (1, {'@': 398}), 114: (1, {'@': 398}), 115: (1, {'@': 398}), 116: (1, {'@': 398}), 95: (1, {'@': 398}), 117: (1, {'@': 398}), 31: (1, {'@': 398}), 98: (1, {'@': 398}), 4: (1, {'@': 398}), 118: (1, {'@': 398}), 119: (1, {'@': 398}), 120: (1, {'@': 398}), 121: (1, {'@': 398}), 0: (1, {'@': 398}), 42: (1, {'@': 398}), 1: (1, {'@': 398}), 35: (1, {'@': 398}), 101: (1, {'@': 398}), 2: (1, {'@': 398}), 16: (1, {'@': 398})}, 36: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 28: (0, 349), 79: (0, 227), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 26: (0, 399), 86: (0, 436), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 17: (0, 409)}, 37: {3: (0, 300), 5: (1, {'@': 84}), 37: (1, {'@': 84}), 38: (1, {'@': 84}), 6: (1, {'@': 84}), 39: (1, {'@': 84}), 7: (1, {'@': 84}), 8: (1, {'@': 84}), 9: (1, {'@': 84}), 10: (1, {'@': 84}), 11: (1, {'@': 84}), 12: (1, {'@': 84}), 13: (1, {'@': 84}), 14: (1, {'@': 84}), 15: (1, {'@': 84}), 16: (1, {'@': 84}), 17: (1, {'@': 84}), 18: (1, {'@': 84}), 19: (1, {'@': 84}), 20: (1, {'@': 84}), 21: (1, {'@': 84}), 40: (1, {'@': 84}), 22: (1, {'@': 84}), 23: (1, {'@': 84}), 24: (1, {'@': 84}), 25: (1, {'@': 84}), 26: (1, {'@': 84}), 27: (1, {'@': 84}), 28: (1, {'@': 84}), 29: (1, {'@': 84}), 30: (1, {'@': 84}), 2: (1, {'@': 84}), 31: (1, {'@': 84}), 4: (1, {'@': 84}), 41: (1, {'@': 84}), 32: (1, {'@': 84}), 33: (1, {'@': 84}), 34: (1, {'@': 84})}, 38: {31: (0, 281), 99: (0, 453), 35: (0, 76)}, 39: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 588), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 65: (0, 497), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 40: {43: (0, 336), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 41: {5: (1, {'@': 386}), 37: (1, {'@': 386}), 38: (1, {'@': 386}), 6: (1, {'@': 386}), 39: (1, {'@': 386}), 7: (1, {'@': 386}), 8: (1, {'@': 386}), 9: (1, {'@': 386}), 10: (1, {'@': 386}), 11: (1, {'@': 386}), 12: (1, {'@': 386}), 13: (1, {'@': 386}), 14: (1, {'@': 386}), 15: (1, {'@': 386}), 16: (1, {'@': 386}), 3: (1, {'@': 386}), 17: (1, {'@': 386}), 18: (1, {'@': 386}), 19: (1, {'@': 386}), 20: (1, {'@': 386}), 21: (1, {'@': 386}), 40: (1, {'@': 386}), 22: (1, {'@': 386}), 23: (1, {'@': 386}), 24: (1, {'@': 386}), 25: (1, {'@': 386}), 26: (1, {'@': 386}), 27: (1, {'@': 386}), 28: (1, {'@': 386}), 29: (1, {'@': 386}), 30: (1, {'@': 386}), 2: (1, {'@': 386}), 31: (1, {'@': 386}), 4: (1, {'@': 386}), 41: (1, {'@': 386}), 32: (1, {'@': 386}), 33: (1, {'@': 386}), 34: (1, {'@': 386})}, 42: {3: (0, 300), 5: (1, {'@': 350}), 37: (1, {'@': 350}), 38: (1, {'@': 350}), 6: (1, {'@': 350}), 39: (1, {'@': 350}), 7: (1, {'@': 350}), 8: (1, {'@': 350}), 9: (1, {'@': 350}), 10: (1, {'@': 350}), 11: (1, {'@': 350}), 12: (1, {'@': 350}), 13: (1, {'@': 350}), 14: (1, {'@': 350}), 15: (1, {'@': 350}), 16: (1, {'@': 350}), 17: (1, {'@': 350}), 18: (1, {'@': 350}), 19: (1, {'@': 350}), 20: (1, {'@': 350}), 21: (1, {'@': 350}), 40: (1, {'@': 350}), 22: (1, {'@': 350}), 23: (1, {'@': 350}), 24: (1, {'@': 350}), 25: (1, {'@': 350}), 26: (1, {'@': 350}), 27: (1, {'@': 350}), 28: (1, {'@': 350}), 29: (1, {'@': 350}), 30: (1, {'@': 350}), 2: (1, {'@': 350}), 31: (1, {'@': 350}), 4: (1, {'@': 350}), 41: (1, {'@': 350}), 32: (1, {'@': 350}), 33: (1, {'@': 350}), 34: (1, {'@': 350})}, 43: {31: (0, 281), 99: (0, 453), 1: (1, {'@': 186}), 42: (1, {'@': 186})}, 44: {1: (0, 561), 3: (1, {'@': 379}), 2: (1, {'@': 379})}, 45: {31: (0, 281), 35: (0, 342), 99: (0, 453)}, 46: {3: (0, 534), 36: (0, 99), 5: (1, {'@': 339}), 37: (1, {'@': 339}), 38: (1, {'@': 339}), 6: (1, {'@': 339}), 39: (1, {'@': 339}), 7: (1, {'@': 339}), 8: (1, {'@': 339}), 9: (1, {'@': 339}), 10: (1, {'@': 339}), 11: (1, {'@': 339}), 12: (1, {'@': 339}), 13: (1, {'@': 339}), 14: (1, {'@': 339}), 15: (1, {'@': 339}), 16: (1, {'@': 339}), 17: (1, {'@': 339}), 18: (1, {'@': 339}), 19: (1, {'@': 339}), 20: (1, {'@': 339}), 21: (1, {'@': 339}), 40: (1, {'@': 339}), 22: (1, {'@': 339}), 23: (1, {'@': 339}), 24: (1, {'@': 339}), 25: (1, {'@': 339}), 26: (1, {'@': 339}), 27: (1, {'@': 339}), 28: (1, {'@': 339}), 29: (1, {'@': 339}), 30: (1, {'@': 339}), 2: (1, {'@': 339}), 31: (1, {'@': 339}), 4: (1, {'@': 339}), 41: (1, {'@': 339}), 32: (1, {'@': 339}), 33: (1, {'@': 339}), 34: (1, {'@': 339})}, 47: {38: (0, 524), 40: (0, 447), 102: (0, 113), 103: (0, 619), 104: (0, 640), 3: (0, 300), 105: (0, 644), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 48: {29: (0, 475), 106: (0, 371), 35: (0, 139)}, 49: {36: (0, 261), 21: (0, 317), 3: (0, 534)}, 50: {3: (0, 300), 5: (1, {'@': 80}), 37: (1, {'@': 80}), 38: (1, {'@': 80}), 6: (1, {'@': 80}), 39: (1, {'@': 80}), 7: (1, {'@': 80}), 8: (1, {'@': 80}), 9: (1, {'@': 80}), 10: (1, {'@': 80}), 11: (1, {'@': 80}), 12: (1, {'@': 80}), 13: (1, {'@': 80}), 14: (1, {'@': 80}), 15: (1, {'@': 80}), 16: (1, {'@': 80}), 17: (1, {'@': 80}), 18: (1, {'@': 80}), 19: (1, {'@': 80}), 20: (1, {'@': 80}), 21: (1, {'@': 80}), 40: (1, {'@': 80}), 22: (1, {'@': 80}), 23: (1, {'@': 80}), 24: (1, {'@': 80}), 25: (1, {'@': 80}), 26: (1, {'@': 80}), 27: (1, {'@': 80}), 28: (1, {'@': 80}), 29: (1, {'@': 80}), 30: (1, {'@': 80}), 2: (1, {'@': 80}), 31: (1, {'@': 80}), 4: (1, {'@': 80}), 41: (1, {'@': 80}), 32: (1, {'@': 80}), 33: (1, {'@': 80}), 34: (1, {'@': 80})}, 51: {4: (0, 378)}, 52: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 86: (0, 419), 87: (0, 544), 78: (0, 413), 29: (0, 221), 17: (0, 409)}, 53: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 36: (0, 24), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 122: (0, 30), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 51: (0, 599), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503), 2: (1, {'@': 75})}, 54: {3: (1, {'@': 111}), 1: (1, {'@': 111})}, 55: {3: (1, {'@': 118}), 99: (1, {'@': 118}), 42: (1, {'@': 118}), 1: (1, {'@': 118}), 0: (1, {'@': 118}), 35: (1, {'@': 118}), 101: (1, {'@': 118}), 2: (1, {'@': 118}), 31: (1, {'@': 118}), 16: (1, {'@': 118})}, 56: {5: (1, {'@': 293}), 37: (1, {'@': 293}), 38: (1, {'@': 293}), 6: (1, {'@': 293}), 39: (1, {'@': 293}), 7: (1, {'@': 293}), 8: (1, {'@': 293}), 9: (1, {'@': 293}), 10: (1, {'@': 293}), 11: (1, {'@': 293}), 12: (1, {'@': 293}), 13: (1, {'@': 293}), 14: (1, {'@': 293}), 15: (1, {'@': 293}), 16: (1, {'@': 293}), 3: (1, {'@': 293}), 17: (1, {'@': 293}), 18: (1, {'@': 293}), 19: (1, {'@': 293}), 20: (1, {'@': 293}), 21: (1, {'@': 293}), 40: (1, {'@': 293}), 22: (1, {'@': 293}), 23: (1, {'@': 293}), 24: (1, {'@': 293}), 25: (1, {'@': 293}), 26: (1, {'@': 293}), 27: (1, {'@': 293}), 28: (1, {'@': 293}), 29: (1, {'@': 293}), 30: (1, {'@': 293}), 2: (1, {'@': 293}), 31: (1, {'@': 293}), 4: (1, {'@': 293}), 41: (1, {'@': 293}), 32: (1, {'@': 293}), 33: (1, {'@': 293}), 34: (1, {'@': 293})}, 57: {5: (1, {'@': 365}), 37: (1, {'@': 365}), 38: (1, {'@': 365}), 6: (1, {'@': 365}), 39: (1, {'@': 365}), 7: (1, {'@': 365}), 8: (1, {'@': 365}), 9: (1, {'@': 365}), 10: (1, {'@': 365}), 11: (1, {'@': 365}), 12: (1, {'@': 365}), 13: (1, {'@': 365}), 14: (1, {'@': 365}), 15: (1, {'@': 365}), 16: (1, {'@': 365}), 3: (1, {'@': 365}), 17: (1, {'@': 365}), 18: (1, {'@': 365}), 19: (1, {'@': 365}), 20: (1, {'@': 365}), 21: (1, {'@': 365}), 40: (1, {'@': 365}), 22: (1, {'@': 365}), 23: (1, {'@': 365}), 24: (1, {'@': 365}), 25: (1, {'@': 365}), 26: (1, {'@': 365}), 27: (1, {'@': 365}), 28: (1, {'@': 365}), 29: (1, {'@': 365}), 30: (1, {'@': 365}), 2: (1, {'@': 365}), 31: (1, {'@': 365}), 4: (1, {'@': 365}), 41: (1, {'@': 365}), 32: (1, {'@': 365}), 33: (1, {'@': 365}), 34: (1, {'@': 365})}, 58: {3: (0, 300), 40: (1, {'@': 286}), 38: (1, {'@': 286})}, 59: {62: (0, 160), 8: (0, 53), 3: (0, 300)}, 60: {3: (0, 300), 5: (1, {'@': 97}), 39: (1, {'@': 97}), 7: (1, {'@': 97}), 8: (1, {'@': 97}), 9: (1, {'@': 97}), 10: (1, {'@': 97}), 11: (1, {'@': 97}), 12: (1, {'@': 97}), 13: (1, {'@': 97}), 14: (1, {'@': 97}), 15: (1, {'@': 97}), 16: (1, {'@': 97}), 17: (1, {'@': 97}), 18: (1, {'@': 97}), 19: (1, {'@': 97}), 20: (1, {'@': 97}), 21: (1, {'@': 97}), 22: (1, {'@': 97}), 23: (1, {'@': 97}), 24: (1, {'@': 97}), 25: (1, {'@': 97}), 26: (1, {'@': 97}), 27: (1, {'@': 97}), 28: (1, {'@': 97}), 29: (1, {'@': 97}), 30: (1, {'@': 97}), 2: (1, {'@': 97}), 31: (1, {'@': 97}), 4: (1, {'@': 97}), 32: (1, {'@': 97}), 33: (1, {'@': 97}), 34: (1, {'@': 97})}, 61: {8: (0, 53), 62: (0, 85), 123: (0, 271), 124: (0, 66)}, 62: {3: (0, 300), 5: (1, {'@': 336}), 37: (1, {'@': 336}), 38: (1, {'@': 336}), 6: (1, {'@': 336}), 39: (1, {'@': 336}), 7: (1, {'@': 336}), 8: (1, {'@': 336}), 9: (1, {'@': 336}), 10: (1, {'@': 336}), 11: (1, {'@': 336}), 12: (1, {'@': 336}), 13: (1, {'@': 336}), 14: (1, {'@': 336}), 15: (1, {'@': 336}), 16: (1, {'@': 336}), 17: (1, {'@': 336}), 18: (1, {'@': 336}), 19: (1, {'@': 336}), 20: (1, {'@': 336}), 21: (1, {'@': 336}), 40: (1, {'@': 336}), 22: (1, {'@': 336}), 23: (1, {'@': 336}), 24: (1, {'@': 336}), 25: (1, {'@': 336}), 26: (1, {'@': 336}), 27: (1, {'@': 336}), 28: (1, {'@': 336}), 29: (1, {'@': 336}), 30: (1, {'@': 336}), 2: (1, {'@': 336}), 31: (1, {'@': 336}), 4: (1, {'@': 336}), 41: (1, {'@': 336}), 32: (1, {'@': 336}), 33: (1, {'@': 336}), 34: (1, {'@': 336})}, 63: {7: (0, 469), 125: (0, 476), 28: (0, 584), 4: (0, 491), 29: (0, 598), 126: (0, 501), 127: (0, 330)}, 64: {128: (0, 6), 28: (0, 137)}, 65: {5: (1, {'@': 295}), 37: (1, {'@': 295}), 38: (1, {'@': 295}), 6: (1, {'@': 295}), 39: (1, {'@': 295}), 7: (1, {'@': 295}), 8: (1, {'@': 295}), 9: (1, {'@': 295}), 10: (1, {'@': 295}), 11: (1, {'@': 295}), 12: (1, {'@': 295}), 13: (1, {'@': 295}), 14: (1, {'@': 295}), 15: (1, {'@': 295}), 16: (1, {'@': 295}), 3: (1, {'@': 295}), 17: (1, {'@': 295}), 18: (1, {'@': 295}), 19: (1, {'@': 295}), 20: (1, {'@': 295}), 21: (1, {'@': 295}), 40: (1, {'@': 295}), 22: (1, {'@': 295}), 23: (1, {'@': 295}), 24: (1, {'@': 295}), 25: (1, {'@': 295}), 26: (1, {'@': 295}), 27: (1, {'@': 295}), 28: (1, {'@': 295}), 29: (1, {'@': 295}), 30: (1, {'@': 295}), 2: (1, {'@': 295}), 31: (1, {'@': 295}), 4: (1, {'@': 295}), 41: (1, {'@': 295}), 32: (1, {'@': 295}), 33: (1, {'@': 295}), 34: (1, {'@': 295})}, 66: {5: (1, {'@': 228}), 39: (1, {'@': 228}), 7: (1, {'@': 228}), 8: (1, {'@': 228}), 9: (1, {'@': 228}), 10: (1, {'@': 228}), 11: (1, {'@': 228}), 12: (1, {'@': 228}), 13: (1, {'@': 228}), 14: (1, {'@': 228}), 15: (1, {'@': 228}), 16: (1, {'@': 228}), 3: (1, {'@': 228}), 17: (1, {'@': 228}), 18: (1, {'@': 228}), 19: (1, {'@': 228}), 20: (1, {'@': 228}), 21: (1, {'@': 228}), 22: (1, {'@': 228}), 23: (1, {'@': 228}), 24: (1, {'@': 228}), 25: (1, {'@': 228}), 26: (1, {'@': 228}), 27: (1, {'@': 228}), 28: (1, {'@': 228}), 29: (1, {'@': 228}), 30: (1, {'@': 228}), 2: (1, {'@': 228}), 31: (1, {'@': 228}), 4: (1, {'@': 228}), 32: (1, {'@': 228}), 33: (1, {'@': 228}), 34: (1, {'@': 228})}, 67: {5: (1, {'@': 387}), 37: (1, {'@': 387}), 38: (1, {'@': 387}), 6: (1, {'@': 387}), 39: (1, {'@': 387}), 7: (1, {'@': 387}), 8: (1, {'@': 387}), 9: (1, {'@': 387}), 10: (1, {'@': 387}), 11: (1, {'@': 387}), 12: (1, {'@': 387}), 13: (1, {'@': 387}), 14: (1, {'@': 387}), 15: (1, {'@': 387}), 16: (1, {'@': 387}), 3: (1, {'@': 387}), 17: (1, {'@': 387}), 18: (1, {'@': 387}), 19: (1, {'@': 387}), 20: (1, {'@': 387}), 21: (1, {'@': 387}), 40: (1, {'@': 387}), 22: (1, {'@': 387}), 23: (1, {'@': 387}), 24: (1, {'@': 387}), 25: (1, {'@': 387}), 26: (1, {'@': 387}), 27: (1, {'@': 387}), 28: (1, {'@': 387}), 29: (1, {'@': 387}), 30: (1, {'@': 387}), 2: (1, {'@': 387}), 31: (1, {'@': 387}), 4: (1, {'@': 387}), 41: (1, {'@': 387}), 32: (1, {'@': 387}), 33: (1, {'@': 387}), 34: (1, {'@': 387})}, 68: {43: (0, 495), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 49: (0, 586), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 129: (0, 332), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 42: (1, {'@': 184})}, 69: {29: (1, {'@': 114}), 1: (1, {'@': 114}), 3: (1, {'@': 114}), 35: (1, {'@': 114}), 130: (1, {'@': 114})}, 70: {92: (0, 110), 28: (0, 616), 90: (0, 575), 91: (0, 568), 93: (0, 606), 94: (0, 621), 95: (0, 473), 35: (1, {'@': 237})}, 71: {3: (0, 300), 5: (1, {'@': 100}), 39: (1, {'@': 100}), 7: (1, {'@': 100}), 8: (1, {'@': 100}), 9: (1, {'@': 100}), 10: (1, {'@': 100}), 11: (1, {'@': 100}), 12: (1, {'@': 100}), 13: (1, {'@': 100}), 14: (1, {'@': 100}), 15: (1, {'@': 100}), 16: (1, {'@': 100}), 17: (1, {'@': 100}), 18: (1, {'@': 100}), 19: (1, {'@': 100}), 20: (1, {'@': 100}), 21: (1, {'@': 100}), 22: (1, {'@': 100}), 23: (1, {'@': 100}), 24: (1, {'@': 100}), 25: (1, {'@': 100}), 26: (1, {'@': 100}), 27: (1, {'@': 100}), 28: (1, {'@': 100}), 29: (1, {'@': 100}), 30: (1, {'@': 100}), 2: (1, {'@': 100}), 31: (1, {'@': 100}), 4: (1, {'@': 100}), 32: (1, {'@': 100}), 33: (1, {'@': 100}), 34: (1, {'@': 100})}, 72: {5: (1, {'@': 359}), 37: (1, {'@': 359}), 38: (1, {'@': 359}), 6: (1, {'@': 359}), 39: (1, {'@': 359}), 7: (1, {'@': 359}), 8: (1, {'@': 359}), 9: (1, {'@': 359}), 10: (1, {'@': 359}), 11: (1, {'@': 359}), 12: (1, {'@': 359}), 13: (1, {'@': 359}), 14: (1, {'@': 359}), 15: (1, {'@': 359}), 16: (1, {'@': 359}), 3: (1, {'@': 359}), 17: (1, {'@': 359}), 18: (1, {'@': 359}), 19: (1, {'@': 359}), 20: (1, {'@': 359}), 21: (1, {'@': 359}), 40: (1, {'@': 359}), 22: (1, {'@': 359}), 23: (1, {'@': 359}), 24: (1, {'@': 359}), 25: (1, {'@': 359}), 26: (1, {'@': 359}), 27: (1, {'@': 359}), 28: (1, {'@': 359}), 29: (1, {'@': 359}), 30: (1, {'@': 359}), 2: (1, {'@': 359}), 31: (1, {'@': 359}), 4: (1, {'@': 359}), 41: (1, {'@': 359}), 32: (1, {'@': 359}), 33: (1, {'@': 359}), 34: (1, {'@': 359})}, 73: {5: (1, {'@': 280}), 37: (1, {'@': 280}), 38: (1, {'@': 280}), 6: (1, {'@': 280}), 39: (1, {'@': 280}), 7: (1, {'@': 280}), 8: (1, {'@': 280}), 9: (1, {'@': 280}), 10: (1, {'@': 280}), 11: (1, {'@': 280}), 12: (1, {'@': 280}), 13: (1, {'@': 280}), 14: (1, {'@': 280}), 15: (1, {'@': 280}), 16: (1, {'@': 280}), 3: (1, {'@': 280}), 17: (1, {'@': 280}), 18: (1, {'@': 280}), 19: (1, {'@': 280}), 20: (1, {'@': 280}), 21: (1, {'@': 280}), 40: (1, {'@': 280}), 22: (1, {'@': 280}), 23: (1, {'@': 280}), 24: (1, {'@': 280}), 25: (1, {'@': 280}), 26: (1, {'@': 280}), 27: (1, {'@': 280}), 28: (1, {'@': 280}), 29: (1, {'@': 280}), 30: (1, {'@': 280}), 2: (1, {'@': 280}), 31: (1, {'@': 280}), 4: (1, {'@': 280}), 41: (1, {'@': 280}), 32: (1, {'@': 280}), 33: (1, {'@': 280}), 34: (1, {'@': 280})}, 74: {113: (0, 36), 107: (1, {'@': 153}), 3: (1, {'@': 153}), 99: (1, {'@': 153}), 19: (1, {'@': 153}), 108: (1, {'@': 153}), 100: (1, {'@': 153}), 96: (1, {'@': 153}), 97: (1, {'@': 153}), 109: (1, {'@': 153}), 110: (1, {'@': 153}), 111: (1, {'@': 153}), 116: (1, {'@': 153}), 95: (1, {'@': 153}), 117: (1, {'@': 153}), 31: (1, {'@': 153}), 98: (1, {'@': 153}), 118: (1, {'@': 153}), 119: (1, {'@': 153}), 112: (1, {'@': 153}), 120: (1, {'@': 153}), 115: (1, {'@': 153}), 0: (1, {'@': 153}), 42: (1, {'@': 153}), 1: (1, {'@': 153}), 35: (1, {'@': 153}), 101: (1, {'@': 153}), 2: (1, {'@': 153}), 16: (1, {'@': 153})}, 75: {31: (0, 281), 99: (0, 453), 2: (1, {'@': 189}), 1: (1, {'@': 189})}, 76: {5: (1, {'@': 302}), 37: (1, {'@': 302}), 38: (1, {'@': 302}), 6: (1, {'@': 302}), 39: (1, {'@': 302}), 7: (1, {'@': 302}), 8: (1, {'@': 302}), 9: (1, {'@': 302}), 10: (1, {'@': 302}), 11: (1, {'@': 302}), 12: (1, {'@': 302}), 13: (1, {'@': 302}), 14: (1, {'@': 302}), 15: (1, {'@': 302}), 16: (1, {'@': 302}), 3: (1, {'@': 302}), 17: (1, {'@': 302}), 18: (1, {'@': 302}), 19: (1, {'@': 302}), 20: (1, {'@': 302}), 21: (1, {'@': 302}), 40: (1, {'@': 302}), 22: (1, {'@': 302}), 23: (1, {'@': 302}), 24: (1, {'@': 302}), 25: (1, {'@': 302}), 26: (1, {'@': 302}), 27: (1, {'@': 302}), 28: (1, {'@': 302}), 29: (1, {'@': 302}), 30: (1, {'@': 302}), 2: (1, {'@': 302}), 31: (1, {'@': 302}), 4: (1, {'@': 302}), 41: (1, {'@': 302}), 32: (1, {'@': 302}), 33: (1, {'@': 302}), 34: (1, {'@': 302})}, 77: {3: (0, 300), 5: (1, {'@': 87}), 37: (1, {'@': 87}), 38: (1, {'@': 87}), 6: (1, {'@': 87}), 39: (1, {'@': 87}), 7: (1, {'@': 87}), 8: (1, {'@': 87}), 9: (1, {'@': 87}), 10: (1, {'@': 87}), 11: (1, {'@': 87}), 12: (1, {'@': 87}), 13: (1, {'@': 87}), 14: (1, {'@': 87}), 15: (1, {'@': 87}), 16: (1, {'@': 87}), 17: (1, {'@': 87}), 18: (1, {'@': 87}), 19: (1, {'@': 87}), 20: (1, {'@': 87}), 21: (1, {'@': 87}), 40: (1, {'@': 87}), 22: (1, {'@': 87}), 23: (1, {'@': 87}), 24: (1, {'@': 87}), 25: (1, {'@': 87}), 26: (1, {'@': 87}), 27: (1, {'@': 87}), 28: (1, {'@': 87}), 29: (1, {'@': 87}), 30: (1, {'@': 87}), 2: (1, {'@': 87}), 31: (1, {'@': 87}), 4: (1, {'@': 87}), 41: (1, {'@': 87}), 32: (1, {'@': 87}), 33: (1, {'@': 87}), 34: (1, {'@': 87})}, 78: {113: (0, 36), 107: (1, {'@': 154}), 3: (1, {'@': 154}), 99: (1, {'@': 154}), 19: (1, {'@': 154}), 108: (1, {'@': 154}), 100: (1, {'@': 154}), 96: (1, {'@': 154}), 97: (1, {'@': 154}), 109: (1, {'@': 154}), 110: (1, {'@': 154}), 111: (1, {'@': 154}), 116: (1, {'@': 154}), 95: (1, {'@': 154}), 117: (1, {'@': 154}), 31: (1, {'@': 154}), 98: (1, {'@': 154}), 118: (1, {'@': 154}), 119: (1, {'@': 154}), 112: (1, {'@': 154}), 120: (1, {'@': 154}), 115: (1, {'@': 154}), 0: (1, {'@': 154}), 42: (1, {'@': 154}), 1: (1, {'@': 154}), 35: (1, {'@': 154}), 101: (1, {'@': 154}), 2: (1, {'@': 154}), 16: (1, {'@': 154})}, 79: {97: (0, 178), 98: (0, 318), 96: (1, {'@': 128}), 3: (1, {'@': 128}), 31: (1, {'@': 128}), 99: (1, {'@': 128}), 100: (1, {'@': 128}), 0: (1, {'@': 128}), 101: (1, {'@': 128}), 16: (1, {'@': 128}), 42: (1, {'@': 128}), 1: (1, {'@': 128}), 35: (1, {'@': 128}), 2: (1, {'@': 128})}, 80: {3: (0, 534), 36: (0, 626), 1: (0, 611), 2: (1, {'@': 381})}, 81: {5: (1, {'@': 310}), 37: (1, {'@': 310}), 38: (1, {'@': 310}), 6: (1, {'@': 310}), 39: (1, {'@': 310}), 7: (1, {'@': 310}), 8: (1, {'@': 310}), 9: (1, {'@': 310}), 10: (1, {'@': 310}), 11: (1, {'@': 310}), 12: (1, {'@': 310}), 13: (1, {'@': 310}), 14: (1, {'@': 310}), 15: (1, {'@': 310}), 16: (1, {'@': 310}), 3: (1, {'@': 310}), 17: (1, {'@': 310}), 18: (1, {'@': 310}), 19: (1, {'@': 310}), 20: (1, {'@': 310}), 21: (1, {'@': 310}), 40: (1, {'@': 310}), 22: (1, {'@': 310}), 23: (1, {'@': 310}), 24: (1, {'@': 310}), 25: (1, {'@': 310}), 26: (1, {'@': 310}), 27: (1, {'@': 310}), 28: (1, {'@': 310}), 29: (1, {'@': 310}), 30: (1, {'@': 310}), 2: (1, {'@': 310}), 31: (1, {'@': 310}), 4: (1, {'@': 310}), 41: (1, {'@': 310}), 32: (1, {'@': 310}), 33: (1, {'@': 310}), 34: (1, {'@': 310})}, 82: {31: (0, 281), 35: (0, 343), 99: (0, 453)}, 83: {35: (0, 362), 31: (0, 281), 99: (0, 453)}, 84: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 123}), 42: (1, {'@': 123}), 1: (1, {'@': 123}), 0: (1, {'@': 123}), 35: (1, {'@': 123}), 101: (1, {'@': 123}), 2: (1, {'@': 123}), 16: (1, {'@': 123})}, 85: {5: (1, {'@': 385}), 39: (1, {'@': 385}), 7: (1, {'@': 385}), 8: (1, {'@': 385}), 9: (1, {'@': 385}), 10: (1, {'@': 385}), 11: (1, {'@': 385}), 12: (1, {'@': 385}), 13: (1, {'@': 385}), 14: (1, {'@': 385}), 15: (1, {'@': 385}), 16: (1, {'@': 385}), 3: (1, {'@': 385}), 17: (1, {'@': 385}), 18: (1, {'@': 385}), 19: (1, {'@': 385}), 20: (1, {'@': 385}), 21: (1, {'@': 385}), 22: (1, {'@': 385}), 23: (1, {'@': 385}), 24: (1, {'@': 385}), 25: (1, {'@': 385}), 26: (1, {'@': 385}), 27: (1, {'@': 385}), 28: (1, {'@': 385}), 29: (1, {'@': 385}), 30: (1, {'@': 385}), 2: (1, {'@': 385}), 31: (1, {'@': 385}), 4: (1, {'@': 385}), 32: (1, {'@': 385}), 33: (1, {'@': 385}), 34: (1, {'@': 385}), 37: (1, {'@': 385}), 38: (1, {'@': 385}), 6: (1, {'@': 385}), 40: (1, {'@': 385}), 41: (1, {'@': 385})}, 86: {95: (0, 132), 115: (0, 571), 120: (0, 557), 112: (0, 645), 107: (1, {'@': 149}), 3: (1, {'@': 149}), 99: (1, {'@': 149}), 19: (1, {'@': 149}), 108: (1, {'@': 149}), 100: (1, {'@': 149}), 96: (1, {'@': 149}), 97: (1, {'@': 149}), 109: (1, {'@': 149}), 110: (1, {'@': 149}), 111: (1, {'@': 149}), 116: (1, {'@': 149}), 117: (1, {'@': 149}), 31: (1, {'@': 149}), 98: (1, {'@': 149}), 118: (1, {'@': 149}), 119: (1, {'@': 149}), 0: (1, {'@': 149}), 42: (1, {'@': 149}), 1: (1, {'@': 149}), 35: (1, {'@': 149}), 101: (1, {'@': 149}), 2: (1, {'@': 149}), 16: (1, {'@': 149})}, 87: {113: (0, 36), 107: (1, {'@': 155}), 3: (1, {'@': 155}), 99: (1, {'@': 155}), 19: (1, {'@': 155}), 108: (1, {'@': 155}), 100: (1, {'@': 155}), 96: (1, {'@': 155}), 97: (1, {'@': 155}), 109: (1, {'@': 155}), 110: (1, {'@': 155}), 111: (1, {'@': 155}), 116: (1, {'@': 155}), 95: (1, {'@': 155}), 117: (1, {'@': 155}), 31: (1, {'@': 155}), 98: (1, {'@': 155}), 118: (1, {'@': 155}), 119: (1, {'@': 155}), 112: (1, {'@': 155}), 120: (1, {'@': 155}), 115: (1, {'@': 155}), 0: (1, {'@': 155}), 42: (1, {'@': 155}), 1: (1, {'@': 155}), 35: (1, {'@': 155}), 101: (1, {'@': 155}), 2: (1, {'@': 155}), 16: (1, {'@': 155})}, 88: {5: (1, {'@': 300}), 37: (1, {'@': 300}), 38: (1, {'@': 300}), 6: (1, {'@': 300}), 39: (1, {'@': 300}), 7: (1, {'@': 300}), 8: (1, {'@': 300}), 9: (1, {'@': 300}), 10: (1, {'@': 300}), 11: (1, {'@': 300}), 12: (1, {'@': 300}), 13: (1, {'@': 300}), 14: (1, {'@': 300}), 15: (1, {'@': 300}), 16: (1, {'@': 300}), 3: (1, {'@': 300}), 17: (1, {'@': 300}), 18: (1, {'@': 300}), 19: (1, {'@': 300}), 20: (1, {'@': 300}), 21: (1, {'@': 300}), 40: (1, {'@': 300}), 22: (1, {'@': 300}), 23: (1, {'@': 300}), 24: (1, {'@': 300}), 25: (1, {'@': 300}), 26: (1, {'@': 300}), 27: (1, {'@': 300}), 28: (1, {'@': 300}), 29: (1, {'@': 300}), 30: (1, {'@': 300}), 2: (1, {'@': 300}), 31: (1, {'@': 300}), 4: (1, {'@': 300}), 41: (1, {'@': 300}), 32: (1, {'@': 300}), 33: (1, {'@': 300}), 34: (1, {'@': 300})}, 89: {5: (1, {'@': 374}), 37: (1, {'@': 374}), 38: (1, {'@': 374}), 6: (1, {'@': 374}), 39: (1, {'@': 374}), 7: (1, {'@': 374}), 8: (1, {'@': 374}), 9: (1, {'@': 374}), 10: (1, {'@': 374}), 11: (1, {'@': 374}), 12: (1, {'@': 374}), 13: (1, {'@': 374}), 14: (1, {'@': 374}), 15: (1, {'@': 374}), 16: (1, {'@': 374}), 3: (1, {'@': 374}), 17: (1, {'@': 374}), 18: (1, {'@': 374}), 19: (1, {'@': 374}), 20: (1, {'@': 374}), 21: (1, {'@': 374}), 40: (1, {'@': 374}), 22: (1, {'@': 374}), 23: (1, {'@': 374}), 24: (1, {'@': 374}), 25: (1, {'@': 374}), 26: (1, {'@': 374}), 27: (1, {'@': 374}), 28: (1, {'@': 374}), 29: (1, {'@': 374}), 30: (1, {'@': 374}), 2: (1, {'@': 374}), 31: (1, {'@': 374}), 4: (1, {'@': 374}), 41: (1, {'@': 374}), 32: (1, {'@': 374}), 33: (1, {'@': 374}), 34: (1, {'@': 374})}, 90: {28: (0, 319), 4: (0, 287)}, 91: {3: (0, 534), 36: (0, 58), 40: (1, {'@': 287}), 38: (1, {'@': 287})}, 92: {131: (0, 0), 28: (0, 601)}, 93: {5: (1, {'@': 270}), 37: (1, {'@': 270}), 38: (1, {'@': 270}), 6: (1, {'@': 270}), 39: (1, {'@': 270}), 7: (1, {'@': 270}), 8: (1, {'@': 270}), 9: (1, {'@': 270}), 10: (1, {'@': 270}), 11: (1, {'@': 270}), 12: (1, {'@': 270}), 13: (1, {'@': 270}), 14: (1, {'@': 270}), 15: (1, {'@': 270}), 16: (1, {'@': 270}), 3: (1, {'@': 270}), 17: (1, {'@': 270}), 18: (1, {'@': 270}), 19: (1, {'@': 270}), 20: (1, {'@': 270}), 21: (1, {'@': 270}), 40: (1, {'@': 270}), 22: (1, {'@': 270}), 23: (1, {'@': 270}), 24: (1, {'@': 270}), 25: (1, {'@': 270}), 26: (1, {'@': 270}), 27: (1, {'@': 270}), 28: (1, {'@': 270}), 29: (1, {'@': 270}), 30: (1, {'@': 270}), 2: (1, {'@': 270}), 31: (1, {'@': 270}), 4: (1, {'@': 270}), 41: (1, {'@': 270}), 32: (1, {'@': 270}), 33: (1, {'@': 270}), 34: (1, {'@': 270})}, 94: {29: (1, {'@': 113}), 1: (1, {'@': 113}), 3: (1, {'@': 113}), 35: (1, {'@': 113}), 130: (1, {'@': 113})}, 95: {3: (0, 300), 5: (1, {'@': 356}), 37: (1, {'@': 356}), 38: (1, {'@': 356}), 6: (1, {'@': 356}), 39: (1, {'@': 356}), 7: (1, {'@': 356}), 8: (1, {'@': 356}), 9: (1, {'@': 356}), 10: (1, {'@': 356}), 11: (1, {'@': 356}), 12: (1, {'@': 356}), 13: (1, {'@': 356}), 14: (1, {'@': 356}), 15: (1, {'@': 356}), 16: (1, {'@': 356}), 17: (1, {'@': 356}), 18: (1, {'@': 356}), 19: (1, {'@': 356}), 20: (1, {'@': 356}), 21: (1, {'@': 356}), 40: (1, {'@': 356}), 22: (1, {'@': 356}), 23: (1, {'@': 356}), 24: (1, {'@': 356}), 25: (1, {'@': 356}), 26: (1, {'@': 356}), 27: (1, {'@': 356}), 28: (1, {'@': 356}), 29: (1, {'@': 356}), 30: (1, {'@': 356}), 2: (1, {'@': 356}), 31: (1, {'@': 356}), 4: (1, {'@': 356}), 41: (1, {'@': 356}), 32: (1, {'@': 356}), 33: (1, {'@': 356}), 34: (1, {'@': 356})}, 96: {3: (0, 300), 5: (1, {'@': 101}), 39: (1, {'@': 101}), 7: (1, {'@': 101}), 8: (1, {'@': 101}), 9: (1, {'@': 101}), 10: (1, {'@': 101}), 11: (1, {'@': 101}), 12: (1, {'@': 101}), 13: (1, {'@': 101}), 14: (1, {'@': 101}), 15: (1, {'@': 101}), 16: (1, {'@': 101}), 17: (1, {'@': 101}), 18: (1, {'@': 101}), 19: (1, {'@': 101}), 20: (1, {'@': 101}), 21: (1, {'@': 101}), 22: (1, {'@': 101}), 23: (1, {'@': 101}), 24: (1, {'@': 101}), 25: (1, {'@': 101}), 26: (1, {'@': 101}), 27: (1, {'@': 101}), 28: (1, {'@': 101}), 29: (1, {'@': 101}), 30: (1, {'@': 101}), 2: (1, {'@': 101}), 31: (1, {'@': 101}), 4: (1, {'@': 101}), 32: (1, {'@': 101}), 33: (1, {'@': 101}), 34: (1, {'@': 101})}, 97: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 51: (0, 175), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 62: (0, 187), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 36: (0, 197), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 98: {28: (0, 512), 93: (0, 327), 95: (0, 473), 94: (0, 535)}, 99: {3: (0, 300), 5: (1, {'@': 338}), 37: (1, {'@': 338}), 38: (1, {'@': 338}), 6: (1, {'@': 338}), 39: (1, {'@': 338}), 7: (1, {'@': 338}), 8: (1, {'@': 338}), 9: (1, {'@': 338}), 10: (1, {'@': 338}), 11: (1, {'@': 338}), 12: (1, {'@': 338}), 13: (1, {'@': 338}), 14: (1, {'@': 338}), 15: (1, {'@': 338}), 16: (1, {'@': 338}), 17: (1, {'@': 338}), 18: (1, {'@': 338}), 19: (1, {'@': 338}), 20: (1, {'@': 338}), 21: (1, {'@': 338}), 40: (1, {'@': 338}), 22: (1, {'@': 338}), 23: (1, {'@': 338}), 24: (1, {'@': 338}), 25: (1, {'@': 338}), 26: (1, {'@': 338}), 27: (1, {'@': 338}), 28: (1, {'@': 338}), 29: (1, {'@': 338}), 30: (1, {'@': 338}), 2: (1, {'@': 338}), 31: (1, {'@': 338}), 4: (1, {'@': 338}), 41: (1, {'@': 338}), 32: (1, {'@': 338}), 33: (1, {'@': 338}), 34: (1, {'@': 338})}, 100: {29: (0, 466), 35: (0, 477)}, 101: {3: (0, 300), 5: (1, {'@': 94}), 39: (1, {'@': 94}), 7: (1, {'@': 94}), 8: (1, {'@': 94}), 9: (1, {'@': 94}), 10: (1, {'@': 94}), 11: (1, {'@': 94}), 12: (1, {'@': 94}), 13: (1, {'@': 94}), 14: (1, {'@': 94}), 15: (1, {'@': 94}), 16: (1, {'@': 94}), 17: (1, {'@': 94}), 18: (1, {'@': 94}), 19: (1, {'@': 94}), 20: (1, {'@': 94}), 21: (1, {'@': 94}), 22: (1, {'@': 94}), 23: (1, {'@': 94}), 24: (1, {'@': 94}), 25: (1, {'@': 94}), 26: (1, {'@': 94}), 27: (1, {'@': 94}), 28: (1, {'@': 94}), 29: (1, {'@': 94}), 30: (1, {'@': 94}), 2: (1, {'@': 94}), 31: (1, {'@': 94}), 4: (1, {'@': 94}), 32: (1, {'@': 94}), 33: (1, {'@': 94}), 34: (1, {'@': 94})}, 102: {3: (1, {'@': 376}), 2: (1, {'@': 376}), 1: (1, {'@': 376})}, 103: {62: (0, 72), 8: (0, 53), 36: (0, 59), 3: (0, 534)}, 104: {96: (1, {'@': 132}), 97: (1, {'@': 132}), 3: (1, {'@': 132}), 31: (1, {'@': 132}), 98: (1, {'@': 132}), 99: (1, {'@': 132}), 100: (1, {'@': 132}), 0: (1, {'@': 132}), 101: (1, {'@': 132}), 16: (1, {'@': 132}), 42: (1, {'@': 132}), 1: (1, {'@': 132}), 35: (1, {'@': 132}), 2: (1, {'@': 132})}, 105: {128: (0, 207), 28: (0, 137)}, 106: {5: (1, {'@': 364}), 37: (1, {'@': 364}), 38: (1, {'@': 364}), 6: (1, {'@': 364}), 39: (1, {'@': 364}), 7: (1, {'@': 364}), 8: (1, {'@': 364}), 9: (1, {'@': 364}), 10: (1, {'@': 364}), 11: (1, {'@': 364}), 12: (1, {'@': 364}), 13: (1, {'@': 364}), 14: (1, {'@': 364}), 15: (1, {'@': 364}), 16: (1, {'@': 364}), 3: (1, {'@': 364}), 17: (1, {'@': 364}), 18: (1, {'@': 364}), 19: (1, {'@': 364}), 20: (1, {'@': 364}), 21: (1, {'@': 364}), 40: (1, {'@': 364}), 22: (1, {'@': 364}), 23: (1, {'@': 364}), 24: (1, {'@': 364}), 25: (1, {'@': 364}), 26: (1, {'@': 364}), 27: (1, {'@': 364}), 28: (1, {'@': 364}), 29: (1, {'@': 364}), 30: (1, {'@': 364}), 2: (1, {'@': 364}), 31: (1, {'@': 364}), 4: (1, {'@': 364}), 41: (1, {'@': 364}), 32: (1, {'@': 364}), 33: (1, {'@': 364}), 34: (1, {'@': 364})}, 107: {5: (1, {'@': 362}), 37: (1, {'@': 362}), 38: (1, {'@': 362}), 6: (1, {'@': 362}), 39: (1, {'@': 362}), 7: (1, {'@': 362}), 8: (1, {'@': 362}), 9: (1, {'@': 362}), 10: (1, {'@': 362}), 11: (1, {'@': 362}), 12: (1, {'@': 362}), 13: (1, {'@': 362}), 14: (1, {'@': 362}), 15: (1, {'@': 362}), 16: (1, {'@': 362}), 3: (1, {'@': 362}), 17: (1, {'@': 362}), 18: (1, {'@': 362}), 19: (1, {'@': 362}), 20: (1, {'@': 362}), 21: (1, {'@': 362}), 40: (1, {'@': 362}), 22: (1, {'@': 362}), 23: (1, {'@': 362}), 24: (1, {'@': 362}), 25: (1, {'@': 362}), 26: (1, {'@': 362}), 27: (1, {'@': 362}), 28: (1, {'@': 362}), 29: (1, {'@': 362}), 30: (1, {'@': 362}), 2: (1, {'@': 362}), 31: (1, {'@': 362}), 4: (1, {'@': 362}), 41: (1, {'@': 362}), 32: (1, {'@': 362}), 33: (1, {'@': 362}), 34: (1, {'@': 362})}, 108: {36: (0, 180), 3: (0, 534), 5: (1, {'@': 86}), 37: (1, {'@': 86}), 38: (1, {'@': 86}), 6: (1, {'@': 86}), 39: (1, {'@': 86}), 7: (1, {'@': 86}), 8: (1, {'@': 86}), 9: (1, {'@': 86}), 10: (1, {'@': 86}), 11: (1, {'@': 86}), 12: (1, {'@': 86}), 13: (1, {'@': 86}), 14: (1, {'@': 86}), 15: (1, {'@': 86}), 16: (1, {'@': 86}), 17: (1, {'@': 86}), 18: (1, {'@': 86}), 19: (1, {'@': 86}), 20: (1, {'@': 86}), 21: (1, {'@': 86}), 40: (1, {'@': 86}), 22: (1, {'@': 86}), 23: (1, {'@': 86}), 24: (1, {'@': 86}), 25: (1, {'@': 86}), 26: (1, {'@': 86}), 27: (1, {'@': 86}), 28: (1, {'@': 86}), 29: (1, {'@': 86}), 30: (1, {'@': 86}), 2: (1, {'@': 86}), 31: (1, {'@': 86}), 4: (1, {'@': 86}), 41: (1, {'@': 86}), 32: (1, {'@': 86}), 33: (1, {'@': 86}), 34: (1, {'@': 86})}, 109: {3: (0, 81), 5: (1, {'@': 311}), 37: (1, {'@': 311}), 38: (1, {'@': 311}), 6: (1, {'@': 311}), 39: (1, {'@': 311}), 7: (1, {'@': 311}), 8: (1, {'@': 311}), 9: (1, {'@': 311}), 10: (1, {'@': 311}), 11: (1, {'@': 311}), 12: (1, {'@': 311}), 13: (1, {'@': 311}), 14: (1, {'@': 311}), 15: (1, {'@': 311}), 16: (1, {'@': 311}), 17: (1, {'@': 311}), 18: (1, {'@': 311}), 19: (1, {'@': 311}), 20: (1, {'@': 311}), 21: (1, {'@': 311}), 40: (1, {'@': 311}), 22: (1, {'@': 311}), 23: (1, {'@': 311}), 24: (1, {'@': 311}), 25: (1, {'@': 311}), 26: (1, {'@': 311}), 27: (1, {'@': 311}), 28: (1, {'@': 311}), 29: (1, {'@': 311}), 30: (1, {'@': 311}), 2: (1, {'@': 311}), 31: (1, {'@': 311}), 4: (1, {'@': 311}), 41: (1, {'@': 311}), 32: (1, {'@': 311}), 33: (1, {'@': 311}), 34: (1, {'@': 311})}, 110: {35: (0, 370)}, 111: {4: (0, 465), 121: (0, 604), 114: (0, 585), 107: (1, {'@': 162}), 3: (1, {'@': 162}), 99: (1, {'@': 162}), 19: (1, {'@': 162}), 108: (1, {'@': 162}), 100: (1, {'@': 162}), 96: (1, {'@': 162}), 97: (1, {'@': 162}), 109: (1, {'@': 162}), 110: (1, {'@': 162}), 111: (1, {'@': 162}), 113: (1, {'@': 162}), 116: (1, {'@': 162}), 95: (1, {'@': 162}), 117: (1, {'@': 162}), 31: (1, {'@': 162}), 98: (1, {'@': 162}), 118: (1, {'@': 162}), 119: (1, {'@': 162}), 112: (1, {'@': 162}), 120: (1, {'@': 162}), 115: (1, {'@': 162}), 0: (1, {'@': 162})}, 112: {92: (0, 183), 28: (0, 616), 90: (0, 575), 91: (0, 568), 93: (0, 606), 94: (0, 621), 95: (0, 473), 35: (1, {'@': 237})}, 113: {5: (1, {'@': 272}), 37: (1, {'@': 272}), 38: (1, {'@': 272}), 6: (1, {'@': 272}), 39: (1, {'@': 272}), 7: (1, {'@': 272}), 8: (1, {'@': 272}), 9: (1, {'@': 272}), 10: (1, {'@': 272}), 11: (1, {'@': 272}), 12: (1, {'@': 272}), 13: (1, {'@': 272}), 14: (1, {'@': 272}), 15: (1, {'@': 272}), 16: (1, {'@': 272}), 3: (1, {'@': 272}), 17: (1, {'@': 272}), 18: (1, {'@': 272}), 19: (1, {'@': 272}), 20: (1, {'@': 272}), 21: (1, {'@': 272}), 40: (1, {'@': 272}), 22: (1, {'@': 272}), 23: (1, {'@': 272}), 24: (1, {'@': 272}), 25: (1, {'@': 272}), 26: (1, {'@': 272}), 27: (1, {'@': 272}), 28: (1, {'@': 272}), 29: (1, {'@': 272}), 30: (1, {'@': 272}), 2: (1, {'@': 272}), 31: (1, {'@': 272}), 4: (1, {'@': 272}), 41: (1, {'@': 272}), 32: (1, {'@': 272}), 33: (1, {'@': 272}), 34: (1, {'@': 272})}, 114: {28: (0, 512), 93: (0, 327), 95: (0, 473), 94: (0, 361)}, 115: {5: (1, {'@': 274}), 37: (1, {'@': 274}), 38: (1, {'@': 274}), 6: (1, {'@': 274}), 39: (1, {'@': 274}), 7: (1, {'@': 274}), 8: (1, {'@': 274}), 9: (1, {'@': 274}), 10: (1, {'@': 274}), 11: (1, {'@': 274}), 12: (1, {'@': 274}), 13: (1, {'@': 274}), 14: (1, {'@': 274}), 15: (1, {'@': 274}), 16: (1, {'@': 274}), 3: (1, {'@': 274}), 17: (1, {'@': 274}), 18: (1, {'@': 274}), 19: (1, {'@': 274}), 20: (1, {'@': 274}), 21: (1, {'@': 274}), 40: (1, {'@': 274}), 22: (1, {'@': 274}), 23: (1, {'@': 274}), 24: (1, {'@': 274}), 25: (1, {'@': 274}), 26: (1, {'@': 274}), 27: (1, {'@': 274}), 28: (1, {'@': 274}), 29: (1, {'@': 274}), 30: (1, {'@': 274}), 2: (1, {'@': 274}), 31: (1, {'@': 274}), 4: (1, {'@': 274}), 41: (1, {'@': 274}), 32: (1, {'@': 274}), 33: (1, {'@': 274}), 34: (1, {'@': 274})}, 116: {28: (0, 247), 58: (0, 35), 50: (0, 363), 4: (0, 284), 78: (0, 413)}, 117: {31: (0, 281), 99: (0, 453), 35: (0, 131)}, 118: {5: (1, {'@': 89}), 39: (1, {'@': 89}), 7: (1, {'@': 89}), 8: (1, {'@': 89}), 9: (1, {'@': 89}), 10: (1, {'@': 89}), 11: (1, {'@': 89}), 12: (1, {'@': 89}), 13: (1, {'@': 89}), 14: (1, {'@': 89}), 15: (1, {'@': 89}), 16: (1, {'@': 89}), 17: (1, {'@': 89}), 18: (1, {'@': 89}), 19: (1, {'@': 89}), 20: (1, {'@': 89}), 21: (1, {'@': 89}), 22: (1, {'@': 89}), 23: (1, {'@': 89}), 24: (1, {'@': 89}), 25: (1, {'@': 89}), 26: (1, {'@': 89}), 27: (1, {'@': 89}), 28: (1, {'@': 89}), 29: (1, {'@': 89}), 30: (1, {'@': 89}), 2: (1, {'@': 89}), 31: (1, {'@': 89}), 4: (1, {'@': 89}), 32: (1, {'@': 89}), 33: (1, {'@': 89}), 34: (1, {'@': 89})}, 119: {3: (0, 163), 5: (1, {'@': 313}), 37: (1, {'@': 313}), 38: (1, {'@': 313}), 6: (1, {'@': 313}), 39: (1, {'@': 313}), 7: (1, {'@': 313}), 8: (1, {'@': 313}), 9: (1, {'@': 313}), 10: (1, {'@': 313}), 11: (1, {'@': 313}), 12: (1, {'@': 313}), 13: (1, {'@': 313}), 14: (1, {'@': 313}), 15: (1, {'@': 313}), 16: (1, {'@': 313}), 17: (1, {'@': 313}), 18: (1, {'@': 313}), 19: (1, {'@': 313}), 20: (1, {'@': 313}), 21: (1, {'@': 313}), 40: (1, {'@': 313}), 22: (1, {'@': 313}), 23: (1, {'@': 313}), 24: (1, {'@': 313}), 25: (1, {'@': 313}), 26: (1, {'@': 313}), 27: (1, {'@': 313}), 28: (1, {'@': 313}), 29: (1, {'@': 313}), 30: (1, {'@': 313}), 2: (1, {'@': 313}), 31: (1, {'@': 313}), 4: (1, {'@': 313}), 41: (1, {'@': 313}), 32: (1, {'@': 313}), 33: (1, {'@': 313}), 34: (1, {'@': 313})}, 120: {28: (0, 507)}, 121: {3: (0, 534), 36: (0, 142), 5: (1, {'@': 347}), 37: (1, {'@': 347}), 38: (1, {'@': 347}), 6: (1, {'@': 347}), 39: (1, {'@': 347}), 7: (1, {'@': 347}), 8: (1, {'@': 347}), 9: (1, {'@': 347}), 10: (1, {'@': 347}), 11: (1, {'@': 347}), 12: (1, {'@': 347}), 13: (1, {'@': 347}), 14: (1, {'@': 347}), 15: (1, {'@': 347}), 16: (1, {'@': 347}), 17: (1, {'@': 347}), 18: (1, {'@': 347}), 19: (1, {'@': 347}), 20: (1, {'@': 347}), 21: (1, {'@': 347}), 40: (1, {'@': 347}), 22: (1, {'@': 347}), 23: (1, {'@': 347}), 24: (1, {'@': 347}), 25: (1, {'@': 347}), 26: (1, {'@': 347}), 27: (1, {'@': 347}), 28: (1, {'@': 347}), 29: (1, {'@': 347}), 30: (1, {'@': 347}), 2: (1, {'@': 347}), 31: (1, {'@': 347}), 4: (1, {'@': 347}), 41: (1, {'@': 347}), 32: (1, {'@': 347}), 33: (1, {'@': 347}), 34: (1, {'@': 347})}, 122: {114: (0, 248)}, 123: {4: (0, 273)}, 124: {1: (0, 102), 3: (1, {'@': 377}), 2: (1, {'@': 377})}, 125: {5: (1, {'@': 273}), 37: (1, {'@': 273}), 38: (1, {'@': 273}), 6: (1, {'@': 273}), 39: (1, {'@': 273}), 7: (1, {'@': 273}), 8: (1, {'@': 273}), 9: (1, {'@': 273}), 10: (1, {'@': 273}), 11: (1, {'@': 273}), 12: (1, {'@': 273}), 13: (1, {'@': 273}), 14: (1, {'@': 273}), 15: (1, {'@': 273}), 16: (1, {'@': 273}), 3: (1, {'@': 273}), 17: (1, {'@': 273}), 18: (1, {'@': 273}), 19: (1, {'@': 273}), 20: (1, {'@': 273}), 21: (1, {'@': 273}), 40: (1, {'@': 273}), 22: (1, {'@': 273}), 23: (1, {'@': 273}), 24: (1, {'@': 273}), 25: (1, {'@': 273}), 26: (1, {'@': 273}), 27: (1, {'@': 273}), 28: (1, {'@': 273}), 29: (1, {'@': 273}), 30: (1, {'@': 273}), 2: (1, {'@': 273}), 31: (1, {'@': 273}), 4: (1, {'@': 273}), 41: (1, {'@': 273}), 32: (1, {'@': 273}), 33: (1, {'@': 273}), 34: (1, {'@': 273})}, 126: {5: (1, {'@': 226}), 37: (1, {'@': 226}), 38: (1, {'@': 226}), 6: (1, {'@': 226}), 39: (1, {'@': 226}), 7: (1, {'@': 226}), 8: (1, {'@': 226}), 9: (1, {'@': 226}), 10: (1, {'@': 226}), 11: (1, {'@': 226}), 12: (1, {'@': 226}), 13: (1, {'@': 226}), 14: (1, {'@': 226}), 15: (1, {'@': 226}), 16: (1, {'@': 226}), 3: (1, {'@': 226}), 17: (1, {'@': 226}), 18: (1, {'@': 226}), 19: (1, {'@': 226}), 20: (1, {'@': 226}), 21: (1, {'@': 226}), 40: (1, {'@': 226}), 22: (1, {'@': 226}), 23: (1, {'@': 226}), 24: (1, {'@': 226}), 25: (1, {'@': 226}), 26: (1, {'@': 226}), 27: (1, {'@': 226}), 28: (1, {'@': 226}), 29: (1, {'@': 226}), 30: (1, {'@': 226}), 2: (1, {'@': 226}), 31: (1, {'@': 226}), 4: (1, {'@': 226}), 41: (1, {'@': 226}), 32: (1, {'@': 226}), 33: (1, {'@': 226}), 34: (1, {'@': 226})}, 127: {21: (0, 311), 3: (0, 534), 36: (0, 199)}, 128: {36: (0, 590), 3: (0, 534), 40: (1, {'@': 285}), 38: (1, {'@': 285})}, 129: {99: (1, {'@': 204}), 3: (1, {'@': 204}), 31: (1, {'@': 204}), 4: (1, {'@': 204}), 0: (1, {'@': 204}), 101: (1, {'@': 204}), 42: (1, {'@': 204}), 16: (1, {'@': 204}), 1: (1, {'@': 204}), 35: (1, {'@': 204}), 2: (1, {'@': 204})}, 130: {43: (0, 83), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 131: {5: (1, {'@': 305}), 37: (1, {'@': 305}), 38: (1, {'@': 305}), 6: (1, {'@': 305}), 39: (1, {'@': 305}), 7: (1, {'@': 305}), 8: (1, {'@': 305}), 9: (1, {'@': 305}), 10: (1, {'@': 305}), 11: (1, {'@': 305}), 12: (1, {'@': 305}), 13: (1, {'@': 305}), 14: (1, {'@': 305}), 15: (1, {'@': 305}), 16: (1, {'@': 305}), 3: (1, {'@': 305}), 17: (1, {'@': 305}), 18: (1, {'@': 305}), 19: (1, {'@': 305}), 20: (1, {'@': 305}), 21: (1, {'@': 305}), 40: (1, {'@': 305}), 22: (1, {'@': 305}), 23: (1, {'@': 305}), 24: (1, {'@': 305}), 25: (1, {'@': 305}), 26: (1, {'@': 305}), 27: (1, {'@': 305}), 28: (1, {'@': 305}), 29: (1, {'@': 305}), 30: (1, {'@': 305}), 2: (1, {'@': 305}), 31: (1, {'@': 305}), 4: (1, {'@': 305}), 41: (1, {'@': 305}), 32: (1, {'@': 305}), 33: (1, {'@': 305}), 34: (1, {'@': 305})}, 132: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 26: (0, 399), 86: (0, 436), 34: (0, 329), 87: (0, 544), 78: (0, 413), 77: (0, 136), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 133: {8: (0, 153), 132: (0, 107), 3: (0, 300)}, 134: {107: (1, {'@': 404}), 120: (1, {'@': 404}), 3: (1, {'@': 404}), 99: (1, {'@': 404}), 19: (1, {'@': 404}), 106: (1, {'@': 404}), 108: (1, {'@': 404}), 100: (1, {'@': 404}), 96: (1, {'@': 404}), 97: (1, {'@': 404}), 121: (1, {'@': 404}), 109: (1, {'@': 404}), 110: (1, {'@': 404}), 111: (1, {'@': 404}), 113: (1, {'@': 404}), 114: (1, {'@': 404}), 29: (1, {'@': 404}), 116: (1, {'@': 404}), 95: (1, {'@': 404}), 117: (1, {'@': 404}), 31: (1, {'@': 404}), 98: (1, {'@': 404}), 4: (1, {'@': 404}), 118: (1, {'@': 404}), 112: (1, {'@': 404}), 119: (1, {'@': 404}), 115: (1, {'@': 404}), 0: (1, {'@': 404}), 42: (1, {'@': 404}), 1: (1, {'@': 404}), 35: (1, {'@': 404}), 101: (1, {'@': 404}), 2: (1, {'@': 404}), 16: (1, {'@': 404})}, 135: {2: (0, 314), 3: (0, 300)}, 136: {113: (0, 36), 107: (1, {'@': 152}), 3: (1, {'@': 152}), 99: (1, {'@': 152}), 19: (1, {'@': 152}), 108: (1, {'@': 152}), 100: (1, {'@': 152}), 96: (1, {'@': 152}), 97: (1, {'@': 152}), 109: (1, {'@': 152}), 110: (1, {'@': 152}), 111: (1, {'@': 152}), 116: (1, {'@': 152}), 95: (1, {'@': 152}), 117: (1, {'@': 152}), 31: (1, {'@': 152}), 98: (1, {'@': 152}), 118: (1, {'@': 152}), 119: (1, {'@': 152}), 112: (1, {'@': 152}), 120: (1, {'@': 152}), 115: (1, {'@': 152}), 0: (1, {'@': 152}), 42: (1, {'@': 152}), 1: (1, {'@': 152}), 35: (1, {'@': 152}), 101: (1, {'@': 152}), 2: (1, {'@': 152}), 16: (1, {'@': 152})}, 137: {114: (0, 176)}, 138: {35: (0, 97), 31: (0, 281), 99: (0, 453)}, 139: {107: (1, {'@': 400}), 120: (1, {'@': 400}), 3: (1, {'@': 400}), 99: (1, {'@': 400}), 19: (1, {'@': 400}), 106: (1, {'@': 400}), 108: (1, {'@': 400}), 100: (1, {'@': 400}), 96: (1, {'@': 400}), 97: (1, {'@': 400}), 121: (1, {'@': 400}), 109: (1, {'@': 400}), 110: (1, {'@': 400}), 111: (1, {'@': 400}), 113: (1, {'@': 400}), 114: (1, {'@': 400}), 29: (1, {'@': 400}), 116: (1, {'@': 400}), 95: (1, {'@': 400}), 117: (1, {'@': 400}), 31: (1, {'@': 400}), 98: (1, {'@': 400}), 4: (1, {'@': 400}), 118: (1, {'@': 400}), 112: (1, {'@': 400}), 119: (1, {'@': 400}), 115: (1, {'@': 400}), 0: (1, {'@': 400}), 42: (1, {'@': 400}), 1: (1, {'@': 400}), 35: (1, {'@': 400}), 101: (1, {'@': 400}), 2: (1, {'@': 400}), 16: (1, {'@': 400})}, 140: {7: (0, 469), 28: (0, 584), 4: (0, 491), 29: (0, 598), 127: (0, 410), 126: (0, 501)}, 141: {107: (1, {'@': 165}), 3: (1, {'@': 165}), 99: (1, {'@': 165}), 19: (1, {'@': 165}), 108: (1, {'@': 165}), 100: (1, {'@': 165}), 96: (1, {'@': 165}), 97: (1, {'@': 165}), 109: (1, {'@': 165}), 110: (1, {'@': 165}), 111: (1, {'@': 165}), 113: (1, {'@': 165}), 116: (1, {'@': 165}), 95: (1, {'@': 165}), 117: (1, {'@': 165}), 31: (1, {'@': 165}), 98: (1, {'@': 165}), 118: (1, {'@': 165}), 119: (1, {'@': 165}), 112: (1, {'@': 165}), 120: (1, {'@': 165}), 115: (1, {'@': 165}), 0: (1, {'@': 165}), 42: (1, {'@': 165}), 1: (1, {'@': 165}), 35: (1, {'@': 165}), 101: (1, {'@': 165}), 2: (1, {'@': 165}), 16: (1, {'@': 165})}, 142: {3: (0, 300), 5: (1, {'@': 346}), 37: (1, {'@': 346}), 38: (1, {'@': 346}), 6: (1, {'@': 346}), 39: (1, {'@': 346}), 7: (1, {'@': 346}), 8: (1, {'@': 346}), 9: (1, {'@': 346}), 10: (1, {'@': 346}), 11: (1, {'@': 346}), 12: (1, {'@': 346}), 13: (1, {'@': 346}), 14: (1, {'@': 346}), 15: (1, {'@': 346}), 16: (1, {'@': 346}), 17: (1, {'@': 346}), 18: (1, {'@': 346}), 19: (1, {'@': 346}), 20: (1, {'@': 346}), 21: (1, {'@': 346}), 40: (1, {'@': 346}), 22: (1, {'@': 346}), 23: (1, {'@': 346}), 24: (1, {'@': 346}), 25: (1, {'@': 346}), 26: (1, {'@': 346}), 27: (1, {'@': 346}), 28: (1, {'@': 346}), 29: (1, {'@': 346}), 30: (1, {'@': 346}), 2: (1, {'@': 346}), 31: (1, {'@': 346}), 4: (1, {'@': 346}), 41: (1, {'@': 346}), 32: (1, {'@': 346}), 33: (1, {'@': 346}), 34: (1, {'@': 346})}, 143: {107: (1, {'@': 396}), 3: (1, {'@': 396}), 99: (1, {'@': 396}), 19: (1, {'@': 396}), 108: (1, {'@': 396}), 100: (1, {'@': 396}), 96: (1, {'@': 396}), 97: (1, {'@': 396}), 109: (1, {'@': 396}), 110: (1, {'@': 396}), 111: (1, {'@': 396}), 112: (1, {'@': 396}), 113: (1, {'@': 396}), 114: (1, {'@': 396}), 115: (1, {'@': 396}), 116: (1, {'@': 396}), 95: (1, {'@': 396}), 117: (1, {'@': 396}), 31: (1, {'@': 396}), 98: (1, {'@': 396}), 4: (1, {'@': 396}), 118: (1, {'@': 396}), 119: (1, {'@': 396}), 120: (1, {'@': 396}), 121: (1, {'@': 396}), 0: (1, {'@': 396}), 42: (1, {'@': 396}), 1: (1, {'@': 396}), 35: (1, {'@': 396}), 101: (1, {'@': 396}), 2: (1, {'@': 396}), 16: (1, {'@': 396})}, 144: {3: (0, 300), 5: (1, {'@': 342}), 37: (1, {'@': 342}), 38: (1, {'@': 342}), 6: (1, {'@': 342}), 39: (1, {'@': 342}), 7: (1, {'@': 342}), 8: (1, {'@': 342}), 9: (1, {'@': 342}), 10: (1, {'@': 342}), 11: (1, {'@': 342}), 12: (1, {'@': 342}), 13: (1, {'@': 342}), 14: (1, {'@': 342}), 15: (1, {'@': 342}), 16: (1, {'@': 342}), 17: (1, {'@': 342}), 18: (1, {'@': 342}), 19: (1, {'@': 342}), 20: (1, {'@': 342}), 21: (1, {'@': 342}), 40: (1, {'@': 342}), 22: (1, {'@': 342}), 23: (1, {'@': 342}), 24: (1, {'@': 342}), 25: (1, {'@': 342}), 26: (1, {'@': 342}), 27: (1, {'@': 342}), 28: (1, {'@': 342}), 29: (1, {'@': 342}), 30: (1, {'@': 342}), 2: (1, {'@': 342}), 31: (1, {'@': 342}), 4: (1, {'@': 342}), 41: (1, {'@': 342}), 32: (1, {'@': 342}), 33: (1, {'@': 342}), 34: (1, {'@': 342})}, 145: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 62: (0, 359), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 51: (0, 417), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 146: {5: (1, {'@': 281}), 37: (1, {'@': 281}), 38: (1, {'@': 281}), 6: (1, {'@': 281}), 39: (1, {'@': 281}), 7: (1, {'@': 281}), 8: (1, {'@': 281}), 9: (1, {'@': 281}), 10: (1, {'@': 281}), 11: (1, {'@': 281}), 12: (1, {'@': 281}), 13: (1, {'@': 281}), 14: (1, {'@': 281}), 15: (1, {'@': 281}), 16: (1, {'@': 281}), 3: (1, {'@': 281}), 17: (1, {'@': 281}), 18: (1, {'@': 281}), 19: (1, {'@': 281}), 20: (1, {'@': 281}), 21: (1, {'@': 281}), 40: (1, {'@': 281}), 22: (1, {'@': 281}), 23: (1, {'@': 281}), 24: (1, {'@': 281}), 25: (1, {'@': 281}), 26: (1, {'@': 281}), 27: (1, {'@': 281}), 28: (1, {'@': 281}), 29: (1, {'@': 281}), 30: (1, {'@': 281}), 2: (1, {'@': 281}), 31: (1, {'@': 281}), 4: (1, {'@': 281}), 41: (1, {'@': 281}), 32: (1, {'@': 281}), 33: (1, {'@': 281}), 34: (1, {'@': 281})}, 147: {3: (0, 166), 5: (1, {'@': 309}), 37: (1, {'@': 309}), 38: (1, {'@': 309}), 6: (1, {'@': 309}), 39: (1, {'@': 309}), 7: (1, {'@': 309}), 8: (1, {'@': 309}), 9: (1, {'@': 309}), 10: (1, {'@': 309}), 11: (1, {'@': 309}), 12: (1, {'@': 309}), 13: (1, {'@': 309}), 14: (1, {'@': 309}), 15: (1, {'@': 309}), 16: (1, {'@': 309}), 17: (1, {'@': 309}), 18: (1, {'@': 309}), 19: (1, {'@': 309}), 20: (1, {'@': 309}), 21: (1, {'@': 309}), 40: (1, {'@': 309}), 22: (1, {'@': 309}), 23: (1, {'@': 309}), 24: (1, {'@': 309}), 25: (1, {'@': 309}), 26: (1, {'@': 309}), 27: (1, {'@': 309}), 28: (1, {'@': 309}), 29: (1, {'@': 309}), 30: (1, {'@': 309}), 2: (1, {'@': 309}), 31: (1, {'@': 309}), 4: (1, {'@': 309}), 41: (1, {'@': 309}), 32: (1, {'@': 309}), 33: (1, {'@': 309}), 34: (1, {'@': 309})}, 148: {43: (0, 383), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 149: {38: (0, 524), 102: (0, 299), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 300), 105: (0, 644), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 150: {1: (0, 164), 3: (1, {'@': 108})}, 151: {19: (0, 647), 118: (0, 389), 107: (1, {'@': 146}), 3: (1, {'@': 146}), 99: (1, {'@': 146}), 108: (1, {'@': 146}), 100: (1, {'@': 146}), 116: (1, {'@': 146}), 96: (1, {'@': 146}), 117: (1, {'@': 146}), 97: (1, {'@': 146}), 31: (1, {'@': 146}), 98: (1, {'@': 146}), 119: (1, {'@': 146}), 109: (1, {'@': 146}), 110: (1, {'@': 146}), 111: (1, {'@': 146}), 0: (1, {'@': 146}), 42: (1, {'@': 146}), 1: (1, {'@': 146}), 35: (1, {'@': 146}), 101: (1, {'@': 146}), 2: (1, {'@': 146}), 16: (1, {'@': 146})}, 152: {3: (0, 534), 36: (0, 380), 5: (1, {'@': 349}), 37: (1, {'@': 349}), 38: (1, {'@': 349}), 6: (1, {'@': 349}), 39: (1, {'@': 349}), 7: (1, {'@': 349}), 8: (1, {'@': 349}), 9: (1, {'@': 349}), 10: (1, {'@': 349}), 11: (1, {'@': 349}), 12: (1, {'@': 349}), 13: (1, {'@': 349}), 14: (1, {'@': 349}), 15: (1, {'@': 349}), 16: (1, {'@': 349}), 17: (1, {'@': 349}), 18: (1, {'@': 349}), 19: (1, {'@': 349}), 20: (1, {'@': 349}), 21: (1, {'@': 349}), 40: (1, {'@': 349}), 22: (1, {'@': 349}), 23: (1, {'@': 349}), 24: (1, {'@': 349}), 25: (1, {'@': 349}), 26: (1, {'@': 349}), 27: (1, {'@': 349}), 28: (1, {'@': 349}), 29: (1, {'@': 349}), 30: (1, {'@': 349}), 2: (1, {'@': 349}), 31: (1, {'@': 349}), 4: (1, {'@': 349}), 41: (1, {'@': 349}), 32: (1, {'@': 349}), 33: (1, {'@': 349}), 34: (1, {'@': 349})}, 153: {7: (0, 116), 43: (0, 228), 45: (0, 391), 44: (0, 111), 27: (0, 90), 18: (0, 282), 36: (0, 408), 12: (0, 23), 10: (0, 302), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 82: (0, 347), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 59: (0, 423), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 70: (0, 377), 39: (0, 394), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 365), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 379), 31: (0, 68), 60: (0, 272), 61: (0, 151), 80: (0, 468), 33: (0, 39), 63: (0, 172), 133: (0, 434), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 134: (0, 478), 135: (0, 488), 68: (0, 232), 69: (0, 174), 19: (0, 52), 73: (0, 406), 72: (0, 158), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 71: (0, 493), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 74: (0, 435), 81: (0, 339), 3: (0, 534), 32: (0, 462), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503), 2: (1, {'@': 92})}, 154: {28: (0, 80), 136: (0, 481), 3: (0, 300), 2: (1, {'@': 382})}, 155: {119: (0, 570), 107: (1, {'@': 145}), 3: (1, {'@': 145}), 99: (1, {'@': 145}), 108: (1, {'@': 145}), 100: (1, {'@': 145}), 116: (1, {'@': 145}), 96: (1, {'@': 145}), 117: (1, {'@': 145}), 97: (1, {'@': 145}), 31: (1, {'@': 145}), 98: (1, {'@': 145}), 109: (1, {'@': 145}), 110: (1, {'@': 145}), 111: (1, {'@': 145}), 0: (1, {'@': 145}), 42: (1, {'@': 145}), 1: (1, {'@': 145}), 35: (1, {'@': 145}), 101: (1, {'@': 145}), 2: (1, {'@': 145}), 16: (1, {'@': 145})}, 156: {99: (1, {'@': 206}), 3: (1, {'@': 206}), 31: (1, {'@': 206}), 4: (1, {'@': 206}), 0: (1, {'@': 206}), 101: (1, {'@': 206}), 42: (1, {'@': 206}), 16: (1, {'@': 206}), 1: (1, {'@': 206}), 35: (1, {'@': 206}), 2: (1, {'@': 206})}, 157: {38: (0, 524), 36: (0, 149), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 534), 105: (0, 644), 102: (0, 277), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 158: {107: (1, {'@': 164}), 3: (1, {'@': 164}), 99: (1, {'@': 164}), 19: (1, {'@': 164}), 108: (1, {'@': 164}), 100: (1, {'@': 164}), 96: (1, {'@': 164}), 97: (1, {'@': 164}), 109: (1, {'@': 164}), 110: (1, {'@': 164}), 111: (1, {'@': 164}), 113: (1, {'@': 164}), 116: (1, {'@': 164}), 95: (1, {'@': 164}), 117: (1, {'@': 164}), 31: (1, {'@': 164}), 98: (1, {'@': 164}), 118: (1, {'@': 164}), 119: (1, {'@': 164}), 112: (1, {'@': 164}), 120: (1, {'@': 164}), 115: (1, {'@': 164}), 0: (1, {'@': 164}), 42: (1, {'@': 164}), 1: (1, {'@': 164}), 35: (1, {'@': 164}), 101: (1, {'@': 164}), 2: (1, {'@': 164}), 16: (1, {'@': 164})}, 159: {99: (1, {'@': 207}), 3: (1, {'@': 207}), 31: (1, {'@': 207}), 4: (1, {'@': 207}), 0: (1, {'@': 207}), 101: (1, {'@': 207}), 42: (1, {'@': 207}), 16: (1, {'@': 207}), 1: (1, {'@': 207}), 35: (1, {'@': 207}), 2: (1, {'@': 207})}, 160: {5: (1, {'@': 358}), 37: (1, {'@': 358}), 38: (1, {'@': 358}), 6: (1, {'@': 358}), 39: (1, {'@': 358}), 7: (1, {'@': 358}), 8: (1, {'@': 358}), 9: (1, {'@': 358}), 10: (1, {'@': 358}), 11: (1, {'@': 358}), 12: (1, {'@': 358}), 13: (1, {'@': 358}), 14: (1, {'@': 358}), 15: (1, {'@': 358}), 16: (1, {'@': 358}), 3: (1, {'@': 358}), 17: (1, {'@': 358}), 18: (1, {'@': 358}), 19: (1, {'@': 358}), 20: (1, {'@': 358}), 21: (1, {'@': 358}), 40: (1, {'@': 358}), 22: (1, {'@': 358}), 23: (1, {'@': 358}), 24: (1, {'@': 358}), 25: (1, {'@': 358}), 26: (1, {'@': 358}), 27: (1, {'@': 358}), 28: (1, {'@': 358}), 29: (1, {'@': 358}), 30: (1, {'@': 358}), 2: (1, {'@': 358}), 31: (1, {'@': 358}), 4: (1, {'@': 358}), 41: (1, {'@': 358}), 32: (1, {'@': 358}), 33: (1, {'@': 358}), 34: (1, {'@': 358})}, 161: {35: (0, 94), 29: (0, 456)}, 162: {99: (1, {'@': 217}), 3: (1, {'@': 217}), 31: (1, {'@': 217}), 4: (1, {'@': 217}), 0: (1, {'@': 217}), 101: (1, {'@': 217}), 42: (1, {'@': 217}), 16: (1, {'@': 217}), 1: (1, {'@': 217}), 35: (1, {'@': 217}), 2: (1, {'@': 217})}, 163: {5: (1, {'@': 312}), 37: (1, {'@': 312}), 38: (1, {'@': 312}), 6: (1, {'@': 312}), 39: (1, {'@': 312}), 7: (1, {'@': 312}), 8: (1, {'@': 312}), 9: (1, {'@': 312}), 10: (1, {'@': 312}), 11: (1, {'@': 312}), 12: (1, {'@': 312}), 13: (1, {'@': 312}), 14: (1, {'@': 312}), 15: (1, {'@': 312}), 16: (1, {'@': 312}), 3: (1, {'@': 312}), 17: (1, {'@': 312}), 18: (1, {'@': 312}), 19: (1, {'@': 312}), 20: (1, {'@': 312}), 21: (1, {'@': 312}), 40: (1, {'@': 312}), 22: (1, {'@': 312}), 23: (1, {'@': 312}), 24: (1, {'@': 312}), 25: (1, {'@': 312}), 26: (1, {'@': 312}), 27: (1, {'@': 312}), 28: (1, {'@': 312}), 29: (1, {'@': 312}), 30: (1, {'@': 312}), 2: (1, {'@': 312}), 31: (1, {'@': 312}), 4: (1, {'@': 312}), 41: (1, {'@': 312}), 32: (1, {'@': 312}), 33: (1, {'@': 312}), 34: (1, {'@': 312})}, 164: {28: (0, 69), 137: (0, 244), 4: (0, 422), 138: (0, 54)}, 165: {1: (0, 617), 42: (0, 594)}, 166: {5: (1, {'@': 308}), 37: (1, {'@': 308}), 38: (1, {'@': 308}), 6: (1, {'@': 308}), 39: (1, {'@': 308}), 7: (1, {'@': 308}), 8: (1, {'@': 308}), 9: (1, {'@': 308}), 10: (1, {'@': 308}), 11: (1, {'@': 308}), 12: (1, {'@': 308}), 13: (1, {'@': 308}), 14: (1, {'@': 308}), 15: (1, {'@': 308}), 16: (1, {'@': 308}), 3: (1, {'@': 308}), 17: (1, {'@': 308}), 18: (1, {'@': 308}), 19: (1, {'@': 308}), 20: (1, {'@': 308}), 21: (1, {'@': 308}), 40: (1, {'@': 308}), 22: (1, {'@': 308}), 23: (1, {'@': 308}), 24: (1, {'@': 308}), 25: (1, {'@': 308}), 26: (1, {'@': 308}), 27: (1, {'@': 308}), 28: (1, {'@': 308}), 29: (1, {'@': 308}), 30: (1, {'@': 308}), 2: (1, {'@': 308}), 31: (1, {'@': 308}), 4: (1, {'@': 308}), 41: (1, {'@': 308}), 32: (1, {'@': 308}), 33: (1, {'@': 308}), 34: (1, {'@': 308})}, 167: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 36: (0, 375), 56: (0, 376), 4: (0, 366), 51: (0, 152), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 62: (0, 121), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 168: {117: (0, 459), 108: (0, 634), 111: (0, 531), 110: (0, 546), 107: (0, 368), 109: (0, 426), 96: (1, {'@': 134}), 97: (1, {'@': 134}), 3: (1, {'@': 134}), 31: (1, {'@': 134}), 98: (1, {'@': 134}), 99: (1, {'@': 134}), 100: (1, {'@': 134}), 0: (1, {'@': 134}), 101: (1, {'@': 134}), 16: (1, {'@': 134}), 42: (1, {'@': 134}), 1: (1, {'@': 134}), 35: (1, {'@': 134}), 2: (1, {'@': 134})}, 169: {3: (0, 534), 36: (0, 182)}, 170: {43: (0, 558), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 42: (0, 504), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 171: {5: (1, {'@': 383}), 37: (1, {'@': 383}), 38: (1, {'@': 383}), 6: (1, {'@': 383}), 39: (1, {'@': 383}), 7: (1, {'@': 383}), 8: (1, {'@': 383}), 9: (1, {'@': 383}), 10: (1, {'@': 383}), 11: (1, {'@': 383}), 12: (1, {'@': 383}), 13: (1, {'@': 383}), 14: (1, {'@': 383}), 15: (1, {'@': 383}), 16: (1, {'@': 383}), 3: (1, {'@': 383}), 17: (1, {'@': 383}), 18: (1, {'@': 383}), 19: (1, {'@': 383}), 20: (1, {'@': 383}), 21: (1, {'@': 383}), 40: (1, {'@': 383}), 22: (1, {'@': 383}), 23: (1, {'@': 383}), 24: (1, {'@': 383}), 25: (1, {'@': 383}), 26: (1, {'@': 383}), 27: (1, {'@': 383}), 28: (1, {'@': 383}), 29: (1, {'@': 383}), 30: (1, {'@': 383}), 2: (1, {'@': 383}), 31: (1, {'@': 383}), 4: (1, {'@': 383}), 41: (1, {'@': 383}), 32: (1, {'@': 383}), 33: (1, {'@': 383}), 34: (1, {'@': 383})}, 172: {5: (1, {'@': 268}), 37: (1, {'@': 268}), 38: (1, {'@': 268}), 6: (1, {'@': 268}), 39: (1, {'@': 268}), 7: (1, {'@': 268}), 8: (1, {'@': 268}), 9: (1, {'@': 268}), 10: (1, {'@': 268}), 11: (1, {'@': 268}), 12: (1, {'@': 268}), 13: (1, {'@': 268}), 14: (1, {'@': 268}), 15: (1, {'@': 268}), 16: (1, {'@': 268}), 3: (1, {'@': 268}), 17: (1, {'@': 268}), 18: (1, {'@': 268}), 19: (1, {'@': 268}), 20: (1, {'@': 268}), 21: (1, {'@': 268}), 40: (1, {'@': 268}), 22: (1, {'@': 268}), 23: (1, {'@': 268}), 24: (1, {'@': 268}), 25: (1, {'@': 268}), 26: (1, {'@': 268}), 27: (1, {'@': 268}), 28: (1, {'@': 268}), 29: (1, {'@': 268}), 30: (1, {'@': 268}), 2: (1, {'@': 268}), 31: (1, {'@': 268}), 4: (1, {'@': 268}), 41: (1, {'@': 268}), 32: (1, {'@': 268}), 33: (1, {'@': 268}), 34: (1, {'@': 268})}, 173: {3: (0, 534), 36: (0, 208)}, 174: {107: (1, {'@': 161}), 3: (1, {'@': 161}), 99: (1, {'@': 161}), 19: (1, {'@': 161}), 108: (1, {'@': 161}), 100: (1, {'@': 161}), 96: (1, {'@': 161}), 97: (1, {'@': 161}), 109: (1, {'@': 161}), 110: (1, {'@': 161}), 111: (1, {'@': 161}), 113: (1, {'@': 161}), 116: (1, {'@': 161}), 95: (1, {'@': 161}), 117: (1, {'@': 161}), 31: (1, {'@': 161}), 98: (1, {'@': 161}), 118: (1, {'@': 161}), 119: (1, {'@': 161}), 112: (1, {'@': 161}), 120: (1, {'@': 161}), 115: (1, {'@': 161}), 0: (1, {'@': 161}), 42: (1, {'@': 161}), 1: (1, {'@': 161}), 35: (1, {'@': 161}), 101: (1, {'@': 161}), 2: (1, {'@': 161}), 16: (1, {'@': 161})}, 175: {3: (0, 534), 36: (0, 480), 40: (1, {'@': 291}), 38: (1, {'@': 291})}, 176: {43: (0, 547), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 177: {29: (0, 475), 106: (0, 371), 107: (1, {'@': 397}), 3: (1, {'@': 397}), 99: (1, {'@': 397}), 19: (1, {'@': 397}), 108: (1, {'@': 397}), 100: (1, {'@': 397}), 96: (1, {'@': 397}), 97: (1, {'@': 397}), 109: (1, {'@': 397}), 110: (1, {'@': 397}), 111: (1, {'@': 397}), 112: (1, {'@': 397}), 113: (1, {'@': 397}), 114: (1, {'@': 397}), 115: (1, {'@': 397}), 116: (1, {'@': 397}), 95: (1, {'@': 397}), 117: (1, {'@': 397}), 31: (1, {'@': 397}), 98: (1, {'@': 397}), 4: (1, {'@': 397}), 118: (1, {'@': 397}), 119: (1, {'@': 397}), 120: (1, {'@': 397}), 121: (1, {'@': 397}), 0: (1, {'@': 397}), 42: (1, {'@': 397}), 1: (1, {'@': 397}), 35: (1, {'@': 397}), 101: (1, {'@': 397}), 2: (1, {'@': 397}), 16: (1, {'@': 397})}, 178: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 588), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 14: (0, 612), 65: (0, 168), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 89: (0, 104), 87: (0, 544), 33: (0, 39), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 179: {43: (0, 563), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 180: {3: (0, 300), 5: (1, {'@': 85}), 37: (1, {'@': 85}), 38: (1, {'@': 85}), 6: (1, {'@': 85}), 39: (1, {'@': 85}), 7: (1, {'@': 85}), 8: (1, {'@': 85}), 9: (1, {'@': 85}), 10: (1, {'@': 85}), 11: (1, {'@': 85}), 12: (1, {'@': 85}), 13: (1, {'@': 85}), 14: (1, {'@': 85}), 15: (1, {'@': 85}), 16: (1, {'@': 85}), 17: (1, {'@': 85}), 18: (1, {'@': 85}), 19: (1, {'@': 85}), 20: (1, {'@': 85}), 21: (1, {'@': 85}), 40: (1, {'@': 85}), 22: (1, {'@': 85}), 23: (1, {'@': 85}), 24: (1, {'@': 85}), 25: (1, {'@': 85}), 26: (1, {'@': 85}), 27: (1, {'@': 85}), 28: (1, {'@': 85}), 29: (1, {'@': 85}), 30: (1, {'@': 85}), 2: (1, {'@': 85}), 31: (1, {'@': 85}), 4: (1, {'@': 85}), 41: (1, {'@': 85}), 32: (1, {'@': 85}), 33: (1, {'@': 85}), 34: (1, {'@': 85})}, 181: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 62: (0, 542), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 51: (0, 515), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 182: {3: (0, 300), 5: (1, {'@': 79}), 37: (1, {'@': 79}), 38: (1, {'@': 79}), 6: (1, {'@': 79}), 39: (1, {'@': 79}), 7: (1, {'@': 79}), 8: (1, {'@': 79}), 9: (1, {'@': 79}), 10: (1, {'@': 79}), 11: (1, {'@': 79}), 12: (1, {'@': 79}), 13: (1, {'@': 79}), 14: (1, {'@': 79}), 15: (1, {'@': 79}), 16: (1, {'@': 79}), 17: (1, {'@': 79}), 18: (1, {'@': 79}), 19: (1, {'@': 79}), 20: (1, {'@': 79}), 21: (1, {'@': 79}), 40: (1, {'@': 79}), 22: (1, {'@': 79}), 23: (1, {'@': 79}), 24: (1, {'@': 79}), 25: (1, {'@': 79}), 26: (1, {'@': 79}), 27: (1, {'@': 79}), 28: (1, {'@': 79}), 29: (1, {'@': 79}), 30: (1, {'@': 79}), 2: (1, {'@': 79}), 31: (1, {'@': 79}), 4: (1, {'@': 79}), 41: (1, {'@': 79}), 32: (1, {'@': 79}), 33: (1, {'@': 79}), 34: (1, {'@': 79})}, 183: {35: (0, 122)}, 184: {40: (1, {'@': 415}), 3: (1, {'@': 415}), 38: (1, {'@': 415})}, 185: {43: (0, 117), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 186: {43: (0, 529), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 187: {3: (0, 534), 36: (0, 624), 40: (1, {'@': 289}), 38: (1, {'@': 289})}, 188: {3: (0, 300), 5: (1, {'@': 83}), 37: (1, {'@': 83}), 38: (1, {'@': 83}), 6: (1, {'@': 83}), 39: (1, {'@': 83}), 7: (1, {'@': 83}), 8: (1, {'@': 83}), 9: (1, {'@': 83}), 10: (1, {'@': 83}), 11: (1, {'@': 83}), 12: (1, {'@': 83}), 13: (1, {'@': 83}), 14: (1, {'@': 83}), 15: (1, {'@': 83}), 16: (1, {'@': 83}), 17: (1, {'@': 83}), 18: (1, {'@': 83}), 19: (1, {'@': 83}), 20: (1, {'@': 83}), 21: (1, {'@': 83}), 40: (1, {'@': 83}), 22: (1, {'@': 83}), 23: (1, {'@': 83}), 24: (1, {'@': 83}), 25: (1, {'@': 83}), 26: (1, {'@': 83}), 27: (1, {'@': 83}), 28: (1, {'@': 83}), 29: (1, {'@': 83}), 30: (1, {'@': 83}), 2: (1, {'@': 83}), 31: (1, {'@': 83}), 4: (1, {'@': 83}), 41: (1, {'@': 83}), 32: (1, {'@': 83}), 33: (1, {'@': 83}), 34: (1, {'@': 83})}, 189: {119: (0, 570), 107: (1, {'@': 144}), 3: (1, {'@': 144}), 99: (1, {'@': 144}), 108: (1, {'@': 144}), 100: (1, {'@': 144}), 116: (1, {'@': 144}), 96: (1, {'@': 144}), 117: (1, {'@': 144}), 97: (1, {'@': 144}), 31: (1, {'@': 144}), 98: (1, {'@': 144}), 109: (1, {'@': 144}), 110: (1, {'@': 144}), 111: (1, {'@': 144}), 0: (1, {'@': 144}), 42: (1, {'@': 144}), 1: (1, {'@': 144}), 35: (1, {'@': 144}), 101: (1, {'@': 144}), 2: (1, {'@': 144}), 16: (1, {'@': 144})}, 190: {3: (0, 300), 5: (1, {'@': 96}), 39: (1, {'@': 96}), 7: (1, {'@': 96}), 8: (1, {'@': 96}), 9: (1, {'@': 96}), 10: (1, {'@': 96}), 11: (1, {'@': 96}), 12: (1, {'@': 96}), 13: (1, {'@': 96}), 14: (1, {'@': 96}), 15: (1, {'@': 96}), 16: (1, {'@': 96}), 17: (1, {'@': 96}), 18: (1, {'@': 96}), 19: (1, {'@': 96}), 20: (1, {'@': 96}), 21: (1, {'@': 96}), 22: (1, {'@': 96}), 23: (1, {'@': 96}), 24: (1, {'@': 96}), 25: (1, {'@': 96}), 26: (1, {'@': 96}), 27: (1, {'@': 96}), 28: (1, {'@': 96}), 29: (1, {'@': 96}), 30: (1, {'@': 96}), 2: (1, {'@': 96}), 31: (1, {'@': 96}), 4: (1, {'@': 96}), 32: (1, {'@': 96}), 33: (1, {'@': 96}), 34: (1, {'@': 96})}, 191: {4: (0, 576)}, 192: {5: (1, {'@': 299}), 37: (1, {'@': 299}), 38: (1, {'@': 299}), 6: (1, {'@': 299}), 39: (1, {'@': 299}), 7: (1, {'@': 299}), 8: (1, {'@': 299}), 9: (1, {'@': 299}), 10: (1, {'@': 299}), 11: (1, {'@': 299}), 12: (1, {'@': 299}), 13: (1, {'@': 299}), 14: (1, {'@': 299}), 15: (1, {'@': 299}), 16: (1, {'@': 299}), 3: (1, {'@': 299}), 17: (1, {'@': 299}), 18: (1, {'@': 299}), 19: (1, {'@': 299}), 20: (1, {'@': 299}), 21: (1, {'@': 299}), 40: (1, {'@': 299}), 22: (1, {'@': 299}), 23: (1, {'@': 299}), 24: (1, {'@': 299}), 25: (1, {'@': 299}), 26: (1, {'@': 299}), 27: (1, {'@': 299}), 28: (1, {'@': 299}), 29: (1, {'@': 299}), 30: (1, {'@': 299}), 2: (1, {'@': 299}), 31: (1, {'@': 299}), 4: (1, {'@': 299}), 41: (1, {'@': 299}), 32: (1, {'@': 299}), 33: (1, {'@': 299}), 34: (1, {'@': 299})}, 193: {3: (0, 300), 5: (1, {'@': 93}), 39: (1, {'@': 93}), 7: (1, {'@': 93}), 8: (1, {'@': 93}), 9: (1, {'@': 93}), 10: (1, {'@': 93}), 11: (1, {'@': 93}), 12: (1, {'@': 93}), 13: (1, {'@': 93}), 14: (1, {'@': 93}), 15: (1, {'@': 93}), 16: (1, {'@': 93}), 17: (1, {'@': 93}), 18: (1, {'@': 93}), 19: (1, {'@': 93}), 20: (1, {'@': 93}), 21: (1, {'@': 93}), 22: (1, {'@': 93}), 23: (1, {'@': 93}), 24: (1, {'@': 93}), 25: (1, {'@': 93}), 26: (1, {'@': 93}), 27: (1, {'@': 93}), 28: (1, {'@': 93}), 29: (1, {'@': 93}), 30: (1, {'@': 93}), 2: (1, {'@': 93}), 31: (1, {'@': 93}), 4: (1, {'@': 93}), 32: (1, {'@': 93}), 33: (1, {'@': 93}), 34: (1, {'@': 93})}, 194: {4: (0, 595)}, 195: {5: (1, {'@': 227}), 37: (1, {'@': 227}), 38: (1, {'@': 227}), 6: (1, {'@': 227}), 39: (1, {'@': 227}), 7: (1, {'@': 227}), 8: (1, {'@': 227}), 9: (1, {'@': 227}), 10: (1, {'@': 227}), 11: (1, {'@': 227}), 12: (1, {'@': 227}), 13: (1, {'@': 227}), 14: (1, {'@': 227}), 15: (1, {'@': 227}), 16: (1, {'@': 227}), 3: (1, {'@': 227}), 17: (1, {'@': 227}), 18: (1, {'@': 227}), 19: (1, {'@': 227}), 20: (1, {'@': 227}), 21: (1, {'@': 227}), 40: (1, {'@': 227}), 22: (1, {'@': 227}), 23: (1, {'@': 227}), 24: (1, {'@': 227}), 25: (1, {'@': 227}), 26: (1, {'@': 227}), 27: (1, {'@': 227}), 28: (1, {'@': 227}), 29: (1, {'@': 227}), 30: (1, {'@': 227}), 2: (1, {'@': 227}), 31: (1, {'@': 227}), 4: (1, {'@': 227}), 41: (1, {'@': 227}), 32: (1, {'@': 227}), 33: (1, {'@': 227}), 34: (1, {'@': 227})}, 196: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 51: (0, 402), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 36: (0, 496), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 62: (0, 632), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 197: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 62: (0, 128), 55: (0, 588), 51: (0, 91), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 198: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 51: (0, 432), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503), 6: (1, {'@': 71})}, 199: {21: (0, 514), 3: (0, 300)}, 200: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 62: (0, 5), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 51: (0, 17), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 201: {2: (1, {'@': 192}), 1: (1, {'@': 192})}, 202: {5: (1, {'@': 225}), 37: (1, {'@': 225}), 38: (1, {'@': 225}), 6: (1, {'@': 225}), 39: (1, {'@': 225}), 7: (1, {'@': 225}), 8: (1, {'@': 225}), 9: (1, {'@': 225}), 10: (1, {'@': 225}), 11: (1, {'@': 225}), 12: (1, {'@': 225}), 13: (1, {'@': 225}), 14: (1, {'@': 225}), 15: (1, {'@': 225}), 16: (1, {'@': 225}), 3: (1, {'@': 225}), 17: (1, {'@': 225}), 18: (1, {'@': 225}), 19: (1, {'@': 225}), 20: (1, {'@': 225}), 21: (1, {'@': 225}), 40: (1, {'@': 225}), 22: (1, {'@': 225}), 23: (1, {'@': 225}), 24: (1, {'@': 225}), 25: (1, {'@': 225}), 26: (1, {'@': 225}), 27: (1, {'@': 225}), 28: (1, {'@': 225}), 29: (1, {'@': 225}), 30: (1, {'@': 225}), 2: (1, {'@': 225}), 31: (1, {'@': 225}), 4: (1, {'@': 225}), 41: (1, {'@': 225}), 32: (1, {'@': 225}), 33: (1, {'@': 225}), 34: (1, {'@': 225})}, 203: {36: (0, 95), 3: (0, 534), 5: (1, {'@': 357}), 37: (1, {'@': 357}), 38: (1, {'@': 357}), 6: (1, {'@': 357}), 39: (1, {'@': 357}), 7: (1, {'@': 357}), 8: (1, {'@': 357}), 9: (1, {'@': 357}), 10: (1, {'@': 357}), 11: (1, {'@': 357}), 12: (1, {'@': 357}), 13: (1, {'@': 357}), 14: (1, {'@': 357}), 15: (1, {'@': 357}), 16: (1, {'@': 357}), 17: (1, {'@': 357}), 18: (1, {'@': 357}), 19: (1, {'@': 357}), 20: (1, {'@': 357}), 21: (1, {'@': 357}), 40: (1, {'@': 357}), 22: (1, {'@': 357}), 23: (1, {'@': 357}), 24: (1, {'@': 357}), 25: (1, {'@': 357}), 26: (1, {'@': 357}), 27: (1, {'@': 357}), 28: (1, {'@': 357}), 29: (1, {'@': 357}), 30: (1, {'@': 357}), 2: (1, {'@': 357}), 31: (1, {'@': 357}), 4: (1, {'@': 357}), 41: (1, {'@': 357}), 32: (1, {'@': 357}), 33: (1, {'@': 357}), 34: (1, {'@': 357})}, 204: {36: (0, 460), 3: (0, 534), 2: (0, 367)}, 205: {126: (0, 100), 28: (0, 584), 4: (0, 205)}, 206: {1: (1, {'@': 254}), 42: (1, {'@': 254})}, 207: {1: (0, 440), 42: (0, 225)}, 208: {3: (0, 300), 5: (1, {'@': 78}), 37: (1, {'@': 78}), 38: (1, {'@': 78}), 6: (1, {'@': 78}), 39: (1, {'@': 78}), 7: (1, {'@': 78}), 8: (1, {'@': 78}), 9: (1, {'@': 78}), 10: (1, {'@': 78}), 11: (1, {'@': 78}), 12: (1, {'@': 78}), 13: (1, {'@': 78}), 14: (1, {'@': 78}), 15: (1, {'@': 78}), 16: (1, {'@': 78}), 17: (1, {'@': 78}), 18: (1, {'@': 78}), 19: (1, {'@': 78}), 20: (1, {'@': 78}), 21: (1, {'@': 78}), 40: (1, {'@': 78}), 22: (1, {'@': 78}), 23: (1, {'@': 78}), 24: (1, {'@': 78}), 25: (1, {'@': 78}), 26: (1, {'@': 78}), 27: (1, {'@': 78}), 28: (1, {'@': 78}), 29: (1, {'@': 78}), 30: (1, {'@': 78}), 2: (1, {'@': 78}), 31: (1, {'@': 78}), 4: (1, {'@': 78}), 41: (1, {'@': 78}), 32: (1, {'@': 78}), 33: (1, {'@': 78}), 34: (1, {'@': 78})}, 209: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 51: (0, 487), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 62: (0, 441), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 210: {41: (0, 242), 139: (0, 623), 36: (0, 249), 140: (0, 286), 3: (0, 534)}, 211: {8: (0, 449), 36: (0, 352), 3: (0, 534)}, 212: {35: (0, 292)}, 213: {43: (0, 45), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 214: {5: (1, {'@': 328}), 37: (1, {'@': 328}), 38: (1, {'@': 328}), 6: (1, {'@': 328}), 39: (1, {'@': 328}), 7: (1, {'@': 328}), 8: (1, {'@': 328}), 9: (1, {'@': 328}), 10: (1, {'@': 328}), 11: (1, {'@': 328}), 12: (1, {'@': 328}), 13: (1, {'@': 328}), 14: (1, {'@': 328}), 15: (1, {'@': 328}), 16: (1, {'@': 328}), 3: (1, {'@': 328}), 17: (1, {'@': 328}), 18: (1, {'@': 328}), 19: (1, {'@': 328}), 20: (1, {'@': 328}), 21: (1, {'@': 328}), 40: (1, {'@': 328}), 22: (1, {'@': 328}), 23: (1, {'@': 328}), 24: (1, {'@': 328}), 25: (1, {'@': 328}), 26: (1, {'@': 328}), 27: (1, {'@': 328}), 28: (1, {'@': 328}), 29: (1, {'@': 328}), 30: (1, {'@': 328}), 2: (1, {'@': 328}), 31: (1, {'@': 328}), 4: (1, {'@': 328}), 41: (1, {'@': 328}), 32: (1, {'@': 328}), 33: (1, {'@': 328}), 34: (1, {'@': 328})}, 215: {19: (0, 647), 118: (0, 389), 107: (1, {'@': 147}), 3: (1, {'@': 147}), 99: (1, {'@': 147}), 108: (1, {'@': 147}), 100: (1, {'@': 147}), 116: (1, {'@': 147}), 96: (1, {'@': 147}), 117: (1, {'@': 147}), 97: (1, {'@': 147}), 31: (1, {'@': 147}), 98: (1, {'@': 147}), 119: (1, {'@': 147}), 109: (1, {'@': 147}), 110: (1, {'@': 147}), 111: (1, {'@': 147}), 0: (1, {'@': 147}), 42: (1, {'@': 147}), 1: (1, {'@': 147}), 35: (1, {'@': 147}), 101: (1, {'@': 147}), 2: (1, {'@': 147}), 16: (1, {'@': 147})}, 216: {4: (0, 263)}, 217: {97: (0, 178), 98: (0, 318), 96: (1, {'@': 129}), 3: (1, {'@': 129}), 31: (1, {'@': 129}), 99: (1, {'@': 129}), 100: (1, {'@': 129}), 0: (1, {'@': 129}), 101: (1, {'@': 129}), 16: (1, {'@': 129}), 42: (1, {'@': 129}), 1: (1, {'@': 129}), 35: (1, {'@': 129}), 2: (1, {'@': 129})}, 218: {98: (0, 318), 97: (0, 178), 96: (1, {'@': 130}), 3: (1, {'@': 130}), 31: (1, {'@': 130}), 99: (1, {'@': 130}), 100: (1, {'@': 130}), 0: (1, {'@': 130}), 101: (1, {'@': 130}), 16: (1, {'@': 130}), 42: (1, {'@': 130}), 1: (1, {'@': 130}), 35: (1, {'@': 130}), 2: (1, {'@': 130})}, 219: {3: (0, 11), 5: (1, {'@': 315}), 37: (1, {'@': 315}), 38: (1, {'@': 315}), 6: (1, {'@': 315}), 39: (1, {'@': 315}), 7: (1, {'@': 315}), 8: (1, {'@': 315}), 9: (1, {'@': 315}), 10: (1, {'@': 315}), 11: (1, {'@': 315}), 12: (1, {'@': 315}), 13: (1, {'@': 315}), 14: (1, {'@': 315}), 15: (1, {'@': 315}), 16: (1, {'@': 315}), 17: (1, {'@': 315}), 18: (1, {'@': 315}), 19: (1, {'@': 315}), 20: (1, {'@': 315}), 21: (1, {'@': 315}), 40: (1, {'@': 315}), 22: (1, {'@': 315}), 23: (1, {'@': 315}), 24: (1, {'@': 315}), 25: (1, {'@': 315}), 26: (1, {'@': 315}), 27: (1, {'@': 315}), 28: (1, {'@': 315}), 29: (1, {'@': 315}), 30: (1, {'@': 315}), 2: (1, {'@': 315}), 31: (1, {'@': 315}), 4: (1, {'@': 315}), 41: (1, {'@': 315}), 32: (1, {'@': 315}), 33: (1, {'@': 315}), 34: (1, {'@': 315})}, 220: {107: (1, {'@': 177}), 3: (1, {'@': 177}), 99: (1, {'@': 177}), 19: (1, {'@': 177}), 108: (1, {'@': 177}), 100: (1, {'@': 177}), 96: (1, {'@': 177}), 97: (1, {'@': 177}), 109: (1, {'@': 177}), 110: (1, {'@': 177}), 111: (1, {'@': 177}), 113: (1, {'@': 177}), 116: (1, {'@': 177}), 95: (1, {'@': 177}), 117: (1, {'@': 177}), 31: (1, {'@': 177}), 98: (1, {'@': 177}), 118: (1, {'@': 177}), 119: (1, {'@': 177}), 112: (1, {'@': 177}), 120: (1, {'@': 177}), 115: (1, {'@': 177}), 0: (1, {'@': 177}), 42: (1, {'@': 177}), 1: (1, {'@': 177}), 35: (1, {'@': 177}), 101: (1, {'@': 177}), 2: (1, {'@': 177}), 16: (1, {'@': 177})}, 221: {28: (0, 247), 58: (0, 177), 50: (0, 363), 4: (0, 284), 78: (0, 413)}, 222: {43: (0, 614), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 49: (0, 631), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 223: {95: (0, 132), 115: (0, 571), 120: (0, 557), 112: (0, 645), 107: (1, {'@': 150}), 3: (1, {'@': 150}), 99: (1, {'@': 150}), 19: (1, {'@': 150}), 108: (1, {'@': 150}), 100: (1, {'@': 150}), 96: (1, {'@': 150}), 97: (1, {'@': 150}), 109: (1, {'@': 150}), 110: (1, {'@': 150}), 111: (1, {'@': 150}), 116: (1, {'@': 150}), 117: (1, {'@': 150}), 31: (1, {'@': 150}), 98: (1, {'@': 150}), 118: (1, {'@': 150}), 119: (1, {'@': 150}), 0: (1, {'@': 150}), 42: (1, {'@': 150}), 1: (1, {'@': 150}), 35: (1, {'@': 150}), 101: (1, {'@': 150}), 2: (1, {'@': 150}), 16: (1, {'@': 150})}, 224: {99: (1, {'@': 205}), 3: (1, {'@': 205}), 31: (1, {'@': 205}), 4: (1, {'@': 205}), 0: (1, {'@': 205}), 101: (1, {'@': 205}), 42: (1, {'@': 205}), 16: (1, {'@': 205}), 1: (1, {'@': 205}), 35: (1, {'@': 205}), 2: (1, {'@': 205})}, 225: {107: (1, {'@': 176}), 3: (1, {'@': 176}), 99: (1, {'@': 176}), 19: (1, {'@': 176}), 108: (1, {'@': 176}), 100: (1, {'@': 176}), 96: (1, {'@': 176}), 97: (1, {'@': 176}), 109: (1, {'@': 176}), 110: (1, {'@': 176}), 111: (1, {'@': 176}), 113: (1, {'@': 176}), 116: (1, {'@': 176}), 95: (1, {'@': 176}), 117: (1, {'@': 176}), 31: (1, {'@': 176}), 98: (1, {'@': 176}), 118: (1, {'@': 176}), 119: (1, {'@': 176}), 112: (1, {'@': 176}), 120: (1, {'@': 176}), 115: (1, {'@': 176}), 0: (1, {'@': 176}), 42: (1, {'@': 176}), 1: (1, {'@': 176}), 35: (1, {'@': 176}), 101: (1, {'@': 176}), 2: (1, {'@': 176}), 16: (1, {'@': 176})}, 226: {107: (1, {'@': 160}), 3: (1, {'@': 160}), 99: (1, {'@': 160}), 19: (1, {'@': 160}), 108: (1, {'@': 160}), 100: (1, {'@': 160}), 96: (1, {'@': 160}), 97: (1, {'@': 160}), 109: (1, {'@': 160}), 110: (1, {'@': 160}), 111: (1, {'@': 160}), 113: (1, {'@': 160}), 116: (1, {'@': 160}), 95: (1, {'@': 160}), 117: (1, {'@': 160}), 31: (1, {'@': 160}), 98: (1, {'@': 160}), 118: (1, {'@': 160}), 119: (1, {'@': 160}), 112: (1, {'@': 160}), 120: (1, {'@': 160}), 115: (1, {'@': 160}), 0: (1, {'@': 160}), 42: (1, {'@': 160}), 1: (1, {'@': 160}), 35: (1, {'@': 160}), 101: (1, {'@': 160}), 2: (1, {'@': 160}), 16: (1, {'@': 160})}, 227: {107: (1, {'@': 157}), 3: (1, {'@': 157}), 99: (1, {'@': 157}), 19: (1, {'@': 157}), 108: (1, {'@': 157}), 100: (1, {'@': 157}), 96: (1, {'@': 157}), 97: (1, {'@': 157}), 109: (1, {'@': 157}), 110: (1, {'@': 157}), 111: (1, {'@': 157}), 113: (1, {'@': 157}), 116: (1, {'@': 157}), 95: (1, {'@': 157}), 117: (1, {'@': 157}), 31: (1, {'@': 157}), 98: (1, {'@': 157}), 118: (1, {'@': 157}), 119: (1, {'@': 157}), 112: (1, {'@': 157}), 120: (1, {'@': 157}), 115: (1, {'@': 157}), 0: (1, {'@': 157}), 42: (1, {'@': 157}), 1: (1, {'@': 157}), 35: (1, {'@': 157}), 101: (1, {'@': 157}), 2: (1, {'@': 157}), 16: (1, {'@': 157})}, 228: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 117}), 42: (1, {'@': 117}), 1: (1, {'@': 117}), 0: (1, {'@': 117}), 35: (1, {'@': 117}), 101: (1, {'@': 117}), 2: (1, {'@': 117}), 16: (1, {'@': 117})}, 229: {43: (0, 489), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 49: (0, 646), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 230: {3: (0, 300), 5: (1, {'@': 77}), 37: (1, {'@': 77}), 38: (1, {'@': 77}), 6: (1, {'@': 77}), 39: (1, {'@': 77}), 7: (1, {'@': 77}), 8: (1, {'@': 77}), 9: (1, {'@': 77}), 10: (1, {'@': 77}), 11: (1, {'@': 77}), 12: (1, {'@': 77}), 13: (1, {'@': 77}), 14: (1, {'@': 77}), 15: (1, {'@': 77}), 16: (1, {'@': 77}), 17: (1, {'@': 77}), 18: (1, {'@': 77}), 19: (1, {'@': 77}), 20: (1, {'@': 77}), 21: (1, {'@': 77}), 40: (1, {'@': 77}), 22: (1, {'@': 77}), 23: (1, {'@': 77}), 24: (1, {'@': 77}), 25: (1, {'@': 77}), 26: (1, {'@': 77}), 27: (1, {'@': 77}), 28: (1, {'@': 77}), 29: (1, {'@': 77}), 30: (1, {'@': 77}), 2: (1, {'@': 77}), 31: (1, {'@': 77}), 4: (1, {'@': 77}), 41: (1, {'@': 77}), 32: (1, {'@': 77}), 33: (1, {'@': 77}), 34: (1, {'@': 77})}, 231: {5: (1, {'@': 298}), 37: (1, {'@': 298}), 38: (1, {'@': 298}), 6: (1, {'@': 298}), 39: (1, {'@': 298}), 7: (1, {'@': 298}), 8: (1, {'@': 298}), 9: (1, {'@': 298}), 10: (1, {'@': 298}), 11: (1, {'@': 298}), 12: (1, {'@': 298}), 13: (1, {'@': 298}), 14: (1, {'@': 298}), 15: (1, {'@': 298}), 16: (1, {'@': 298}), 3: (1, {'@': 298}), 17: (1, {'@': 298}), 18: (1, {'@': 298}), 19: (1, {'@': 298}), 20: (1, {'@': 298}), 21: (1, {'@': 298}), 40: (1, {'@': 298}), 22: (1, {'@': 298}), 23: (1, {'@': 298}), 24: (1, {'@': 298}), 25: (1, {'@': 298}), 26: (1, {'@': 298}), 27: (1, {'@': 298}), 28: (1, {'@': 298}), 29: (1, {'@': 298}), 30: (1, {'@': 298}), 2: (1, {'@': 298}), 31: (1, {'@': 298}), 4: (1, {'@': 298}), 41: (1, {'@': 298}), 32: (1, {'@': 298}), 33: (1, {'@': 298}), 34: (1, {'@': 298})}, 232: {5: (1, {'@': 271}), 37: (1, {'@': 271}), 38: (1, {'@': 271}), 6: (1, {'@': 271}), 39: (1, {'@': 271}), 7: (1, {'@': 271}), 8: (1, {'@': 271}), 9: (1, {'@': 271}), 10: (1, {'@': 271}), 11: (1, {'@': 271}), 12: (1, {'@': 271}), 13: (1, {'@': 271}), 14: (1, {'@': 271}), 15: (1, {'@': 271}), 16: (1, {'@': 271}), 3: (1, {'@': 271}), 17: (1, {'@': 271}), 18: (1, {'@': 271}), 19: (1, {'@': 271}), 20: (1, {'@': 271}), 21: (1, {'@': 271}), 40: (1, {'@': 271}), 22: (1, {'@': 271}), 23: (1, {'@': 271}), 24: (1, {'@': 271}), 25: (1, {'@': 271}), 26: (1, {'@': 271}), 27: (1, {'@': 271}), 28: (1, {'@': 271}), 29: (1, {'@': 271}), 30: (1, {'@': 271}), 2: (1, {'@': 271}), 31: (1, {'@': 271}), 4: (1, {'@': 271}), 41: (1, {'@': 271}), 32: (1, {'@': 271}), 33: (1, {'@': 271}), 34: (1, {'@': 271})}, 233: {99: (1, {'@': 210}), 3: (1, {'@': 210}), 31: (1, {'@': 210}), 4: (1, {'@': 210}), 0: (1, {'@': 210}), 101: (1, {'@': 210}), 42: (1, {'@': 210}), 16: (1, {'@': 210}), 1: (1, {'@': 210}), 35: (1, {'@': 210}), 2: (1, {'@': 210})}, 234: {3: (1, {'@': 224}), 0: (1, {'@': 224}), 1: (1, {'@': 224}), 16: (1, {'@': 224}), 42: (1, {'@': 224}), 35: (1, {'@': 224}), 99: (1, {'@': 224}), 101: (1, {'@': 224}), 2: (1, {'@': 224}), 31: (1, {'@': 224})}, 235: {31: (0, 281), 99: (0, 453), 42: (0, 494)}, 236: {43: (0, 373), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 42: (0, 521), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 237: {5: (1, {'@': 360}), 37: (1, {'@': 360}), 38: (1, {'@': 360}), 6: (1, {'@': 360}), 39: (1, {'@': 360}), 7: (1, {'@': 360}), 8: (1, {'@': 360}), 9: (1, {'@': 360}), 10: (1, {'@': 360}), 11: (1, {'@': 360}), 12: (1, {'@': 360}), 13: (1, {'@': 360}), 14: (1, {'@': 360}), 15: (1, {'@': 360}), 16: (1, {'@': 360}), 3: (1, {'@': 360}), 17: (1, {'@': 360}), 18: (1, {'@': 360}), 19: (1, {'@': 360}), 20: (1, {'@': 360}), 21: (1, {'@': 360}), 40: (1, {'@': 360}), 22: (1, {'@': 360}), 23: (1, {'@': 360}), 24: (1, {'@': 360}), 25: (1, {'@': 360}), 26: (1, {'@': 360}), 27: (1, {'@': 360}), 28: (1, {'@': 360}), 29: (1, {'@': 360}), 30: (1, {'@': 360}), 2: (1, {'@': 360}), 31: (1, {'@': 360}), 4: (1, {'@': 360}), 41: (1, {'@': 360}), 32: (1, {'@': 360}), 33: (1, {'@': 360}), 34: (1, {'@': 360})}, 238: {114: (0, 308)}, 239: {31: (0, 281), 42: (0, 250), 99: (0, 453), 0: (0, 323)}, 240: {43: (0, 431), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 49: (0, 374), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 241: {3: (0, 300), 5: (1, {'@': 106}), 39: (1, {'@': 106}), 7: (1, {'@': 106}), 8: (1, {'@': 106}), 9: (1, {'@': 106}), 10: (1, {'@': 106}), 11: (1, {'@': 106}), 12: (1, {'@': 106}), 13: (1, {'@': 106}), 14: (1, {'@': 106}), 15: (1, {'@': 106}), 16: (1, {'@': 106}), 17: (1, {'@': 106}), 18: (1, {'@': 106}), 19: (1, {'@': 106}), 20: (1, {'@': 106}), 21: (1, {'@': 106}), 22: (1, {'@': 106}), 23: (1, {'@': 106}), 24: (1, {'@': 106}), 25: (1, {'@': 106}), 26: (1, {'@': 106}), 27: (1, {'@': 106}), 28: (1, {'@': 106}), 29: (1, {'@': 106}), 30: (1, {'@': 106}), 2: (1, {'@': 106}), 31: (1, {'@': 106}), 4: (1, {'@': 106}), 32: (1, {'@': 106}), 33: (1, {'@': 106}), 34: (1, {'@': 106})}, 242: {4: (0, 369)}, 243: {8: (0, 153), 132: (0, 106), 3: (0, 300)}, 244: {29: (0, 456), 3: (1, {'@': 112}), 1: (1, {'@': 112}), 130: (1, {'@': 112})}, 245: {116: (0, 622), 107: (1, {'@': 139}), 3: (1, {'@': 139}), 99: (1, {'@': 139}), 108: (1, {'@': 139}), 100: (1, {'@': 139}), 96: (1, {'@': 139}), 117: (1, {'@': 139}), 97: (1, {'@': 139}), 31: (1, {'@': 139}), 98: (1, {'@': 139}), 109: (1, {'@': 139}), 110: (1, {'@': 139}), 111: (1, {'@': 139}), 0: (1, {'@': 139}), 42: (1, {'@': 139}), 1: (1, {'@': 139}), 35: (1, {'@': 139}), 101: (1, {'@': 139}), 2: (1, {'@': 139}), 16: (1, {'@': 139})}, 246: {99: (1, {'@': 256}), 3: (1, {'@': 256}), 31: (1, {'@': 256}), 4: (1, {'@': 256}), 0: (1, {'@': 256}), 101: (1, {'@': 256}), 42: (1, {'@': 256}), 16: (1, {'@': 256}), 1: (1, {'@': 256}), 35: (1, {'@': 256}), 2: (1, {'@': 256})}, 247: {107: (1, {'@': 403}), 99: (1, {'@': 403}), 106: (1, {'@': 403}), 100: (1, {'@': 403}), 96: (1, {'@': 403}), 97: (1, {'@': 403}), 42: (1, {'@': 403}), 110: (1, {'@': 403}), 0: (1, {'@': 403}), 35: (1, {'@': 403}), 113: (1, {'@': 403}), 114: (1, {'@': 403}), 101: (1, {'@': 403}), 116: (1, {'@': 403}), 117: (1, {'@': 403}), 98: (1, {'@': 403}), 118: (1, {'@': 403}), 119: (1, {'@': 403}), 16: (1, {'@': 403}), 121: (1, {'@': 403}), 3: (1, {'@': 403}), 19: (1, {'@': 403}), 108: (1, {'@': 403}), 109: (1, {'@': 403}), 1: (1, {'@': 403}), 111: (1, {'@': 403}), 29: (1, {'@': 403}), 95: (1, {'@': 403}), 2: (1, {'@': 403}), 31: (1, {'@': 403}), 4: (1, {'@': 403}), 112: (1, {'@': 403}), 120: (1, {'@': 403}), 115: (1, {'@': 403})}, 248: {43: (0, 228), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 49: (0, 55), 5: (0, 428), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 45: (0, 444), 81: (0, 339), 32: (0, 462), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 249: {41: (0, 242), 139: (0, 623), 140: (0, 562), 3: (0, 300)}, 250: {99: (1, {'@': 209}), 3: (1, {'@': 209}), 31: (1, {'@': 209}), 4: (1, {'@': 209}), 0: (1, {'@': 209}), 101: (1, {'@': 209}), 42: (1, {'@': 209}), 16: (1, {'@': 209}), 1: (1, {'@': 209}), 35: (1, {'@': 209}), 2: (1, {'@': 209})}, 251: {5: (1, {'@': 371}), 37: (1, {'@': 371}), 38: (1, {'@': 371}), 6: (1, {'@': 371}), 39: (1, {'@': 371}), 7: (1, {'@': 371}), 8: (1, {'@': 371}), 9: (1, {'@': 371}), 10: (1, {'@': 371}), 11: (1, {'@': 371}), 12: (1, {'@': 371}), 13: (1, {'@': 371}), 14: (1, {'@': 371}), 15: (1, {'@': 371}), 16: (1, {'@': 371}), 3: (1, {'@': 371}), 17: (1, {'@': 371}), 18: (1, {'@': 371}), 19: (1, {'@': 371}), 20: (1, {'@': 371}), 21: (1, {'@': 371}), 40: (1, {'@': 371}), 22: (1, {'@': 371}), 23: (1, {'@': 371}), 24: (1, {'@': 371}), 25: (1, {'@': 371}), 26: (1, {'@': 371}), 27: (1, {'@': 371}), 28: (1, {'@': 371}), 29: (1, {'@': 371}), 30: (1, {'@': 371}), 2: (1, {'@': 371}), 31: (1, {'@': 371}), 4: (1, {'@': 371}), 41: (1, {'@': 371}), 32: (1, {'@': 371}), 33: (1, {'@': 371}), 34: (1, {'@': 371})}, 252: {35: (0, 483)}, 253: {116: (0, 622), 107: (1, {'@': 138}), 3: (1, {'@': 138}), 99: (1, {'@': 138}), 108: (1, {'@': 138}), 100: (1, {'@': 138}), 96: (1, {'@': 138}), 117: (1, {'@': 138}), 97: (1, {'@': 138}), 31: (1, {'@': 138}), 98: (1, {'@': 138}), 109: (1, {'@': 138}), 110: (1, {'@': 138}), 111: (1, {'@': 138}), 0: (1, {'@': 138}), 42: (1, {'@': 138}), 1: (1, {'@': 138}), 35: (1, {'@': 138}), 101: (1, {'@': 138}), 2: (1, {'@': 138}), 16: (1, {'@': 138})}, 254: {3: (0, 534), 36: (0, 34), 5: (1, {'@': 341}), 37: (1, {'@': 341}), 38: (1, {'@': 341}), 6: (1, {'@': 341}), 39: (1, {'@': 341}), 7: (1, {'@': 341}), 8: (1, {'@': 341}), 9: (1, {'@': 341}), 10: (1, {'@': 341}), 11: (1, {'@': 341}), 12: (1, {'@': 341}), 13: (1, {'@': 341}), 14: (1, {'@': 341}), 15: (1, {'@': 341}), 16: (1, {'@': 341}), 17: (1, {'@': 341}), 18: (1, {'@': 341}), 19: (1, {'@': 341}), 20: (1, {'@': 341}), 21: (1, {'@': 341}), 40: (1, {'@': 341}), 22: (1, {'@': 341}), 23: (1, {'@': 341}), 24: (1, {'@': 341}), 25: (1, {'@': 341}), 26: (1, {'@': 341}), 27: (1, {'@': 341}), 28: (1, {'@': 341}), 29: (1, {'@': 341}), 30: (1, {'@': 341}), 2: (1, {'@': 341}), 31: (1, {'@': 341}), 4: (1, {'@': 341}), 41: (1, {'@': 341}), 32: (1, {'@': 341}), 33: (1, {'@': 341}), 34: (1, {'@': 341})}, 255: {36: (0, 31), 3: (0, 534), 5: (1, {'@': 355}), 37: (1, {'@': 355}), 38: (1, {'@': 355}), 6: (1, {'@': 355}), 39: (1, {'@': 355}), 7: (1, {'@': 355}), 8: (1, {'@': 355}), 9: (1, {'@': 355}), 10: (1, {'@': 355}), 11: (1, {'@': 355}), 12: (1, {'@': 355}), 13: (1, {'@': 355}), 14: (1, {'@': 355}), 15: (1, {'@': 355}), 16: (1, {'@': 355}), 17: (1, {'@': 355}), 18: (1, {'@': 355}), 19: (1, {'@': 355}), 20: (1, {'@': 355}), 21: (1, {'@': 355}), 40: (1, {'@': 355}), 22: (1, {'@': 355}), 23: (1, {'@': 355}), 24: (1, {'@': 355}), 25: (1, {'@': 355}), 26: (1, {'@': 355}), 27: (1, {'@': 355}), 28: (1, {'@': 355}), 29: (1, {'@': 355}), 30: (1, {'@': 355}), 2: (1, {'@': 355}), 31: (1, {'@': 355}), 4: (1, {'@': 355}), 41: (1, {'@': 355}), 32: (1, {'@': 355}), 33: (1, {'@': 355}), 34: (1, {'@': 355})}, 256: {43: (0, 600), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 141: (0, 596), 46: (0, 269), 8: (0, 304), 28: (0, 591), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 142: (0, 549), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 649), 79: (0, 385), 17: (0, 409), 143: (0, 212), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 35: (1, {'@': 263})}, 257: {116: (0, 622), 107: (1, {'@': 141}), 3: (1, {'@': 141}), 99: (1, {'@': 141}), 108: (1, {'@': 141}), 100: (1, {'@': 141}), 96: (1, {'@': 141}), 117: (1, {'@': 141}), 97: (1, {'@': 141}), 31: (1, {'@': 141}), 98: (1, {'@': 141}), 109: (1, {'@': 141}), 110: (1, {'@': 141}), 111: (1, {'@': 141}), 0: (1, {'@': 141}), 42: (1, {'@': 141}), 1: (1, {'@': 141}), 35: (1, {'@': 141}), 101: (1, {'@': 141}), 2: (1, {'@': 141}), 16: (1, {'@': 141})}, 258: {5: (1, {'@': 373}), 37: (1, {'@': 373}), 38: (1, {'@': 373}), 6: (1, {'@': 373}), 39: (1, {'@': 373}), 7: (1, {'@': 373}), 8: (1, {'@': 373}), 9: (1, {'@': 373}), 10: (1, {'@': 373}), 11: (1, {'@': 373}), 12: (1, {'@': 373}), 13: (1, {'@': 373}), 14: (1, {'@': 373}), 15: (1, {'@': 373}), 16: (1, {'@': 373}), 3: (1, {'@': 373}), 17: (1, {'@': 373}), 18: (1, {'@': 373}), 19: (1, {'@': 373}), 20: (1, {'@': 373}), 21: (1, {'@': 373}), 40: (1, {'@': 373}), 22: (1, {'@': 373}), 23: (1, {'@': 373}), 24: (1, {'@': 373}), 25: (1, {'@': 373}), 26: (1, {'@': 373}), 27: (1, {'@': 373}), 28: (1, {'@': 373}), 29: (1, {'@': 373}), 30: (1, {'@': 373}), 2: (1, {'@': 373}), 31: (1, {'@': 373}), 4: (1, {'@': 373}), 41: (1, {'@': 373}), 32: (1, {'@': 373}), 33: (1, {'@': 373}), 34: (1, {'@': 373})}, 259: {116: (0, 622), 107: (1, {'@': 143}), 3: (1, {'@': 143}), 99: (1, {'@': 143}), 108: (1, {'@': 143}), 100: (1, {'@': 143}), 96: (1, {'@': 143}), 117: (1, {'@': 143}), 97: (1, {'@': 143}), 31: (1, {'@': 143}), 98: (1, {'@': 143}), 109: (1, {'@': 143}), 110: (1, {'@': 143}), 111: (1, {'@': 143}), 0: (1, {'@': 143}), 42: (1, {'@': 143}), 1: (1, {'@': 143}), 35: (1, {'@': 143}), 101: (1, {'@': 143}), 2: (1, {'@': 143}), 16: (1, {'@': 143})}, 260: {43: (0, 446), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 0: (0, 635), 32: (0, 462), 83: (0, 613), 89: (0, 503), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 42: (0, 335)}, 261: {21: (0, 216), 3: (0, 300)}, 262: {116: (0, 622), 107: (1, {'@': 142}), 3: (1, {'@': 142}), 99: (1, {'@': 142}), 108: (1, {'@': 142}), 100: (1, {'@': 142}), 96: (1, {'@': 142}), 117: (1, {'@': 142}), 97: (1, {'@': 142}), 31: (1, {'@': 142}), 98: (1, {'@': 142}), 109: (1, {'@': 142}), 110: (1, {'@': 142}), 111: (1, {'@': 142}), 0: (1, {'@': 142}), 42: (1, {'@': 142}), 1: (1, {'@': 142}), 35: (1, {'@': 142}), 101: (1, {'@': 142}), 2: (1, {'@': 142}), 16: (1, {'@': 142})}, 263: {43: (0, 38), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 264: {5: (1, {'@': 306}), 37: (1, {'@': 306}), 38: (1, {'@': 306}), 6: (1, {'@': 306}), 39: (1, {'@': 306}), 7: (1, {'@': 306}), 8: (1, {'@': 306}), 9: (1, {'@': 306}), 10: (1, {'@': 306}), 11: (1, {'@': 306}), 12: (1, {'@': 306}), 13: (1, {'@': 306}), 14: (1, {'@': 306}), 15: (1, {'@': 306}), 16: (1, {'@': 306}), 3: (1, {'@': 306}), 17: (1, {'@': 306}), 18: (1, {'@': 306}), 19: (1, {'@': 306}), 20: (1, {'@': 306}), 21: (1, {'@': 306}), 40: (1, {'@': 306}), 22: (1, {'@': 306}), 23: (1, {'@': 306}), 24: (1, {'@': 306}), 25: (1, {'@': 306}), 26: (1, {'@': 306}), 27: (1, {'@': 306}), 28: (1, {'@': 306}), 29: (1, {'@': 306}), 30: (1, {'@': 306}), 2: (1, {'@': 306}), 31: (1, {'@': 306}), 4: (1, {'@': 306}), 41: (1, {'@': 306}), 32: (1, {'@': 306}), 33: (1, {'@': 306}), 34: (1, {'@': 306})}, 265: {1: (1, {'@': 255}), 42: (1, {'@': 255})}, 266: {43: (0, 351), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 49: (0, 578), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 267: {99: (1, {'@': 216}), 3: (1, {'@': 216}), 31: (1, {'@': 216}), 4: (1, {'@': 216}), 0: (1, {'@': 216}), 101: (1, {'@': 216}), 42: (1, {'@': 216}), 16: (1, {'@': 216}), 1: (1, {'@': 216}), 35: (1, {'@': 216}), 2: (1, {'@': 216})}, 268: {28: (0, 643), 93: (0, 572), 90: (0, 607), 95: (0, 473), 94: (0, 555)}, 269: {4: (0, 256), 99: (1, {'@': 124}), 3: (1, {'@': 124}), 31: (1, {'@': 124}), 0: (1, {'@': 124}), 101: (1, {'@': 124}), 16: (1, {'@': 124}), 42: (1, {'@': 124}), 1: (1, {'@': 124}), 35: (1, {'@': 124}), 2: (1, {'@': 124})}, 270: {116: (0, 622), 107: (1, {'@': 140}), 3: (1, {'@': 140}), 99: (1, {'@': 140}), 108: (1, {'@': 140}), 100: (1, {'@': 140}), 96: (1, {'@': 140}), 117: (1, {'@': 140}), 97: (1, {'@': 140}), 31: (1, {'@': 140}), 98: (1, {'@': 140}), 109: (1, {'@': 140}), 110: (1, {'@': 140}), 111: (1, {'@': 140}), 0: (1, {'@': 140}), 42: (1, {'@': 140}), 1: (1, {'@': 140}), 35: (1, {'@': 140}), 101: (1, {'@': 140}), 2: (1, {'@': 140}), 16: (1, {'@': 140})}, 271: {5: (1, {'@': 229}), 39: (1, {'@': 229}), 7: (1, {'@': 229}), 8: (1, {'@': 229}), 9: (1, {'@': 229}), 10: (1, {'@': 229}), 11: (1, {'@': 229}), 12: (1, {'@': 229}), 13: (1, {'@': 229}), 14: (1, {'@': 229}), 15: (1, {'@': 229}), 16: (1, {'@': 229}), 3: (1, {'@': 229}), 17: (1, {'@': 229}), 18: (1, {'@': 229}), 19: (1, {'@': 229}), 20: (1, {'@': 229}), 21: (1, {'@': 229}), 22: (1, {'@': 229}), 23: (1, {'@': 229}), 24: (1, {'@': 229}), 25: (1, {'@': 229}), 26: (1, {'@': 229}), 27: (1, {'@': 229}), 28: (1, {'@': 229}), 29: (1, {'@': 229}), 30: (1, {'@': 229}), 2: (1, {'@': 229}), 31: (1, {'@': 229}), 4: (1, {'@': 229}), 32: (1, {'@': 229}), 33: (1, {'@': 229}), 34: (1, {'@': 229})}, 272: {100: (0, 522), 96: (0, 505), 99: (1, {'@': 127}), 3: (1, {'@': 127}), 31: (1, {'@': 127}), 0: (1, {'@': 127}), 101: (1, {'@': 127}), 16: (1, {'@': 127}), 42: (1, {'@': 127}), 1: (1, {'@': 127}), 35: (1, {'@': 127}), 2: (1, {'@': 127})}, 273: {43: (0, 630), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 274: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 62: (0, 46), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 36: (0, 200), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 51: (0, 254), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 275: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 51: (0, 203), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 36: (0, 209), 34: (0, 329), 24: (0, 539), 62: (0, 255), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 276: {5: (1, {'@': 332}), 37: (1, {'@': 332}), 38: (1, {'@': 332}), 6: (1, {'@': 332}), 39: (1, {'@': 332}), 7: (1, {'@': 332}), 8: (1, {'@': 332}), 9: (1, {'@': 332}), 10: (1, {'@': 332}), 11: (1, {'@': 332}), 12: (1, {'@': 332}), 13: (1, {'@': 332}), 14: (1, {'@': 332}), 15: (1, {'@': 332}), 16: (1, {'@': 332}), 3: (1, {'@': 332}), 17: (1, {'@': 332}), 18: (1, {'@': 332}), 19: (1, {'@': 332}), 20: (1, {'@': 332}), 21: (1, {'@': 332}), 40: (1, {'@': 332}), 22: (1, {'@': 332}), 23: (1, {'@': 332}), 24: (1, {'@': 332}), 25: (1, {'@': 332}), 26: (1, {'@': 332}), 27: (1, {'@': 332}), 28: (1, {'@': 332}), 29: (1, {'@': 332}), 30: (1, {'@': 332}), 2: (1, {'@': 332}), 31: (1, {'@': 332}), 4: (1, {'@': 332}), 41: (1, {'@': 332}), 32: (1, {'@': 332}), 33: (1, {'@': 332}), 34: (1, {'@': 332})}, 277: {5: (1, {'@': 279}), 37: (1, {'@': 279}), 38: (1, {'@': 279}), 6: (1, {'@': 279}), 39: (1, {'@': 279}), 7: (1, {'@': 279}), 8: (1, {'@': 279}), 9: (1, {'@': 279}), 10: (1, {'@': 279}), 11: (1, {'@': 279}), 12: (1, {'@': 279}), 13: (1, {'@': 279}), 14: (1, {'@': 279}), 15: (1, {'@': 279}), 16: (1, {'@': 279}), 3: (1, {'@': 279}), 17: (1, {'@': 279}), 18: (1, {'@': 279}), 19: (1, {'@': 279}), 20: (1, {'@': 279}), 21: (1, {'@': 279}), 40: (1, {'@': 279}), 22: (1, {'@': 279}), 23: (1, {'@': 279}), 24: (1, {'@': 279}), 25: (1, {'@': 279}), 26: (1, {'@': 279}), 27: (1, {'@': 279}), 28: (1, {'@': 279}), 29: (1, {'@': 279}), 30: (1, {'@': 279}), 2: (1, {'@': 279}), 31: (1, {'@': 279}), 4: (1, {'@': 279}), 41: (1, {'@': 279}), 32: (1, {'@': 279}), 33: (1, {'@': 279}), 34: (1, {'@': 279})}, 278: {5: (1, {'@': 122}), 37: (1, {'@': 122}), 38: (1, {'@': 122}), 6: (1, {'@': 122}), 39: (1, {'@': 122}), 7: (1, {'@': 122}), 8: (1, {'@': 122}), 9: (1, {'@': 122}), 10: (1, {'@': 122}), 11: (1, {'@': 122}), 12: (1, {'@': 122}), 13: (1, {'@': 122}), 14: (1, {'@': 122}), 15: (1, {'@': 122}), 16: (1, {'@': 122}), 3: (1, {'@': 122}), 17: (1, {'@': 122}), 18: (1, {'@': 122}), 19: (1, {'@': 122}), 20: (1, {'@': 122}), 21: (1, {'@': 122}), 40: (1, {'@': 122}), 22: (1, {'@': 122}), 23: (1, {'@': 122}), 24: (1, {'@': 122}), 25: (1, {'@': 122}), 26: (1, {'@': 122}), 27: (1, {'@': 122}), 28: (1, {'@': 122}), 29: (1, {'@': 122}), 30: (1, {'@': 122}), 2: (1, {'@': 122}), 31: (1, {'@': 122}), 4: (1, {'@': 122}), 41: (1, {'@': 122}), 32: (1, {'@': 122}), 33: (1, {'@': 122}), 34: (1, {'@': 122})}, 279: {31: (0, 281), 42: (0, 360), 99: (0, 453)}, 280: {87: (0, 544), 7: (0, 116), 4: (0, 461), 78: (0, 413), 29: (0, 221), 144: (0, 533), 58: (0, 321), 44: (0, 333), 28: (0, 247), 50: (0, 363), 31: (0, 513)}, 281: {43: (0, 636), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 0: (0, 625), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 282: {4: (0, 92)}, 283: {43: (0, 372), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 49: (0, 348), 89: (0, 503)}, 284: {28: (0, 247), 50: (0, 363), 58: (0, 48), 4: (0, 284), 78: (0, 413)}, 285: {99: (1, {'@': 214}), 3: (1, {'@': 214}), 31: (1, {'@': 214}), 4: (1, {'@': 214}), 0: (1, {'@': 214}), 101: (1, {'@': 214}), 42: (1, {'@': 214}), 16: (1, {'@': 214}), 1: (1, {'@': 214}), 35: (1, {'@': 214}), 2: (1, {'@': 214})}, 286: {41: (0, 242), 145: (0, 556), 37: (0, 275), 139: (0, 313), 5: (1, {'@': 325}), 38: (1, {'@': 325}), 6: (1, {'@': 325}), 39: (1, {'@': 325}), 7: (1, {'@': 325}), 8: (1, {'@': 325}), 9: (1, {'@': 325}), 10: (1, {'@': 325}), 11: (1, {'@': 325}), 12: (1, {'@': 325}), 13: (1, {'@': 325}), 14: (1, {'@': 325}), 15: (1, {'@': 325}), 16: (1, {'@': 325}), 3: (1, {'@': 325}), 17: (1, {'@': 325}), 18: (1, {'@': 325}), 19: (1, {'@': 325}), 20: (1, {'@': 325}), 21: (1, {'@': 325}), 40: (1, {'@': 325}), 22: (1, {'@': 325}), 23: (1, {'@': 325}), 24: (1, {'@': 325}), 25: (1, {'@': 325}), 26: (1, {'@': 325}), 27: (1, {'@': 325}), 28: (1, {'@': 325}), 29: (1, {'@': 325}), 30: (1, {'@': 325}), 2: (1, {'@': 325}), 31: (1, {'@': 325}), 4: (1, {'@': 325}), 32: (1, {'@': 325}), 33: (1, {'@': 325}), 34: (1, {'@': 325})}, 287: {28: (0, 616), 146: (0, 566), 90: (0, 575), 91: (0, 568), 92: (0, 581), 93: (0, 606), 94: (0, 621), 95: (0, 473), 35: (1, {'@': 237})}, 288: {28: (0, 80), 136: (0, 124), 3: (0, 300), 2: (1, {'@': 382}), 1: (1, {'@': 382})}, 289: {28: (0, 80), 3: (0, 534), 36: (0, 400), 136: (0, 474), 2: (1, {'@': 382})}, 290: {3: (0, 300), 5: (1, {'@': 334}), 37: (1, {'@': 334}), 38: (1, {'@': 334}), 6: (1, {'@': 334}), 39: (1, {'@': 334}), 7: (1, {'@': 334}), 8: (1, {'@': 334}), 9: (1, {'@': 334}), 10: (1, {'@': 334}), 11: (1, {'@': 334}), 12: (1, {'@': 334}), 13: (1, {'@': 334}), 14: (1, {'@': 334}), 15: (1, {'@': 334}), 16: (1, {'@': 334}), 17: (1, {'@': 334}), 18: (1, {'@': 334}), 19: (1, {'@': 334}), 20: (1, {'@': 334}), 21: (1, {'@': 334}), 40: (1, {'@': 334}), 22: (1, {'@': 334}), 23: (1, {'@': 334}), 24: (1, {'@': 334}), 25: (1, {'@': 334}), 26: (1, {'@': 334}), 27: (1, {'@': 334}), 28: (1, {'@': 334}), 29: (1, {'@': 334}), 30: (1, {'@': 334}), 2: (1, {'@': 334}), 31: (1, {'@': 334}), 4: (1, {'@': 334}), 41: (1, {'@': 334}), 32: (1, {'@': 334}), 33: (1, {'@': 334}), 34: (1, {'@': 334})}, 291: {43: (0, 541), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 292: {99: (1, {'@': 257}), 3: (1, {'@': 257}), 31: (1, {'@': 257}), 4: (1, {'@': 257}), 0: (1, {'@': 257}), 101: (1, {'@': 257}), 42: (1, {'@': 257}), 16: (1, {'@': 257}), 1: (1, {'@': 257}), 35: (1, {'@': 257}), 2: (1, {'@': 257})}, 293: {3: (0, 534), 36: (0, 77), 5: (1, {'@': 88}), 37: (1, {'@': 88}), 38: (1, {'@': 88}), 6: (1, {'@': 88}), 39: (1, {'@': 88}), 7: (1, {'@': 88}), 8: (1, {'@': 88}), 9: (1, {'@': 88}), 10: (1, {'@': 88}), 11: (1, {'@': 88}), 12: (1, {'@': 88}), 13: (1, {'@': 88}), 14: (1, {'@': 88}), 15: (1, {'@': 88}), 16: (1, {'@': 88}), 17: (1, {'@': 88}), 18: (1, {'@': 88}), 19: (1, {'@': 88}), 20: (1, {'@': 88}), 21: (1, {'@': 88}), 40: (1, {'@': 88}), 22: (1, {'@': 88}), 23: (1, {'@': 88}), 24: (1, {'@': 88}), 25: (1, {'@': 88}), 26: (1, {'@': 88}), 27: (1, {'@': 88}), 28: (1, {'@': 88}), 29: (1, {'@': 88}), 30: (1, {'@': 88}), 2: (1, {'@': 88}), 31: (1, {'@': 88}), 4: (1, {'@': 88}), 41: (1, {'@': 88}), 32: (1, {'@': 88}), 33: (1, {'@': 88}), 34: (1, {'@': 88})}, 294: {29: (0, 466), 35: (0, 477)}, 295: {35: (1, {'@': 250})}, 296: {5: (1, {'@': 384}), 37: (1, {'@': 384}), 38: (1, {'@': 384}), 6: (1, {'@': 384}), 39: (1, {'@': 384}), 7: (1, {'@': 384}), 8: (1, {'@': 384}), 9: (1, {'@': 384}), 10: (1, {'@': 384}), 11: (1, {'@': 384}), 12: (1, {'@': 384}), 13: (1, {'@': 384}), 14: (1, {'@': 384}), 15: (1, {'@': 384}), 16: (1, {'@': 384}), 3: (1, {'@': 384}), 17: (1, {'@': 384}), 18: (1, {'@': 384}), 19: (1, {'@': 384}), 20: (1, {'@': 384}), 21: (1, {'@': 384}), 40: (1, {'@': 384}), 22: (1, {'@': 384}), 23: (1, {'@': 384}), 24: (1, {'@': 384}), 25: (1, {'@': 384}), 26: (1, {'@': 384}), 27: (1, {'@': 384}), 28: (1, {'@': 384}), 29: (1, {'@': 384}), 30: (1, {'@': 384}), 2: (1, {'@': 384}), 31: (1, {'@': 384}), 4: (1, {'@': 384}), 41: (1, {'@': 384}), 32: (1, {'@': 384}), 33: (1, {'@': 384}), 34: (1, {'@': 384})}, 297: {2: (1, {'@': 190}), 1: (1, {'@': 190})}, 298: {43: (0, 421), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 49: (0, 412), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 299: {5: (1, {'@': 278}), 37: (1, {'@': 278}), 38: (1, {'@': 278}), 6: (1, {'@': 278}), 39: (1, {'@': 278}), 7: (1, {'@': 278}), 8: (1, {'@': 278}), 9: (1, {'@': 278}), 10: (1, {'@': 278}), 11: (1, {'@': 278}), 12: (1, {'@': 278}), 13: (1, {'@': 278}), 14: (1, {'@': 278}), 15: (1, {'@': 278}), 16: (1, {'@': 278}), 3: (1, {'@': 278}), 17: (1, {'@': 278}), 18: (1, {'@': 278}), 19: (1, {'@': 278}), 20: (1, {'@': 278}), 21: (1, {'@': 278}), 40: (1, {'@': 278}), 22: (1, {'@': 278}), 23: (1, {'@': 278}), 24: (1, {'@': 278}), 25: (1, {'@': 278}), 26: (1, {'@': 278}), 27: (1, {'@': 278}), 28: (1, {'@': 278}), 29: (1, {'@': 278}), 30: (1, {'@': 278}), 2: (1, {'@': 278}), 31: (1, {'@': 278}), 4: (1, {'@': 278}), 41: (1, {'@': 278}), 32: (1, {'@': 278}), 33: (1, {'@': 278}), 34: (1, {'@': 278})}, 300: {5: (1, {'@': 413}), 37: (1, {'@': 413}), 38: (1, {'@': 413}), 6: (1, {'@': 413}), 39: (1, {'@': 413}), 7: (1, {'@': 413}), 8: (1, {'@': 413}), 9: (1, {'@': 413}), 10: (1, {'@': 413}), 11: (1, {'@': 413}), 12: (1, {'@': 413}), 13: (1, {'@': 413}), 14: (1, {'@': 413}), 15: (1, {'@': 413}), 16: (1, {'@': 413}), 3: (1, {'@': 413}), 17: (1, {'@': 413}), 18: (1, {'@': 413}), 19: (1, {'@': 413}), 20: (1, {'@': 413}), 21: (1, {'@': 413}), 40: (1, {'@': 413}), 22: (1, {'@': 413}), 23: (1, {'@': 413}), 24: (1, {'@': 413}), 25: (1, {'@': 413}), 26: (1, {'@': 413}), 27: (1, {'@': 413}), 28: (1, {'@': 413}), 29: (1, {'@': 413}), 30: (1, {'@': 413}), 2: (1, {'@': 413}), 31: (1, {'@': 413}), 4: (1, {'@': 413}), 41: (1, {'@': 413}), 32: (1, {'@': 413}), 33: (1, {'@': 413}), 34: (1, {'@': 413}), 1: (1, {'@': 413})}, 301: {107: (1, {'@': 173}), 3: (1, {'@': 173}), 99: (1, {'@': 173}), 19: (1, {'@': 173}), 108: (1, {'@': 173}), 100: (1, {'@': 173}), 96: (1, {'@': 173}), 97: (1, {'@': 173}), 109: (1, {'@': 173}), 110: (1, {'@': 173}), 111: (1, {'@': 173}), 113: (1, {'@': 173}), 116: (1, {'@': 173}), 95: (1, {'@': 173}), 117: (1, {'@': 173}), 31: (1, {'@': 173}), 98: (1, {'@': 173}), 118: (1, {'@': 173}), 119: (1, {'@': 173}), 112: (1, {'@': 173}), 120: (1, {'@': 173}), 115: (1, {'@': 173}), 0: (1, {'@': 173}), 42: (1, {'@': 173}), 1: (1, {'@': 173}), 35: (1, {'@': 173}), 101: (1, {'@': 173}), 2: (1, {'@': 173}), 16: (1, {'@': 173})}, 302: {28: (0, 211)}, 303: {41: (0, 242), 139: (0, 623), 140: (0, 457), 3: (0, 300)}, 304: {43: (0, 641), 7: (0, 116), 4: (0, 366), 67: (0, 226), 147: (0, 545), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 1: (0, 648), 83: (0, 613), 85: (0, 328), 86: (0, 436), 49: (0, 548), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 305: {3: (0, 300), 5: (1, {'@': 76}), 37: (1, {'@': 76}), 38: (1, {'@': 76}), 6: (1, {'@': 76}), 39: (1, {'@': 76}), 7: (1, {'@': 76}), 8: (1, {'@': 76}), 9: (1, {'@': 76}), 10: (1, {'@': 76}), 11: (1, {'@': 76}), 12: (1, {'@': 76}), 13: (1, {'@': 76}), 14: (1, {'@': 76}), 15: (1, {'@': 76}), 16: (1, {'@': 76}), 17: (1, {'@': 76}), 18: (1, {'@': 76}), 19: (1, {'@': 76}), 20: (1, {'@': 76}), 21: (1, {'@': 76}), 40: (1, {'@': 76}), 22: (1, {'@': 76}), 23: (1, {'@': 76}), 24: (1, {'@': 76}), 25: (1, {'@': 76}), 26: (1, {'@': 76}), 27: (1, {'@': 76}), 28: (1, {'@': 76}), 29: (1, {'@': 76}), 30: (1, {'@': 76}), 2: (1, {'@': 76}), 31: (1, {'@': 76}), 4: (1, {'@': 76}), 41: (1, {'@': 76}), 32: (1, {'@': 76}), 33: (1, {'@': 76}), 34: (1, {'@': 76})}, 306: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 401), 5: (1, {'@': 327}), 38: (1, {'@': 327}), 6: (1, {'@': 327}), 39: (1, {'@': 327}), 7: (1, {'@': 327}), 8: (1, {'@': 327}), 9: (1, {'@': 327}), 10: (1, {'@': 327}), 11: (1, {'@': 327}), 12: (1, {'@': 327}), 13: (1, {'@': 327}), 14: (1, {'@': 327}), 15: (1, {'@': 327}), 16: (1, {'@': 327}), 3: (1, {'@': 327}), 17: (1, {'@': 327}), 18: (1, {'@': 327}), 19: (1, {'@': 327}), 20: (1, {'@': 327}), 21: (1, {'@': 327}), 40: (1, {'@': 327}), 22: (1, {'@': 327}), 23: (1, {'@': 327}), 24: (1, {'@': 327}), 25: (1, {'@': 327}), 26: (1, {'@': 327}), 27: (1, {'@': 327}), 28: (1, {'@': 327}), 29: (1, {'@': 327}), 30: (1, {'@': 327}), 2: (1, {'@': 327}), 31: (1, {'@': 327}), 4: (1, {'@': 327}), 32: (1, {'@': 327}), 33: (1, {'@': 327}), 34: (1, {'@': 327})}, 307: {31: (0, 281), 99: (0, 453), 2: (1, {'@': 191}), 1: (1, {'@': 191})}, 308: {43: (0, 43), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 309: {99: (1, {'@': 211}), 3: (1, {'@': 211}), 31: (1, {'@': 211}), 4: (1, {'@': 211}), 0: (1, {'@': 211}), 101: (1, {'@': 211}), 42: (1, {'@': 211}), 16: (1, {'@': 211}), 1: (1, {'@': 211}), 35: (1, {'@': 211}), 2: (1, {'@': 211})}, 310: {0: (0, 405)}, 311: {4: (0, 450)}, 312: {3: (0, 534), 36: (0, 230)}, 313: {5: (1, {'@': 417}), 37: (1, {'@': 417}), 38: (1, {'@': 417}), 6: (1, {'@': 417}), 39: (1, {'@': 417}), 7: (1, {'@': 417}), 8: (1, {'@': 417}), 9: (1, {'@': 417}), 10: (1, {'@': 417}), 11: (1, {'@': 417}), 12: (1, {'@': 417}), 13: (1, {'@': 417}), 14: (1, {'@': 417}), 15: (1, {'@': 417}), 16: (1, {'@': 417}), 3: (1, {'@': 417}), 17: (1, {'@': 417}), 18: (1, {'@': 417}), 19: (1, {'@': 417}), 20: (1, {'@': 417}), 21: (1, {'@': 417}), 40: (1, {'@': 417}), 22: (1, {'@': 417}), 23: (1, {'@': 417}), 24: (1, {'@': 417}), 25: (1, {'@': 417}), 26: (1, {'@': 417}), 27: (1, {'@': 417}), 28: (1, {'@': 417}), 29: (1, {'@': 417}), 30: (1, {'@': 417}), 2: (1, {'@': 417}), 31: (1, {'@': 417}), 4: (1, {'@': 417}), 41: (1, {'@': 417}), 32: (1, {'@': 417}), 33: (1, {'@': 417}), 34: (1, {'@': 417})}, 314: {5: (1, {'@': 372}), 37: (1, {'@': 372}), 38: (1, {'@': 372}), 6: (1, {'@': 372}), 39: (1, {'@': 372}), 7: (1, {'@': 372}), 8: (1, {'@': 372}), 9: (1, {'@': 372}), 10: (1, {'@': 372}), 11: (1, {'@': 372}), 12: (1, {'@': 372}), 13: (1, {'@': 372}), 14: (1, {'@': 372}), 15: (1, {'@': 372}), 16: (1, {'@': 372}), 3: (1, {'@': 372}), 17: (1, {'@': 372}), 18: (1, {'@': 372}), 19: (1, {'@': 372}), 20: (1, {'@': 372}), 21: (1, {'@': 372}), 40: (1, {'@': 372}), 22: (1, {'@': 372}), 23: (1, {'@': 372}), 24: (1, {'@': 372}), 25: (1, {'@': 372}), 26: (1, {'@': 372}), 27: (1, {'@': 372}), 28: (1, {'@': 372}), 29: (1, {'@': 372}), 30: (1, {'@': 372}), 2: (1, {'@': 372}), 31: (1, {'@': 372}), 4: (1, {'@': 372}), 41: (1, {'@': 372}), 32: (1, {'@': 372}), 33: (1, {'@': 372}), 34: (1, {'@': 372})}, 315: {107: (1, {'@': 167}), 3: (1, {'@': 167}), 99: (1, {'@': 167}), 19: (1, {'@': 167}), 108: (1, {'@': 167}), 100: (1, {'@': 167}), 96: (1, {'@': 167}), 97: (1, {'@': 167}), 109: (1, {'@': 167}), 110: (1, {'@': 167}), 111: (1, {'@': 167}), 113: (1, {'@': 167}), 116: (1, {'@': 167}), 95: (1, {'@': 167}), 117: (1, {'@': 167}), 31: (1, {'@': 167}), 98: (1, {'@': 167}), 118: (1, {'@': 167}), 119: (1, {'@': 167}), 112: (1, {'@': 167}), 120: (1, {'@': 167}), 115: (1, {'@': 167}), 0: (1, {'@': 167}), 42: (1, {'@': 167}), 1: (1, {'@': 167}), 35: (1, {'@': 167}), 101: (1, {'@': 167}), 2: (1, {'@': 167}), 16: (1, {'@': 167})}, 316: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 420), 5: (1, {'@': 321}), 38: (1, {'@': 321}), 6: (1, {'@': 321}), 39: (1, {'@': 321}), 7: (1, {'@': 321}), 8: (1, {'@': 321}), 9: (1, {'@': 321}), 10: (1, {'@': 321}), 11: (1, {'@': 321}), 12: (1, {'@': 321}), 13: (1, {'@': 321}), 14: (1, {'@': 321}), 15: (1, {'@': 321}), 16: (1, {'@': 321}), 3: (1, {'@': 321}), 17: (1, {'@': 321}), 18: (1, {'@': 321}), 19: (1, {'@': 321}), 20: (1, {'@': 321}), 21: (1, {'@': 321}), 40: (1, {'@': 321}), 22: (1, {'@': 321}), 23: (1, {'@': 321}), 24: (1, {'@': 321}), 25: (1, {'@': 321}), 26: (1, {'@': 321}), 27: (1, {'@': 321}), 28: (1, {'@': 321}), 29: (1, {'@': 321}), 30: (1, {'@': 321}), 2: (1, {'@': 321}), 31: (1, {'@': 321}), 4: (1, {'@': 321}), 32: (1, {'@': 321}), 33: (1, {'@': 321}), 34: (1, {'@': 321})}, 317: {4: (0, 179)}, 318: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 588), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 14: (0, 612), 65: (0, 168), 31: (0, 68), 89: (0, 27), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 33: (0, 39), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 319: {4: (0, 70)}, 320: {28: (0, 492)}, 321: {29: (0, 475), 106: (0, 371), 107: (1, {'@': 399}), 3: (1, {'@': 399}), 99: (1, {'@': 399}), 19: (1, {'@': 399}), 108: (1, {'@': 399}), 100: (1, {'@': 399}), 96: (1, {'@': 399}), 97: (1, {'@': 399}), 109: (1, {'@': 399}), 110: (1, {'@': 399}), 111: (1, {'@': 399}), 112: (1, {'@': 399}), 113: (1, {'@': 399}), 114: (1, {'@': 399}), 115: (1, {'@': 399}), 116: (1, {'@': 399}), 95: (1, {'@': 399}), 117: (1, {'@': 399}), 31: (1, {'@': 399}), 98: (1, {'@': 399}), 4: (1, {'@': 399}), 118: (1, {'@': 399}), 119: (1, {'@': 399}), 120: (1, {'@': 399}), 121: (1, {'@': 399}), 0: (1, {'@': 399}), 42: (1, {'@': 399}), 1: (1, {'@': 399}), 35: (1, {'@': 399}), 101: (1, {'@': 399}), 2: (1, {'@': 399}), 16: (1, {'@': 399})}, 322: {31: (0, 281), 99: (0, 453), 0: (0, 448)}, 323: {43: (0, 279), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 42: (0, 267), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 324: {29: (0, 466), 8: (1, {'@': 390}), 3: (1, {'@': 390}), 1: (1, {'@': 390}), 35: (1, {'@': 390})}, 325: {5: (1, {'@': 269}), 37: (1, {'@': 269}), 38: (1, {'@': 269}), 6: (1, {'@': 269}), 39: (1, {'@': 269}), 7: (1, {'@': 269}), 8: (1, {'@': 269}), 9: (1, {'@': 269}), 10: (1, {'@': 269}), 11: (1, {'@': 269}), 12: (1, {'@': 269}), 13: (1, {'@': 269}), 14: (1, {'@': 269}), 15: (1, {'@': 269}), 16: (1, {'@': 269}), 3: (1, {'@': 269}), 17: (1, {'@': 269}), 18: (1, {'@': 269}), 19: (1, {'@': 269}), 20: (1, {'@': 269}), 21: (1, {'@': 269}), 40: (1, {'@': 269}), 22: (1, {'@': 269}), 23: (1, {'@': 269}), 24: (1, {'@': 269}), 25: (1, {'@': 269}), 26: (1, {'@': 269}), 27: (1, {'@': 269}), 28: (1, {'@': 269}), 29: (1, {'@': 269}), 30: (1, {'@': 269}), 2: (1, {'@': 269}), 31: (1, {'@': 269}), 4: (1, {'@': 269}), 41: (1, {'@': 269}), 32: (1, {'@': 269}), 33: (1, {'@': 269}), 34: (1, {'@': 269})}, 326: {43: (0, 532), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 49: (0, 543), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 327: {114: (0, 298)}, 328: {99: (1, {'@': 125}), 3: (1, {'@': 125}), 31: (1, {'@': 125}), 0: (1, {'@': 125}), 101: (1, {'@': 125}), 16: (1, {'@': 125}), 42: (1, {'@': 125}), 1: (1, {'@': 125}), 35: (1, {'@': 125}), 2: (1, {'@': 125})}, 329: {107: (1, {'@': 168}), 3: (1, {'@': 168}), 99: (1, {'@': 168}), 19: (1, {'@': 168}), 108: (1, {'@': 168}), 100: (1, {'@': 168}), 96: (1, {'@': 168}), 97: (1, {'@': 168}), 109: (1, {'@': 168}), 110: (1, {'@': 168}), 111: (1, {'@': 168}), 113: (1, {'@': 168}), 116: (1, {'@': 168}), 95: (1, {'@': 168}), 117: (1, {'@': 168}), 31: (1, {'@': 168}), 98: (1, {'@': 168}), 118: (1, {'@': 168}), 119: (1, {'@': 168}), 112: (1, {'@': 168}), 120: (1, {'@': 168}), 115: (1, {'@': 168}), 0: (1, {'@': 168}), 42: (1, {'@': 168}), 1: (1, {'@': 168}), 35: (1, {'@': 168}), 101: (1, {'@': 168}), 2: (1, {'@': 168}), 16: (1, {'@': 168})}, 330: {8: (1, {'@': 366}), 3: (1, {'@': 366}), 1: (1, {'@': 366})}, 331: {42: (1, {'@': 180})}, 332: {42: (0, 638)}, 333: {114: (1, {'@': 251}), 35: (1, {'@': 251}), 1: (1, {'@': 251})}, 334: {29: (1, {'@': 115}), 1: (1, {'@': 115}), 3: (1, {'@': 115}), 35: (1, {'@': 115}), 130: (1, {'@': 115})}, 335: {99: (1, {'@': 208}), 3: (1, {'@': 208}), 31: (1, {'@': 208}), 4: (1, {'@': 208}), 0: (1, {'@': 208}), 101: (1, {'@': 208}), 42: (1, {'@': 208}), 16: (1, {'@': 208}), 1: (1, {'@': 208}), 35: (1, {'@': 208}), 2: (1, {'@': 208})}, 336: {31: (0, 281), 99: (0, 453), 0: (0, 355)}, 337: {5: (1, {'@': 120}), 37: (1, {'@': 120}), 38: (1, {'@': 120}), 6: (1, {'@': 120}), 39: (1, {'@': 120}), 7: (1, {'@': 120}), 8: (1, {'@': 120}), 9: (1, {'@': 120}), 10: (1, {'@': 120}), 11: (1, {'@': 120}), 12: (1, {'@': 120}), 13: (1, {'@': 120}), 14: (1, {'@': 120}), 15: (1, {'@': 120}), 16: (1, {'@': 120}), 3: (1, {'@': 120}), 17: (1, {'@': 120}), 18: (1, {'@': 120}), 19: (1, {'@': 120}), 20: (1, {'@': 120}), 21: (1, {'@': 120}), 40: (1, {'@': 120}), 22: (1, {'@': 120}), 23: (1, {'@': 120}), 24: (1, {'@': 120}), 25: (1, {'@': 120}), 26: (1, {'@': 120}), 27: (1, {'@': 120}), 28: (1, {'@': 120}), 29: (1, {'@': 120}), 30: (1, {'@': 120}), 2: (1, {'@': 120}), 31: (1, {'@': 120}), 4: (1, {'@': 120}), 41: (1, {'@': 120}), 32: (1, {'@': 120}), 33: (1, {'@': 120}), 34: (1, {'@': 120})}, 338: {5: (1, {'@': 318}), 37: (1, {'@': 318}), 38: (1, {'@': 318}), 6: (1, {'@': 318}), 39: (1, {'@': 318}), 7: (1, {'@': 318}), 8: (1, {'@': 318}), 9: (1, {'@': 318}), 10: (1, {'@': 318}), 11: (1, {'@': 318}), 12: (1, {'@': 318}), 13: (1, {'@': 318}), 14: (1, {'@': 318}), 15: (1, {'@': 318}), 16: (1, {'@': 318}), 3: (1, {'@': 318}), 17: (1, {'@': 318}), 18: (1, {'@': 318}), 19: (1, {'@': 318}), 20: (1, {'@': 318}), 21: (1, {'@': 318}), 40: (1, {'@': 318}), 22: (1, {'@': 318}), 23: (1, {'@': 318}), 24: (1, {'@': 318}), 25: (1, {'@': 318}), 26: (1, {'@': 318}), 27: (1, {'@': 318}), 28: (1, {'@': 318}), 29: (1, {'@': 318}), 30: (1, {'@': 318}), 2: (1, {'@': 318}), 31: (1, {'@': 318}), 4: (1, {'@': 318}), 41: (1, {'@': 318}), 32: (1, {'@': 318}), 33: (1, {'@': 318}), 34: (1, {'@': 318})}, 339: {107: (1, {'@': 163}), 3: (1, {'@': 163}), 99: (1, {'@': 163}), 19: (1, {'@': 163}), 108: (1, {'@': 163}), 100: (1, {'@': 163}), 96: (1, {'@': 163}), 97: (1, {'@': 163}), 109: (1, {'@': 163}), 110: (1, {'@': 163}), 111: (1, {'@': 163}), 113: (1, {'@': 163}), 116: (1, {'@': 163}), 95: (1, {'@': 163}), 117: (1, {'@': 163}), 31: (1, {'@': 163}), 98: (1, {'@': 163}), 118: (1, {'@': 163}), 119: (1, {'@': 163}), 112: (1, {'@': 163}), 120: (1, {'@': 163}), 115: (1, {'@': 163}), 0: (1, {'@': 163}), 42: (1, {'@': 163}), 1: (1, {'@': 163}), 35: (1, {'@': 163}), 101: (1, {'@': 163}), 2: (1, {'@': 163}), 16: (1, {'@': 163})}, 340: {1: (0, 393), 42: (1, {'@': 183})}, 341: {31: (0, 281), 0: (0, 639), 99: (0, 453)}, 342: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 62: (0, 28), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 36: (0, 145), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 51: (0, 157), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 343: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 36: (0, 181), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 51: (0, 192), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 62: (0, 231), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 344: {3: (1, {'@': 201})}, 345: {43: (0, 322), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 49: (0, 310), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 346: {1: (0, 602), 31: (0, 281), 99: (0, 453), 101: (0, 186), 42: (1, {'@': 182})}, 347: {3: (0, 534), 36: (0, 96)}, 348: {3: (1, {'@': 410})}, 349: {148: (0, 388), 107: (1, {'@': 403}), 120: (1, {'@': 403}), 3: (1, {'@': 403}), 99: (1, {'@': 403}), 19: (1, {'@': 403}), 106: (1, {'@': 403}), 108: (1, {'@': 403}), 100: (1, {'@': 403}), 96: (1, {'@': 403}), 97: (1, {'@': 403}), 121: (1, {'@': 403}), 109: (1, {'@': 403}), 110: (1, {'@': 403}), 111: (1, {'@': 403}), 113: (1, {'@': 403}), 114: (1, {'@': 403}), 29: (1, {'@': 403}), 116: (1, {'@': 403}), 95: (1, {'@': 403}), 117: (1, {'@': 403}), 31: (1, {'@': 403}), 98: (1, {'@': 403}), 4: (1, {'@': 403}), 118: (1, {'@': 403}), 112: (1, {'@': 403}), 119: (1, {'@': 403}), 115: (1, {'@': 403}), 0: (1, {'@': 403}), 42: (1, {'@': 403}), 1: (1, {'@': 403}), 35: (1, {'@': 403}), 101: (1, {'@': 403}), 2: (1, {'@': 403}), 16: (1, {'@': 403})}, 350: {42: (1, {'@': 181})}, 351: {31: (0, 281), 99: (0, 453), 35: (1, {'@': 264}), 1: (1, {'@': 264})}, 352: {8: (0, 289), 3: (0, 300)}, 353: {41: (0, 242), 139: (0, 623), 140: (0, 471), 3: (0, 300)}, 354: {114: (0, 551)}, 355: {128: (0, 520), 28: (0, 137)}, 356: {113: (0, 36), 107: (1, {'@': 151}), 3: (1, {'@': 151}), 99: (1, {'@': 151}), 19: (1, {'@': 151}), 108: (1, {'@': 151}), 100: (1, {'@': 151}), 96: (1, {'@': 151}), 97: (1, {'@': 151}), 109: (1, {'@': 151}), 110: (1, {'@': 151}), 111: (1, {'@': 151}), 116: (1, {'@': 151}), 95: (1, {'@': 151}), 117: (1, {'@': 151}), 31: (1, {'@': 151}), 98: (1, {'@': 151}), 118: (1, {'@': 151}), 119: (1, {'@': 151}), 112: (1, {'@': 151}), 120: (1, {'@': 151}), 115: (1, {'@': 151}), 0: (1, {'@': 151}), 42: (1, {'@': 151}), 1: (1, {'@': 151}), 35: (1, {'@': 151}), 101: (1, {'@': 151}), 2: (1, {'@': 151}), 16: (1, {'@': 151})}, 357: {41: (0, 242), 140: (0, 316), 139: (0, 623), 36: (0, 303), 3: (0, 534)}, 358: {4: (0, 130)}, 359: {38: (0, 524), 102: (0, 125), 36: (0, 47), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 534), 105: (0, 644), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 360: {99: (1, {'@': 215}), 3: (1, {'@': 215}), 31: (1, {'@': 215}), 4: (1, {'@': 215}), 0: (1, {'@': 215}), 101: (1, {'@': 215}), 42: (1, {'@': 215}), 16: (1, {'@': 215}), 1: (1, {'@': 215}), 35: (1, {'@': 215}), 2: (1, {'@': 215})}, 361: {35: (1, {'@': 233})}, 362: {5: (1, {'@': 307}), 37: (1, {'@': 307}), 38: (1, {'@': 307}), 6: (1, {'@': 307}), 39: (1, {'@': 307}), 7: (1, {'@': 307}), 8: (1, {'@': 307}), 9: (1, {'@': 307}), 10: (1, {'@': 307}), 11: (1, {'@': 307}), 12: (1, {'@': 307}), 13: (1, {'@': 307}), 14: (1, {'@': 307}), 15: (1, {'@': 307}), 16: (1, {'@': 307}), 3: (1, {'@': 307}), 17: (1, {'@': 307}), 18: (1, {'@': 307}), 19: (1, {'@': 307}), 20: (1, {'@': 307}), 21: (1, {'@': 307}), 40: (1, {'@': 307}), 22: (1, {'@': 307}), 23: (1, {'@': 307}), 24: (1, {'@': 307}), 25: (1, {'@': 307}), 26: (1, {'@': 307}), 27: (1, {'@': 307}), 28: (1, {'@': 307}), 29: (1, {'@': 307}), 30: (1, {'@': 307}), 2: (1, {'@': 307}), 31: (1, {'@': 307}), 4: (1, {'@': 307}), 41: (1, {'@': 307}), 32: (1, {'@': 307}), 33: (1, {'@': 307}), 34: (1, {'@': 307})}, 363: {107: (1, {'@': 402}), 120: (1, {'@': 402}), 3: (1, {'@': 402}), 99: (1, {'@': 402}), 19: (1, {'@': 402}), 106: (1, {'@': 402}), 108: (1, {'@': 402}), 100: (1, {'@': 402}), 96: (1, {'@': 402}), 97: (1, {'@': 402}), 121: (1, {'@': 402}), 109: (1, {'@': 402}), 110: (1, {'@': 402}), 111: (1, {'@': 402}), 113: (1, {'@': 402}), 114: (1, {'@': 402}), 29: (1, {'@': 402}), 116: (1, {'@': 402}), 95: (1, {'@': 402}), 117: (1, {'@': 402}), 31: (1, {'@': 402}), 98: (1, {'@': 402}), 4: (1, {'@': 402}), 118: (1, {'@': 402}), 112: (1, {'@': 402}), 119: (1, {'@': 402}), 115: (1, {'@': 402}), 0: (1, {'@': 402}), 42: (1, {'@': 402}), 1: (1, {'@': 402}), 35: (1, {'@': 402}), 101: (1, {'@': 402}), 2: (1, {'@': 402}), 16: (1, {'@': 402})}, 364: {31: (0, 281), 99: (0, 453), 35: (0, 141)}, 365: {36: (0, 71), 3: (0, 534)}, 366: {7: (0, 116), 43: (0, 364), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 88: (0, 627), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 500), 58: (0, 430), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 620), 33: (0, 39), 29: (0, 221), 89: (0, 503)}, 367: {5: (1, {'@': 375}), 37: (1, {'@': 375}), 38: (1, {'@': 375}), 6: (1, {'@': 375}), 39: (1, {'@': 375}), 7: (1, {'@': 375}), 8: (1, {'@': 375}), 9: (1, {'@': 375}), 10: (1, {'@': 375}), 11: (1, {'@': 375}), 12: (1, {'@': 375}), 13: (1, {'@': 375}), 14: (1, {'@': 375}), 15: (1, {'@': 375}), 16: (1, {'@': 375}), 3: (1, {'@': 375}), 17: (1, {'@': 375}), 18: (1, {'@': 375}), 19: (1, {'@': 375}), 20: (1, {'@': 375}), 21: (1, {'@': 375}), 40: (1, {'@': 375}), 22: (1, {'@': 375}), 23: (1, {'@': 375}), 24: (1, {'@': 375}), 25: (1, {'@': 375}), 26: (1, {'@': 375}), 27: (1, {'@': 375}), 28: (1, {'@': 375}), 29: (1, {'@': 375}), 30: (1, {'@': 375}), 2: (1, {'@': 375}), 31: (1, {'@': 375}), 4: (1, {'@': 375}), 41: (1, {'@': 375}), 32: (1, {'@': 375}), 33: (1, {'@': 375}), 34: (1, {'@': 375})}, 368: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 257), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 369: {93: (0, 523), 28: (0, 528)}, 370: {123: (0, 195), 8: (0, 53), 114: (0, 248), 62: (0, 85), 124: (0, 202)}, 371: {28: (0, 134)}, 372: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 409})}, 373: {31: (0, 281), 99: (0, 453), 42: (0, 162)}, 374: {35: (1, {'@': 247}), 1: (1, {'@': 247})}, 375: {62: (0, 13), 7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 51: (0, 33), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 376: {5: (1, {'@': 119}), 37: (1, {'@': 119}), 38: (1, {'@': 119}), 6: (1, {'@': 119}), 39: (1, {'@': 119}), 7: (1, {'@': 119}), 8: (1, {'@': 119}), 9: (1, {'@': 119}), 10: (1, {'@': 119}), 11: (1, {'@': 119}), 12: (1, {'@': 119}), 13: (1, {'@': 119}), 14: (1, {'@': 119}), 15: (1, {'@': 119}), 16: (1, {'@': 119}), 3: (1, {'@': 119}), 17: (1, {'@': 119}), 18: (1, {'@': 119}), 19: (1, {'@': 119}), 20: (1, {'@': 119}), 21: (1, {'@': 119}), 40: (1, {'@': 119}), 22: (1, {'@': 119}), 23: (1, {'@': 119}), 24: (1, {'@': 119}), 25: (1, {'@': 119}), 26: (1, {'@': 119}), 27: (1, {'@': 119}), 28: (1, {'@': 119}), 29: (1, {'@': 119}), 30: (1, {'@': 119}), 2: (1, {'@': 119}), 31: (1, {'@': 119}), 4: (1, {'@': 119}), 41: (1, {'@': 119}), 32: (1, {'@': 119}), 33: (1, {'@': 119}), 34: (1, {'@': 119})}, 377: {36: (0, 10), 3: (0, 534), 5: (1, {'@': 103}), 39: (1, {'@': 103}), 7: (1, {'@': 103}), 8: (1, {'@': 103}), 9: (1, {'@': 103}), 10: (1, {'@': 103}), 11: (1, {'@': 103}), 12: (1, {'@': 103}), 13: (1, {'@': 103}), 14: (1, {'@': 103}), 15: (1, {'@': 103}), 16: (1, {'@': 103}), 17: (1, {'@': 103}), 18: (1, {'@': 103}), 19: (1, {'@': 103}), 20: (1, {'@': 103}), 21: (1, {'@': 103}), 22: (1, {'@': 103}), 23: (1, {'@': 103}), 24: (1, {'@': 103}), 25: (1, {'@': 103}), 26: (1, {'@': 103}), 27: (1, {'@': 103}), 28: (1, {'@': 103}), 29: (1, {'@': 103}), 30: (1, {'@': 103}), 2: (1, {'@': 103}), 31: (1, {'@': 103}), 4: (1, {'@': 103}), 32: (1, {'@': 103}), 33: (1, {'@': 103}), 34: (1, {'@': 103})}, 378: {28: (0, 616), 90: (0, 575), 91: (0, 568), 92: (0, 463), 93: (0, 606), 94: (0, 621), 95: (0, 473), 35: (1, {'@': 237})}, 379: {3: (0, 534), 36: (0, 20)}, 380: {3: (0, 300), 5: (1, {'@': 348}), 37: (1, {'@': 348}), 38: (1, {'@': 348}), 6: (1, {'@': 348}), 39: (1, {'@': 348}), 7: (1, {'@': 348}), 8: (1, {'@': 348}), 9: (1, {'@': 348}), 10: (1, {'@': 348}), 11: (1, {'@': 348}), 12: (1, {'@': 348}), 13: (1, {'@': 348}), 14: (1, {'@': 348}), 15: (1, {'@': 348}), 16: (1, {'@': 348}), 17: (1, {'@': 348}), 18: (1, {'@': 348}), 19: (1, {'@': 348}), 20: (1, {'@': 348}), 21: (1, {'@': 348}), 40: (1, {'@': 348}), 22: (1, {'@': 348}), 23: (1, {'@': 348}), 24: (1, {'@': 348}), 25: (1, {'@': 348}), 26: (1, {'@': 348}), 27: (1, {'@': 348}), 28: (1, {'@': 348}), 29: (1, {'@': 348}), 30: (1, {'@': 348}), 2: (1, {'@': 348}), 31: (1, {'@': 348}), 4: (1, {'@': 348}), 41: (1, {'@': 348}), 32: (1, {'@': 348}), 33: (1, {'@': 348}), 34: (1, {'@': 348})}, 381: {35: (1, {'@': 259})}, 382: {0: (0, 517), 3: (1, {'@': 118})}, 383: {42: (0, 424), 31: (0, 281), 99: (0, 453)}, 384: {3: (0, 534), 36: (0, 188)}, 385: {107: (1, {'@': 156}), 3: (1, {'@': 156}), 99: (1, {'@': 156}), 19: (1, {'@': 156}), 108: (1, {'@': 156}), 100: (1, {'@': 156}), 96: (1, {'@': 156}), 97: (1, {'@': 156}), 109: (1, {'@': 156}), 110: (1, {'@': 156}), 111: (1, {'@': 156}), 113: (1, {'@': 156}), 116: (1, {'@': 156}), 95: (1, {'@': 156}), 117: (1, {'@': 156}), 31: (1, {'@': 156}), 98: (1, {'@': 156}), 118: (1, {'@': 156}), 119: (1, {'@': 156}), 112: (1, {'@': 156}), 120: (1, {'@': 156}), 115: (1, {'@': 156}), 0: (1, {'@': 156}), 42: (1, {'@': 156}), 1: (1, {'@': 156}), 35: (1, {'@': 156}), 101: (1, {'@': 156}), 2: (1, {'@': 156}), 16: (1, {'@': 156})}, 386: {107: (1, {'@': 172}), 3: (1, {'@': 172}), 99: (1, {'@': 172}), 19: (1, {'@': 172}), 108: (1, {'@': 172}), 100: (1, {'@': 172}), 96: (1, {'@': 172}), 97: (1, {'@': 172}), 109: (1, {'@': 172}), 110: (1, {'@': 172}), 111: (1, {'@': 172}), 113: (1, {'@': 172}), 116: (1, {'@': 172}), 95: (1, {'@': 172}), 117: (1, {'@': 172}), 31: (1, {'@': 172}), 98: (1, {'@': 172}), 118: (1, {'@': 172}), 119: (1, {'@': 172}), 112: (1, {'@': 172}), 120: (1, {'@': 172}), 115: (1, {'@': 172}), 0: (1, {'@': 172}), 42: (1, {'@': 172}), 1: (1, {'@': 172}), 35: (1, {'@': 172}), 101: (1, {'@': 172}), 2: (1, {'@': 172}), 16: (1, {'@': 172})}, 387: {41: (0, 242), 139: (0, 623), 140: (0, 580), 36: (0, 353), 3: (0, 534)}, 388: {107: (1, {'@': 411}), 3: (1, {'@': 411}), 99: (1, {'@': 411}), 19: (1, {'@': 411}), 108: (1, {'@': 411}), 100: (1, {'@': 411}), 96: (1, {'@': 411}), 97: (1, {'@': 411}), 109: (1, {'@': 411}), 110: (1, {'@': 411}), 111: (1, {'@': 411}), 113: (1, {'@': 411}), 116: (1, {'@': 411}), 95: (1, {'@': 411}), 117: (1, {'@': 411}), 31: (1, {'@': 411}), 98: (1, {'@': 411}), 118: (1, {'@': 411}), 119: (1, {'@': 411}), 112: (1, {'@': 411}), 120: (1, {'@': 411}), 115: (1, {'@': 411}), 0: (1, {'@': 411}), 42: (1, {'@': 411}), 1: (1, {'@': 411}), 35: (1, {'@': 411}), 101: (1, {'@': 411}), 2: (1, {'@': 411}), 16: (1, {'@': 411})}, 389: {4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 86), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 390: {43: (0, 346), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 53: (0, 451), 61: (0, 151), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 340), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 129: (0, 331), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 42: (1, {'@': 184})}, 391: {3: (0, 534), 36: (0, 101)}, 392: {3: (0, 534), 36: (0, 50)}, 393: {43: (0, 433), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 53: (0, 451), 61: (0, 151), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 340), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 129: (0, 350), 89: (0, 503), 42: (1, {'@': 184})}, 394: {28: (0, 51)}, 395: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 36: (0, 3), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 149: (0, 552), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 122: (0, 198), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 51: (0, 599), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503), 6: (1, {'@': 75})}, 396: {107: (1, {'@': 178}), 3: (1, {'@': 178}), 99: (1, {'@': 178}), 19: (1, {'@': 178}), 108: (1, {'@': 178}), 100: (1, {'@': 178}), 96: (1, {'@': 178}), 97: (1, {'@': 178}), 109: (1, {'@': 178}), 110: (1, {'@': 178}), 111: (1, {'@': 178}), 113: (1, {'@': 178}), 116: (1, {'@': 178}), 95: (1, {'@': 178}), 117: (1, {'@': 178}), 31: (1, {'@': 178}), 98: (1, {'@': 178}), 118: (1, {'@': 178}), 119: (1, {'@': 178}), 112: (1, {'@': 178}), 120: (1, {'@': 178}), 115: (1, {'@': 178}), 0: (1, {'@': 178}), 42: (1, {'@': 178}), 1: (1, {'@': 178}), 35: (1, {'@': 178}), 101: (1, {'@': 178}), 2: (1, {'@': 178}), 16: (1, {'@': 178})}, 397: {38: (0, 524), 102: (0, 482), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 300), 105: (0, 644), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 398: {43: (0, 75), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 49: (0, 297), 89: (0, 503)}, 399: {107: (1, {'@': 170}), 3: (1, {'@': 170}), 99: (1, {'@': 170}), 19: (1, {'@': 170}), 108: (1, {'@': 170}), 100: (1, {'@': 170}), 96: (1, {'@': 170}), 97: (1, {'@': 170}), 109: (1, {'@': 170}), 110: (1, {'@': 170}), 111: (1, {'@': 170}), 113: (1, {'@': 170}), 116: (1, {'@': 170}), 95: (1, {'@': 170}), 117: (1, {'@': 170}), 31: (1, {'@': 170}), 98: (1, {'@': 170}), 118: (1, {'@': 170}), 119: (1, {'@': 170}), 112: (1, {'@': 170}), 120: (1, {'@': 170}), 115: (1, {'@': 170}), 0: (1, {'@': 170}), 42: (1, {'@': 170}), 1: (1, {'@': 170}), 35: (1, {'@': 170}), 101: (1, {'@': 170}), 2: (1, {'@': 170}), 16: (1, {'@': 170})}, 400: {28: (0, 80), 136: (0, 508), 3: (0, 300), 2: (1, {'@': 382})}, 401: {5: (1, {'@': 326}), 37: (1, {'@': 326}), 38: (1, {'@': 326}), 6: (1, {'@': 326}), 39: (1, {'@': 326}), 7: (1, {'@': 326}), 8: (1, {'@': 326}), 9: (1, {'@': 326}), 10: (1, {'@': 326}), 11: (1, {'@': 326}), 12: (1, {'@': 326}), 13: (1, {'@': 326}), 14: (1, {'@': 326}), 15: (1, {'@': 326}), 16: (1, {'@': 326}), 3: (1, {'@': 326}), 17: (1, {'@': 326}), 18: (1, {'@': 326}), 19: (1, {'@': 326}), 20: (1, {'@': 326}), 21: (1, {'@': 326}), 40: (1, {'@': 326}), 22: (1, {'@': 326}), 23: (1, {'@': 326}), 24: (1, {'@': 326}), 25: (1, {'@': 326}), 26: (1, {'@': 326}), 27: (1, {'@': 326}), 28: (1, {'@': 326}), 29: (1, {'@': 326}), 30: (1, {'@': 326}), 2: (1, {'@': 326}), 31: (1, {'@': 326}), 4: (1, {'@': 326}), 41: (1, {'@': 326}), 32: (1, {'@': 326}), 33: (1, {'@': 326}), 34: (1, {'@': 326})}, 402: {3: (0, 534), 36: (0, 490), 21: (0, 358)}, 403: {35: (1, {'@': 260})}, 404: {8: (1, {'@': 393}), 29: (1, {'@': 393}), 1: (1, {'@': 393}), 3: (1, {'@': 393}), 35: (1, {'@': 393})}, 405: {43: (0, 464), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 49: (0, 485), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 406: {3: (0, 534), 36: (0, 190)}, 407: {43: (0, 425), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 408: {2: (0, 67), 3: (0, 300), 5: (1, {'@': 91}), 39: (1, {'@': 91}), 7: (1, {'@': 91}), 8: (1, {'@': 91}), 9: (1, {'@': 91}), 10: (1, {'@': 91}), 11: (1, {'@': 91}), 12: (1, {'@': 91}), 13: (1, {'@': 91}), 14: (1, {'@': 91}), 15: (1, {'@': 91}), 16: (1, {'@': 91}), 17: (1, {'@': 91}), 18: (1, {'@': 91}), 19: (1, {'@': 91}), 20: (1, {'@': 91}), 21: (1, {'@': 91}), 22: (1, {'@': 91}), 23: (1, {'@': 91}), 24: (1, {'@': 91}), 25: (1, {'@': 91}), 26: (1, {'@': 91}), 27: (1, {'@': 91}), 28: (1, {'@': 91}), 29: (1, {'@': 91}), 30: (1, {'@': 91}), 31: (1, {'@': 91}), 4: (1, {'@': 91}), 32: (1, {'@': 91}), 33: (1, {'@': 91}), 34: (1, {'@': 91})}, 409: {107: (1, {'@': 169}), 3: (1, {'@': 169}), 99: (1, {'@': 169}), 19: (1, {'@': 169}), 108: (1, {'@': 169}), 100: (1, {'@': 169}), 96: (1, {'@': 169}), 97: (1, {'@': 169}), 109: (1, {'@': 169}), 110: (1, {'@': 169}), 111: (1, {'@': 169}), 113: (1, {'@': 169}), 116: (1, {'@': 169}), 95: (1, {'@': 169}), 117: (1, {'@': 169}), 31: (1, {'@': 169}), 98: (1, {'@': 169}), 118: (1, {'@': 169}), 119: (1, {'@': 169}), 112: (1, {'@': 169}), 120: (1, {'@': 169}), 115: (1, {'@': 169}), 0: (1, {'@': 169}), 42: (1, {'@': 169}), 1: (1, {'@': 169}), 35: (1, {'@': 169}), 101: (1, {'@': 169}), 2: (1, {'@': 169}), 16: (1, {'@': 169})}, 410: {8: (1, {'@': 367}), 3: (1, {'@': 367}), 1: (1, {'@': 367})}, 411: {5: (1, {'@': 303}), 37: (1, {'@': 303}), 38: (1, {'@': 303}), 6: (1, {'@': 303}), 39: (1, {'@': 303}), 7: (1, {'@': 303}), 8: (1, {'@': 303}), 9: (1, {'@': 303}), 10: (1, {'@': 303}), 11: (1, {'@': 303}), 12: (1, {'@': 303}), 13: (1, {'@': 303}), 14: (1, {'@': 303}), 15: (1, {'@': 303}), 16: (1, {'@': 303}), 3: (1, {'@': 303}), 17: (1, {'@': 303}), 18: (1, {'@': 303}), 19: (1, {'@': 303}), 20: (1, {'@': 303}), 21: (1, {'@': 303}), 40: (1, {'@': 303}), 22: (1, {'@': 303}), 23: (1, {'@': 303}), 24: (1, {'@': 303}), 25: (1, {'@': 303}), 26: (1, {'@': 303}), 27: (1, {'@': 303}), 28: (1, {'@': 303}), 29: (1, {'@': 303}), 30: (1, {'@': 303}), 2: (1, {'@': 303}), 31: (1, {'@': 303}), 4: (1, {'@': 303}), 41: (1, {'@': 303}), 32: (1, {'@': 303}), 33: (1, {'@': 303}), 34: (1, {'@': 303})}, 412: {35: (1, {'@': 249}), 1: (1, {'@': 249})}, 413: {107: (1, {'@': 401}), 120: (1, {'@': 401}), 3: (1, {'@': 401}), 99: (1, {'@': 401}), 19: (1, {'@': 401}), 106: (1, {'@': 401}), 108: (1, {'@': 401}), 100: (1, {'@': 401}), 96: (1, {'@': 401}), 97: (1, {'@': 401}), 121: (1, {'@': 401}), 109: (1, {'@': 401}), 110: (1, {'@': 401}), 111: (1, {'@': 401}), 113: (1, {'@': 401}), 114: (1, {'@': 401}), 29: (1, {'@': 401}), 116: (1, {'@': 401}), 95: (1, {'@': 401}), 117: (1, {'@': 401}), 31: (1, {'@': 401}), 98: (1, {'@': 401}), 4: (1, {'@': 401}), 118: (1, {'@': 401}), 112: (1, {'@': 401}), 119: (1, {'@': 401}), 115: (1, {'@': 401}), 0: (1, {'@': 401}), 42: (1, {'@': 401}), 1: (1, {'@': 401}), 35: (1, {'@': 401}), 101: (1, {'@': 401}), 2: (1, {'@': 401}), 16: (1, {'@': 401})}, 414: {2: (1, {'@': 194}), 1: (1, {'@': 194})}, 415: {4: (0, 213)}, 416: {117: (0, 459), 110: (0, 546), 108: (0, 634), 111: (0, 531), 107: (0, 368), 109: (0, 426), 96: (1, {'@': 136}), 97: (1, {'@': 136}), 3: (1, {'@': 136}), 31: (1, {'@': 136}), 98: (1, {'@': 136}), 99: (1, {'@': 136}), 100: (1, {'@': 136}), 0: (1, {'@': 136}), 101: (1, {'@': 136}), 16: (1, {'@': 136}), 42: (1, {'@': 136}), 1: (1, {'@': 136}), 35: (1, {'@': 136}), 2: (1, {'@': 136})}, 417: {38: (0, 524), 36: (0, 579), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 534), 105: (0, 644), 102: (0, 455), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 418: {21: (0, 123), 3: (0, 300)}, 419: {107: (1, {'@': 159}), 3: (1, {'@': 159}), 99: (1, {'@': 159}), 19: (1, {'@': 159}), 108: (1, {'@': 159}), 100: (1, {'@': 159}), 96: (1, {'@': 159}), 97: (1, {'@': 159}), 109: (1, {'@': 159}), 110: (1, {'@': 159}), 111: (1, {'@': 159}), 113: (1, {'@': 159}), 116: (1, {'@': 159}), 95: (1, {'@': 159}), 117: (1, {'@': 159}), 31: (1, {'@': 159}), 98: (1, {'@': 159}), 118: (1, {'@': 159}), 119: (1, {'@': 159}), 112: (1, {'@': 159}), 120: (1, {'@': 159}), 115: (1, {'@': 159}), 0: (1, {'@': 159}), 42: (1, {'@': 159}), 35: (1, {'@': 159}), 101: (1, {'@': 159}), 16: (1, {'@': 159}), 1: (1, {'@': 159}), 2: (1, {'@': 159})}, 420: {5: (1, {'@': 320}), 37: (1, {'@': 320}), 38: (1, {'@': 320}), 6: (1, {'@': 320}), 39: (1, {'@': 320}), 7: (1, {'@': 320}), 8: (1, {'@': 320}), 9: (1, {'@': 320}), 10: (1, {'@': 320}), 11: (1, {'@': 320}), 12: (1, {'@': 320}), 13: (1, {'@': 320}), 14: (1, {'@': 320}), 15: (1, {'@': 320}), 16: (1, {'@': 320}), 3: (1, {'@': 320}), 17: (1, {'@': 320}), 18: (1, {'@': 320}), 19: (1, {'@': 320}), 20: (1, {'@': 320}), 21: (1, {'@': 320}), 40: (1, {'@': 320}), 22: (1, {'@': 320}), 23: (1, {'@': 320}), 24: (1, {'@': 320}), 25: (1, {'@': 320}), 26: (1, {'@': 320}), 27: (1, {'@': 320}), 28: (1, {'@': 320}), 29: (1, {'@': 320}), 30: (1, {'@': 320}), 2: (1, {'@': 320}), 31: (1, {'@': 320}), 4: (1, {'@': 320}), 41: (1, {'@': 320}), 32: (1, {'@': 320}), 33: (1, {'@': 320}), 34: (1, {'@': 320})}, 421: {31: (0, 281), 99: (0, 453), 35: (1, {'@': 248}), 1: (1, {'@': 248})}, 422: {137: (0, 161), 28: (0, 69), 4: (0, 422)}, 423: {3: (0, 534), 36: (0, 16), 5: (1, {'@': 99}), 39: (1, {'@': 99}), 7: (1, {'@': 99}), 8: (1, {'@': 99}), 9: (1, {'@': 99}), 10: (1, {'@': 99}), 11: (1, {'@': 99}), 12: (1, {'@': 99}), 13: (1, {'@': 99}), 14: (1, {'@': 99}), 15: (1, {'@': 99}), 16: (1, {'@': 99}), 17: (1, {'@': 99}), 18: (1, {'@': 99}), 19: (1, {'@': 99}), 20: (1, {'@': 99}), 21: (1, {'@': 99}), 22: (1, {'@': 99}), 23: (1, {'@': 99}), 24: (1, {'@': 99}), 25: (1, {'@': 99}), 26: (1, {'@': 99}), 27: (1, {'@': 99}), 28: (1, {'@': 99}), 29: (1, {'@': 99}), 30: (1, {'@': 99}), 2: (1, {'@': 99}), 31: (1, {'@': 99}), 4: (1, {'@': 99}), 32: (1, {'@': 99}), 33: (1, {'@': 99}), 34: (1, {'@': 99})}, 424: {107: (1, {'@': 174}), 3: (1, {'@': 174}), 99: (1, {'@': 174}), 19: (1, {'@': 174}), 108: (1, {'@': 174}), 100: (1, {'@': 174}), 96: (1, {'@': 174}), 97: (1, {'@': 174}), 109: (1, {'@': 174}), 110: (1, {'@': 174}), 111: (1, {'@': 174}), 113: (1, {'@': 174}), 116: (1, {'@': 174}), 95: (1, {'@': 174}), 117: (1, {'@': 174}), 31: (1, {'@': 174}), 98: (1, {'@': 174}), 118: (1, {'@': 174}), 119: (1, {'@': 174}), 112: (1, {'@': 174}), 120: (1, {'@': 174}), 115: (1, {'@': 174}), 0: (1, {'@': 174}), 42: (1, {'@': 174}), 1: (1, {'@': 174}), 35: (1, {'@': 174}), 101: (1, {'@': 174}), 2: (1, {'@': 174}), 16: (1, {'@': 174})}, 425: {31: (0, 281), 35: (0, 88), 99: (0, 453)}, 426: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 55: (0, 245), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 427: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 221}), 0: (1, {'@': 221}), 16: (1, {'@': 221}), 42: (1, {'@': 221}), 101: (1, {'@': 221}), 1: (1, {'@': 221}), 35: (1, {'@': 221}), 2: (1, {'@': 221})}, 428: {43: (0, 84), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 429: {5: (1, {'@': 301}), 37: (1, {'@': 301}), 38: (1, {'@': 301}), 6: (1, {'@': 301}), 39: (1, {'@': 301}), 7: (1, {'@': 301}), 8: (1, {'@': 301}), 9: (1, {'@': 301}), 10: (1, {'@': 301}), 11: (1, {'@': 301}), 12: (1, {'@': 301}), 13: (1, {'@': 301}), 14: (1, {'@': 301}), 15: (1, {'@': 301}), 16: (1, {'@': 301}), 3: (1, {'@': 301}), 17: (1, {'@': 301}), 18: (1, {'@': 301}), 19: (1, {'@': 301}), 20: (1, {'@': 301}), 21: (1, {'@': 301}), 40: (1, {'@': 301}), 22: (1, {'@': 301}), 23: (1, {'@': 301}), 24: (1, {'@': 301}), 25: (1, {'@': 301}), 26: (1, {'@': 301}), 27: (1, {'@': 301}), 28: (1, {'@': 301}), 29: (1, {'@': 301}), 30: (1, {'@': 301}), 2: (1, {'@': 301}), 31: (1, {'@': 301}), 4: (1, {'@': 301}), 41: (1, {'@': 301}), 32: (1, {'@': 301}), 33: (1, {'@': 301}), 34: (1, {'@': 301})}, 430: {29: (0, 475), 106: (0, 371), 35: (0, 139), 107: (1, {'@': 399}), 120: (1, {'@': 399}), 99: (1, {'@': 399}), 19: (1, {'@': 399}), 108: (1, {'@': 399}), 100: (1, {'@': 399}), 96: (1, {'@': 399}), 97: (1, {'@': 399}), 109: (1, {'@': 399}), 110: (1, {'@': 399}), 111: (1, {'@': 399}), 113: (1, {'@': 399}), 116: (1, {'@': 399}), 95: (1, {'@': 399}), 117: (1, {'@': 399}), 31: (1, {'@': 399}), 98: (1, {'@': 399}), 4: (1, {'@': 399}), 118: (1, {'@': 399}), 112: (1, {'@': 399}), 119: (1, {'@': 399}), 115: (1, {'@': 399})}, 431: {31: (0, 281), 99: (0, 453), 35: (1, {'@': 246}), 1: (1, {'@': 246})}, 432: {5: (1, {'@': 72}), 7: (1, {'@': 72}), 8: (1, {'@': 72}), 9: (1, {'@': 72}), 10: (1, {'@': 72}), 11: (1, {'@': 72}), 12: (1, {'@': 72}), 13: (1, {'@': 72}), 14: (1, {'@': 72}), 15: (1, {'@': 72}), 16: (1, {'@': 72}), 17: (1, {'@': 72}), 18: (1, {'@': 72}), 19: (1, {'@': 72}), 20: (1, {'@': 72}), 21: (1, {'@': 72}), 22: (1, {'@': 72}), 23: (1, {'@': 72}), 24: (1, {'@': 72}), 25: (1, {'@': 72}), 26: (1, {'@': 72}), 27: (1, {'@': 72}), 28: (1, {'@': 72}), 29: (1, {'@': 72}), 30: (1, {'@': 72}), 2: (1, {'@': 72}), 31: (1, {'@': 72}), 4: (1, {'@': 72}), 32: (1, {'@': 72}), 33: (1, {'@': 72}), 34: (1, {'@': 72}), 6: (1, {'@': 72})}, 433: {1: (0, 602), 31: (0, 281), 99: (0, 453), 42: (1, {'@': 182})}, 434: {36: (0, 241), 3: (0, 534), 5: (1, {'@': 107}), 39: (1, {'@': 107}), 7: (1, {'@': 107}), 8: (1, {'@': 107}), 9: (1, {'@': 107}), 10: (1, {'@': 107}), 11: (1, {'@': 107}), 12: (1, {'@': 107}), 13: (1, {'@': 107}), 14: (1, {'@': 107}), 15: (1, {'@': 107}), 16: (1, {'@': 107}), 17: (1, {'@': 107}), 18: (1, {'@': 107}), 19: (1, {'@': 107}), 20: (1, {'@': 107}), 21: (1, {'@': 107}), 22: (1, {'@': 107}), 23: (1, {'@': 107}), 24: (1, {'@': 107}), 25: (1, {'@': 107}), 26: (1, {'@': 107}), 27: (1, {'@': 107}), 28: (1, {'@': 107}), 29: (1, {'@': 107}), 30: (1, {'@': 107}), 2: (1, {'@': 107}), 31: (1, {'@': 107}), 4: (1, {'@': 107}), 32: (1, {'@': 107}), 33: (1, {'@': 107}), 34: (1, {'@': 107})}, 435: {3: (0, 534), 36: (0, 193)}, 436: {107: (1, {'@': 158}), 3: (1, {'@': 158}), 99: (1, {'@': 158}), 19: (1, {'@': 158}), 108: (1, {'@': 158}), 100: (1, {'@': 158}), 96: (1, {'@': 158}), 97: (1, {'@': 158}), 109: (1, {'@': 158}), 110: (1, {'@': 158}), 111: (1, {'@': 158}), 113: (1, {'@': 158}), 116: (1, {'@': 158}), 95: (1, {'@': 158}), 117: (1, {'@': 158}), 31: (1, {'@': 158}), 98: (1, {'@': 158}), 118: (1, {'@': 158}), 119: (1, {'@': 158}), 112: (1, {'@': 158}), 120: (1, {'@': 158}), 115: (1, {'@': 158}), 0: (1, {'@': 158}), 42: (1, {'@': 158}), 35: (1, {'@': 158}), 101: (1, {'@': 158}), 16: (1, {'@': 158}), 1: (1, {'@': 158}), 2: (1, {'@': 158})}, 437: {107: (1, {'@': 162}), 3: (1, {'@': 162}), 99: (1, {'@': 162}), 19: (1, {'@': 162}), 108: (1, {'@': 162}), 100: (1, {'@': 162}), 96: (1, {'@': 162}), 97: (1, {'@': 162}), 42: (1, {'@': 162}), 110: (1, {'@': 162}), 109: (1, {'@': 162}), 1: (1, {'@': 162}), 111: (1, {'@': 162}), 0: (1, {'@': 162}), 35: (1, {'@': 162}), 112: (1, {'@': 162}), 113: (1, {'@': 162}), 101: (1, {'@': 162}), 116: (1, {'@': 162}), 117: (1, {'@': 162}), 95: (1, {'@': 162}), 2: (1, {'@': 162}), 31: (1, {'@': 162}), 98: (1, {'@': 162}), 118: (1, {'@': 162}), 119: (1, {'@': 162}), 16: (1, {'@': 162}), 120: (1, {'@': 162}), 115: (1, {'@': 162})}, 438: {4: (0, 112)}, 439: {41: (0, 242), 139: (0, 623), 3: (0, 300), 140: (0, 306)}, 440: {28: (0, 238)}, 441: {3: (0, 534), 36: (0, 42), 5: (1, {'@': 351}), 37: (1, {'@': 351}), 38: (1, {'@': 351}), 6: (1, {'@': 351}), 39: (1, {'@': 351}), 7: (1, {'@': 351}), 8: (1, {'@': 351}), 9: (1, {'@': 351}), 10: (1, {'@': 351}), 11: (1, {'@': 351}), 12: (1, {'@': 351}), 13: (1, {'@': 351}), 14: (1, {'@': 351}), 15: (1, {'@': 351}), 16: (1, {'@': 351}), 17: (1, {'@': 351}), 18: (1, {'@': 351}), 19: (1, {'@': 351}), 20: (1, {'@': 351}), 21: (1, {'@': 351}), 40: (1, {'@': 351}), 22: (1, {'@': 351}), 23: (1, {'@': 351}), 24: (1, {'@': 351}), 25: (1, {'@': 351}), 26: (1, {'@': 351}), 27: (1, {'@': 351}), 28: (1, {'@': 351}), 29: (1, {'@': 351}), 30: (1, {'@': 351}), 2: (1, {'@': 351}), 31: (1, {'@': 351}), 4: (1, {'@': 351}), 41: (1, {'@': 351}), 32: (1, {'@': 351}), 33: (1, {'@': 351}), 34: (1, {'@': 351})}, 442: {107: (1, {'@': 188}), 3: (1, {'@': 188}), 99: (1, {'@': 188}), 19: (1, {'@': 188}), 108: (1, {'@': 188}), 100: (1, {'@': 188}), 96: (1, {'@': 188}), 97: (1, {'@': 188}), 109: (1, {'@': 188}), 110: (1, {'@': 188}), 111: (1, {'@': 188}), 113: (1, {'@': 188}), 116: (1, {'@': 188}), 95: (1, {'@': 188}), 117: (1, {'@': 188}), 31: (1, {'@': 188}), 98: (1, {'@': 188}), 118: (1, {'@': 188}), 119: (1, {'@': 188}), 112: (1, {'@': 188}), 120: (1, {'@': 188}), 115: (1, {'@': 188}), 0: (1, {'@': 188}), 42: (1, {'@': 188}), 1: (1, {'@': 188}), 35: (1, {'@': 188}), 101: (1, {'@': 188}), 2: (1, {'@': 188}), 16: (1, {'@': 188})}, 443: {43: (0, 427), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 559), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 444: {3: (1, {'@': 223}), 0: (1, {'@': 223}), 1: (1, {'@': 223}), 16: (1, {'@': 223}), 42: (1, {'@': 223}), 35: (1, {'@': 223}), 99: (1, {'@': 223}), 101: (1, {'@': 223}), 2: (1, {'@': 223}), 31: (1, {'@': 223})}, 445: {43: (0, 138), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 446: {31: (0, 281), 99: (0, 453), 0: (0, 170), 42: (0, 159)}, 447: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 45: (0, 312), 46: (0, 269), 8: (0, 593), 36: (0, 9), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 51: (0, 65), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 62: (0, 12), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 448: {43: (0, 470), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 49: (0, 414), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 449: {136: (0, 204), 28: (0, 80), 3: (0, 534), 36: (0, 154), 2: (1, {'@': 382})}, 450: {43: (0, 526), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 451: {95: (0, 132), 115: (0, 571), 120: (0, 557), 112: (0, 645), 107: (1, {'@': 148}), 3: (1, {'@': 148}), 99: (1, {'@': 148}), 19: (1, {'@': 148}), 108: (1, {'@': 148}), 100: (1, {'@': 148}), 96: (1, {'@': 148}), 97: (1, {'@': 148}), 109: (1, {'@': 148}), 110: (1, {'@': 148}), 111: (1, {'@': 148}), 116: (1, {'@': 148}), 117: (1, {'@': 148}), 31: (1, {'@': 148}), 98: (1, {'@': 148}), 118: (1, {'@': 148}), 119: (1, {'@': 148}), 0: (1, {'@': 148}), 42: (1, {'@': 148}), 1: (1, {'@': 148}), 35: (1, {'@': 148}), 101: (1, {'@': 148}), 2: (1, {'@': 148}), 16: (1, {'@': 148})}, 452: {107: (1, {'@': 405}), 120: (1, {'@': 405}), 3: (1, {'@': 405}), 99: (1, {'@': 405}), 19: (1, {'@': 405}), 106: (1, {'@': 405}), 108: (1, {'@': 405}), 100: (1, {'@': 405}), 96: (1, {'@': 405}), 97: (1, {'@': 405}), 121: (1, {'@': 405}), 109: (1, {'@': 405}), 110: (1, {'@': 405}), 111: (1, {'@': 405}), 113: (1, {'@': 405}), 114: (1, {'@': 405}), 29: (1, {'@': 405}), 116: (1, {'@': 405}), 95: (1, {'@': 405}), 117: (1, {'@': 405}), 31: (1, {'@': 405}), 98: (1, {'@': 405}), 4: (1, {'@': 405}), 118: (1, {'@': 405}), 112: (1, {'@': 405}), 119: (1, {'@': 405}), 115: (1, {'@': 405}), 0: (1, {'@': 405}), 42: (1, {'@': 405}), 1: (1, {'@': 405}), 35: (1, {'@': 405}), 101: (1, {'@': 405}), 2: (1, {'@': 405}), 16: (1, {'@': 405})}, 453: {43: (0, 553), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 49: (0, 589), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 454: {3: (0, 534), 36: (0, 37)}, 455: {5: (1, {'@': 275}), 37: (1, {'@': 275}), 38: (1, {'@': 275}), 6: (1, {'@': 275}), 39: (1, {'@': 275}), 7: (1, {'@': 275}), 8: (1, {'@': 275}), 9: (1, {'@': 275}), 10: (1, {'@': 275}), 11: (1, {'@': 275}), 12: (1, {'@': 275}), 13: (1, {'@': 275}), 14: (1, {'@': 275}), 15: (1, {'@': 275}), 16: (1, {'@': 275}), 3: (1, {'@': 275}), 17: (1, {'@': 275}), 18: (1, {'@': 275}), 19: (1, {'@': 275}), 20: (1, {'@': 275}), 21: (1, {'@': 275}), 40: (1, {'@': 275}), 22: (1, {'@': 275}), 23: (1, {'@': 275}), 24: (1, {'@': 275}), 25: (1, {'@': 275}), 26: (1, {'@': 275}), 27: (1, {'@': 275}), 28: (1, {'@': 275}), 29: (1, {'@': 275}), 30: (1, {'@': 275}), 2: (1, {'@': 275}), 31: (1, {'@': 275}), 4: (1, {'@': 275}), 41: (1, {'@': 275}), 32: (1, {'@': 275}), 33: (1, {'@': 275}), 34: (1, {'@': 275})}, 456: {28: (0, 334)}, 457: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 338), 5: (1, {'@': 319}), 38: (1, {'@': 319}), 6: (1, {'@': 319}), 39: (1, {'@': 319}), 7: (1, {'@': 319}), 8: (1, {'@': 319}), 9: (1, {'@': 319}), 10: (1, {'@': 319}), 11: (1, {'@': 319}), 12: (1, {'@': 319}), 13: (1, {'@': 319}), 14: (1, {'@': 319}), 15: (1, {'@': 319}), 16: (1, {'@': 319}), 3: (1, {'@': 319}), 17: (1, {'@': 319}), 18: (1, {'@': 319}), 19: (1, {'@': 319}), 20: (1, {'@': 319}), 21: (1, {'@': 319}), 40: (1, {'@': 319}), 22: (1, {'@': 319}), 23: (1, {'@': 319}), 24: (1, {'@': 319}), 25: (1, {'@': 319}), 26: (1, {'@': 319}), 27: (1, {'@': 319}), 28: (1, {'@': 319}), 29: (1, {'@': 319}), 30: (1, {'@': 319}), 2: (1, {'@': 319}), 31: (1, {'@': 319}), 4: (1, {'@': 319}), 32: (1, {'@': 319}), 33: (1, {'@': 319}), 34: (1, {'@': 319})}, 458: {5: (1, {'@': 304}), 37: (1, {'@': 304}), 38: (1, {'@': 304}), 6: (1, {'@': 304}), 39: (1, {'@': 304}), 7: (1, {'@': 304}), 8: (1, {'@': 304}), 9: (1, {'@': 304}), 10: (1, {'@': 304}), 11: (1, {'@': 304}), 12: (1, {'@': 304}), 13: (1, {'@': 304}), 14: (1, {'@': 304}), 15: (1, {'@': 304}), 16: (1, {'@': 304}), 3: (1, {'@': 304}), 17: (1, {'@': 304}), 18: (1, {'@': 304}), 19: (1, {'@': 304}), 20: (1, {'@': 304}), 21: (1, {'@': 304}), 40: (1, {'@': 304}), 22: (1, {'@': 304}), 23: (1, {'@': 304}), 24: (1, {'@': 304}), 25: (1, {'@': 304}), 26: (1, {'@': 304}), 27: (1, {'@': 304}), 28: (1, {'@': 304}), 29: (1, {'@': 304}), 30: (1, {'@': 304}), 2: (1, {'@': 304}), 31: (1, {'@': 304}), 4: (1, {'@': 304}), 41: (1, {'@': 304}), 32: (1, {'@': 304}), 33: (1, {'@': 304}), 34: (1, {'@': 304})}, 459: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 55: (0, 270), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 460: {2: (0, 89), 3: (0, 300)}, 461: {87: (0, 19), 7: (0, 116), 4: (0, 461), 78: (0, 413), 29: (0, 221), 58: (0, 430), 28: (0, 247), 50: (0, 363)}, 462: {107: (1, {'@': 166}), 3: (1, {'@': 166}), 99: (1, {'@': 166}), 19: (1, {'@': 166}), 108: (1, {'@': 166}), 100: (1, {'@': 166}), 96: (1, {'@': 166}), 97: (1, {'@': 166}), 109: (1, {'@': 166}), 110: (1, {'@': 166}), 111: (1, {'@': 166}), 113: (1, {'@': 166}), 116: (1, {'@': 166}), 95: (1, {'@': 166}), 117: (1, {'@': 166}), 31: (1, {'@': 166}), 98: (1, {'@': 166}), 118: (1, {'@': 166}), 119: (1, {'@': 166}), 112: (1, {'@': 166}), 120: (1, {'@': 166}), 115: (1, {'@': 166}), 0: (1, {'@': 166}), 42: (1, {'@': 166}), 1: (1, {'@': 166}), 35: (1, {'@': 166}), 101: (1, {'@': 166}), 2: (1, {'@': 166}), 16: (1, {'@': 166})}, 463: {35: (0, 61)}, 464: {31: (0, 281), 99: (0, 453), 2: (1, {'@': 195}), 1: (1, {'@': 195})}, 465: {43: (0, 600), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 141: (0, 596), 46: (0, 269), 8: (0, 304), 28: (0, 591), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 142: (0, 549), 50: (0, 363), 22: (0, 386), 143: (0, 564), 61: (0, 151), 53: (0, 451), 14: (0, 612), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 649), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 35: (1, {'@': 263})}, 466: {28: (0, 404)}, 467: {43: (0, 600), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 141: (0, 596), 46: (0, 269), 8: (0, 304), 28: (0, 591), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 142: (0, 549), 50: (0, 363), 22: (0, 386), 61: (0, 151), 143: (0, 403), 53: (0, 451), 14: (0, 612), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 649), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 35: (1, {'@': 263})}, 468: {36: (0, 60), 3: (0, 534)}, 469: {126: (0, 324), 28: (0, 584), 4: (0, 205)}, 470: {31: (0, 281), 99: (0, 453), 2: (1, {'@': 193}), 1: (1, {'@': 193})}, 471: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 573), 5: (1, {'@': 331}), 38: (1, {'@': 331}), 6: (1, {'@': 331}), 39: (1, {'@': 331}), 7: (1, {'@': 331}), 8: (1, {'@': 331}), 9: (1, {'@': 331}), 10: (1, {'@': 331}), 11: (1, {'@': 331}), 12: (1, {'@': 331}), 13: (1, {'@': 331}), 14: (1, {'@': 331}), 15: (1, {'@': 331}), 16: (1, {'@': 331}), 3: (1, {'@': 331}), 17: (1, {'@': 331}), 18: (1, {'@': 331}), 19: (1, {'@': 331}), 20: (1, {'@': 331}), 21: (1, {'@': 331}), 40: (1, {'@': 331}), 22: (1, {'@': 331}), 23: (1, {'@': 331}), 24: (1, {'@': 331}), 25: (1, {'@': 331}), 26: (1, {'@': 331}), 27: (1, {'@': 331}), 28: (1, {'@': 331}), 29: (1, {'@': 331}), 30: (1, {'@': 331}), 2: (1, {'@': 331}), 31: (1, {'@': 331}), 4: (1, {'@': 331}), 32: (1, {'@': 331}), 33: (1, {'@': 331}), 34: (1, {'@': 331})}, 472: {5: (1, {'@': 277}), 37: (1, {'@': 277}), 38: (1, {'@': 277}), 6: (1, {'@': 277}), 39: (1, {'@': 277}), 7: (1, {'@': 277}), 8: (1, {'@': 277}), 9: (1, {'@': 277}), 10: (1, {'@': 277}), 11: (1, {'@': 277}), 12: (1, {'@': 277}), 13: (1, {'@': 277}), 14: (1, {'@': 277}), 15: (1, {'@': 277}), 16: (1, {'@': 277}), 3: (1, {'@': 277}), 17: (1, {'@': 277}), 18: (1, {'@': 277}), 19: (1, {'@': 277}), 20: (1, {'@': 277}), 21: (1, {'@': 277}), 40: (1, {'@': 277}), 22: (1, {'@': 277}), 23: (1, {'@': 277}), 24: (1, {'@': 277}), 25: (1, {'@': 277}), 26: (1, {'@': 277}), 27: (1, {'@': 277}), 28: (1, {'@': 277}), 29: (1, {'@': 277}), 30: (1, {'@': 277}), 2: (1, {'@': 277}), 31: (1, {'@': 277}), 4: (1, {'@': 277}), 41: (1, {'@': 277}), 32: (1, {'@': 277}), 33: (1, {'@': 277}), 34: (1, {'@': 277})}, 473: {28: (0, 295)}, 474: {2: (0, 251), 3: (0, 534), 36: (0, 502)}, 475: {28: (0, 452)}, 476: {8: (0, 153), 36: (0, 243), 3: (0, 534), 1: (0, 140), 132: (0, 57)}, 477: {8: (1, {'@': 392}), 29: (1, {'@': 392}), 1: (1, {'@': 392}), 3: (1, {'@': 392}), 35: (1, {'@': 392})}, 478: {5: (1, {'@': 90}), 39: (1, {'@': 90}), 7: (1, {'@': 90}), 8: (1, {'@': 90}), 9: (1, {'@': 90}), 10: (1, {'@': 90}), 11: (1, {'@': 90}), 12: (1, {'@': 90}), 13: (1, {'@': 90}), 14: (1, {'@': 90}), 15: (1, {'@': 90}), 16: (1, {'@': 90}), 17: (1, {'@': 90}), 18: (1, {'@': 90}), 19: (1, {'@': 90}), 20: (1, {'@': 90}), 21: (1, {'@': 90}), 22: (1, {'@': 90}), 23: (1, {'@': 90}), 24: (1, {'@': 90}), 25: (1, {'@': 90}), 26: (1, {'@': 90}), 27: (1, {'@': 90}), 28: (1, {'@': 90}), 29: (1, {'@': 90}), 30: (1, {'@': 90}), 2: (1, {'@': 90}), 31: (1, {'@': 90}), 4: (1, {'@': 90}), 32: (1, {'@': 90}), 33: (1, {'@': 90}), 34: (1, {'@': 90})}, 479: {43: (0, 609), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 605), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 3: (1, {'@': 408})}, 480: {3: (0, 300), 40: (1, {'@': 290}), 38: (1, {'@': 290})}, 481: {36: (0, 135), 3: (0, 534), 2: (0, 258)}, 482: {5: (1, {'@': 276}), 37: (1, {'@': 276}), 38: (1, {'@': 276}), 6: (1, {'@': 276}), 39: (1, {'@': 276}), 7: (1, {'@': 276}), 8: (1, {'@': 276}), 9: (1, {'@': 276}), 10: (1, {'@': 276}), 11: (1, {'@': 276}), 12: (1, {'@': 276}), 13: (1, {'@': 276}), 14: (1, {'@': 276}), 15: (1, {'@': 276}), 16: (1, {'@': 276}), 3: (1, {'@': 276}), 17: (1, {'@': 276}), 18: (1, {'@': 276}), 19: (1, {'@': 276}), 20: (1, {'@': 276}), 21: (1, {'@': 276}), 40: (1, {'@': 276}), 22: (1, {'@': 276}), 23: (1, {'@': 276}), 24: (1, {'@': 276}), 25: (1, {'@': 276}), 26: (1, {'@': 276}), 27: (1, {'@': 276}), 28: (1, {'@': 276}), 29: (1, {'@': 276}), 30: (1, {'@': 276}), 2: (1, {'@': 276}), 31: (1, {'@': 276}), 4: (1, {'@': 276}), 41: (1, {'@': 276}), 32: (1, {'@': 276}), 33: (1, {'@': 276}), 34: (1, {'@': 276})}, 483: {99: (1, {'@': 258}), 3: (1, {'@': 258}), 31: (1, {'@': 258}), 4: (1, {'@': 258}), 0: (1, {'@': 258}), 101: (1, {'@': 258}), 42: (1, {'@': 258}), 16: (1, {'@': 258}), 1: (1, {'@': 258}), 35: (1, {'@': 258}), 2: (1, {'@': 258})}, 484: {28: (0, 618)}, 485: {2: (1, {'@': 196}), 1: (1, {'@': 196})}, 486: {99: (1, {'@': 202}), 3: (1, {'@': 202}), 31: (1, {'@': 202}), 4: (1, {'@': 202}), 0: (1, {'@': 202}), 101: (1, {'@': 202}), 42: (1, {'@': 202}), 16: (1, {'@': 202}), 1: (1, {'@': 202}), 35: (1, {'@': 202}), 2: (1, {'@': 202})}, 487: {3: (0, 534), 36: (0, 527), 5: (1, {'@': 353}), 37: (1, {'@': 353}), 38: (1, {'@': 353}), 6: (1, {'@': 353}), 39: (1, {'@': 353}), 7: (1, {'@': 353}), 8: (1, {'@': 353}), 9: (1, {'@': 353}), 10: (1, {'@': 353}), 11: (1, {'@': 353}), 12: (1, {'@': 353}), 13: (1, {'@': 353}), 14: (1, {'@': 353}), 15: (1, {'@': 353}), 16: (1, {'@': 353}), 17: (1, {'@': 353}), 18: (1, {'@': 353}), 19: (1, {'@': 353}), 20: (1, {'@': 353}), 21: (1, {'@': 353}), 40: (1, {'@': 353}), 22: (1, {'@': 353}), 23: (1, {'@': 353}), 24: (1, {'@': 353}), 25: (1, {'@': 353}), 26: (1, {'@': 353}), 27: (1, {'@': 353}), 28: (1, {'@': 353}), 29: (1, {'@': 353}), 30: (1, {'@': 353}), 2: (1, {'@': 353}), 31: (1, {'@': 353}), 4: (1, {'@': 353}), 41: (1, {'@': 353}), 32: (1, {'@': 353}), 33: (1, {'@': 353}), 34: (1, {'@': 353})}, 488: {7: (0, 116), 43: (0, 228), 45: (0, 391), 44: (0, 111), 27: (0, 90), 18: (0, 282), 12: (0, 23), 10: (0, 302), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 82: (0, 347), 47: (0, 93), 48: (0, 79), 49: (0, 55), 50: (0, 363), 22: (0, 386), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 59: (0, 423), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 70: (0, 377), 39: (0, 394), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 365), 134: (0, 118), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 379), 31: (0, 68), 60: (0, 272), 61: (0, 151), 80: (0, 468), 33: (0, 39), 63: (0, 172), 133: (0, 434), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 73: (0, 406), 72: (0, 158), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 71: (0, 493), 26: (0, 399), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 74: (0, 435), 81: (0, 339), 32: (0, 462), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 2: (0, 41), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 489: {31: (0, 281), 99: (0, 453), 35: (1, {'@': 244}), 1: (1, {'@': 244})}, 490: {21: (0, 191), 3: (0, 300)}, 491: {7: (0, 469), 127: (0, 565), 126: (0, 294), 28: (0, 584), 4: (0, 491), 29: (0, 598)}, 492: {0: (1, {'@': 317}), 1: (1, {'@': 317})}, 493: {36: (0, 26), 3: (0, 534), 5: (1, {'@': 105}), 39: (1, {'@': 105}), 7: (1, {'@': 105}), 8: (1, {'@': 105}), 9: (1, {'@': 105}), 10: (1, {'@': 105}), 11: (1, {'@': 105}), 12: (1, {'@': 105}), 13: (1, {'@': 105}), 14: (1, {'@': 105}), 15: (1, {'@': 105}), 16: (1, {'@': 105}), 17: (1, {'@': 105}), 18: (1, {'@': 105}), 19: (1, {'@': 105}), 20: (1, {'@': 105}), 21: (1, {'@': 105}), 22: (1, {'@': 105}), 23: (1, {'@': 105}), 24: (1, {'@': 105}), 25: (1, {'@': 105}), 26: (1, {'@': 105}), 27: (1, {'@': 105}), 28: (1, {'@': 105}), 29: (1, {'@': 105}), 30: (1, {'@': 105}), 2: (1, {'@': 105}), 31: (1, {'@': 105}), 4: (1, {'@': 105}), 32: (1, {'@': 105}), 33: (1, {'@': 105}), 34: (1, {'@': 105})}, 494: {99: (1, {'@': 213}), 3: (1, {'@': 213}), 31: (1, {'@': 213}), 4: (1, {'@': 213}), 0: (1, {'@': 213}), 101: (1, {'@': 213}), 42: (1, {'@': 213}), 16: (1, {'@': 213}), 1: (1, {'@': 213}), 35: (1, {'@': 213}), 2: (1, {'@': 213})}, 495: {1: (0, 390), 31: (0, 281), 99: (0, 453), 101: (0, 148), 0: (0, 105), 16: (0, 40), 42: (1, {'@': 182})}, 496: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 62: (0, 127), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 51: (0, 49), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 497: {117: (0, 459), 108: (0, 634), 111: (0, 531), 110: (0, 546), 107: (0, 368), 109: (0, 426), 96: (1, {'@': 135}), 97: (1, {'@': 135}), 3: (1, {'@': 135}), 31: (1, {'@': 135}), 98: (1, {'@': 135}), 99: (1, {'@': 135}), 100: (1, {'@': 135}), 0: (1, {'@': 135}), 101: (1, {'@': 135}), 16: (1, {'@': 135}), 42: (1, {'@': 135}), 1: (1, {'@': 135}), 35: (1, {'@': 135}), 2: (1, {'@': 135})}, 498: {107: (1, {'@': 187}), 3: (1, {'@': 187}), 99: (1, {'@': 187}), 19: (1, {'@': 187}), 108: (1, {'@': 187}), 100: (1, {'@': 187}), 96: (1, {'@': 187}), 97: (1, {'@': 187}), 109: (1, {'@': 187}), 110: (1, {'@': 187}), 111: (1, {'@': 187}), 113: (1, {'@': 187}), 116: (1, {'@': 187}), 95: (1, {'@': 187}), 117: (1, {'@': 187}), 31: (1, {'@': 187}), 98: (1, {'@': 187}), 118: (1, {'@': 187}), 119: (1, {'@': 187}), 112: (1, {'@': 187}), 120: (1, {'@': 187}), 115: (1, {'@': 187}), 0: (1, {'@': 187}), 42: (1, {'@': 187}), 1: (1, {'@': 187}), 35: (1, {'@': 187}), 101: (1, {'@': 187}), 2: (1, {'@': 187}), 16: (1, {'@': 187})}, 499: {43: (0, 600), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 141: (0, 596), 46: (0, 269), 8: (0, 304), 143: (0, 381), 28: (0, 591), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 142: (0, 549), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 649), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 35: (1, {'@': 263})}, 500: {35: (0, 156), 99: (1, {'@': 203}), 31: (1, {'@': 203}), 4: (1, {'@': 203})}, 501: {29: (0, 466), 8: (1, {'@': 391}), 3: (1, {'@': 391}), 1: (1, {'@': 391})}, 502: {2: (0, 21), 3: (0, 300)}, 503: {96: (1, {'@': 131}), 97: (1, {'@': 131}), 3: (1, {'@': 131}), 31: (1, {'@': 131}), 98: (1, {'@': 131}), 99: (1, {'@': 131}), 100: (1, {'@': 131}), 0: (1, {'@': 131}), 101: (1, {'@': 131}), 16: (1, {'@': 131}), 42: (1, {'@': 131}), 1: (1, {'@': 131}), 35: (1, {'@': 131}), 2: (1, {'@': 131})}, 504: {99: (1, {'@': 212}), 3: (1, {'@': 212}), 31: (1, {'@': 212}), 4: (1, {'@': 212}), 0: (1, {'@': 212}), 101: (1, {'@': 212}), 42: (1, {'@': 212}), 16: (1, {'@': 212}), 1: (1, {'@': 212}), 35: (1, {'@': 212}), 2: (1, {'@': 212})}, 505: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 8: (0, 304), 55: (0, 588), 72: (0, 158), 44: (0, 437), 11: (0, 315), 48: (0, 217), 22: (0, 386), 50: (0, 363), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 86: (0, 436), 87: (0, 544), 33: (0, 39), 29: (0, 221), 89: (0, 503)}, 506: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 214), 5: (1, {'@': 329}), 38: (1, {'@': 329}), 6: (1, {'@': 329}), 39: (1, {'@': 329}), 7: (1, {'@': 329}), 8: (1, {'@': 329}), 9: (1, {'@': 329}), 10: (1, {'@': 329}), 11: (1, {'@': 329}), 12: (1, {'@': 329}), 13: (1, {'@': 329}), 14: (1, {'@': 329}), 15: (1, {'@': 329}), 16: (1, {'@': 329}), 3: (1, {'@': 329}), 17: (1, {'@': 329}), 18: (1, {'@': 329}), 19: (1, {'@': 329}), 20: (1, {'@': 329}), 21: (1, {'@': 329}), 40: (1, {'@': 329}), 22: (1, {'@': 329}), 23: (1, {'@': 329}), 24: (1, {'@': 329}), 25: (1, {'@': 329}), 26: (1, {'@': 329}), 27: (1, {'@': 329}), 28: (1, {'@': 329}), 29: (1, {'@': 329}), 30: (1, {'@': 329}), 2: (1, {'@': 329}), 31: (1, {'@': 329}), 4: (1, {'@': 329}), 32: (1, {'@': 329}), 33: (1, {'@': 329}), 34: (1, {'@': 329})}, 507: {3: (1, {'@': 109})}, 508: {2: (0, 29), 36: (0, 1), 3: (0, 534)}, 509: {99: (1, {'@': 203}), 3: (1, {'@': 203}), 31: (1, {'@': 203}), 4: (1, {'@': 203}), 0: (1, {'@': 203}), 101: (1, {'@': 203}), 42: (1, {'@': 203}), 16: (1, {'@': 203}), 1: (1, {'@': 203}), 35: (1, {'@': 203}), 2: (1, {'@': 203})}, 510: {4: (0, 465), 107: (1, {'@': 162}), 99: (1, {'@': 162}), 19: (1, {'@': 162}), 108: (1, {'@': 162}), 100: (1, {'@': 162}), 96: (1, {'@': 162}), 97: (1, {'@': 162}), 109: (1, {'@': 162}), 110: (1, {'@': 162}), 111: (1, {'@': 162}), 0: (1, {'@': 162}), 113: (1, {'@': 162}), 116: (1, {'@': 162}), 95: (1, {'@': 162}), 117: (1, {'@': 162}), 31: (1, {'@': 162}), 98: (1, {'@': 162}), 118: (1, {'@': 162}), 119: (1, {'@': 162}), 112: (1, {'@': 162}), 120: (1, {'@': 162}), 115: (1, {'@': 162}), 42: (1, {'@': 162}), 1: (1, {'@': 162}), 101: (1, {'@': 162}), 16: (1, {'@': 162}), 35: (1, {'@': 162}), 3: (1, {'@': 162}), 2: (1, {'@': 162})}, 511: {107: (1, {'@': 171}), 3: (1, {'@': 171}), 99: (1, {'@': 171}), 19: (1, {'@': 171}), 108: (1, {'@': 171}), 100: (1, {'@': 171}), 96: (1, {'@': 171}), 97: (1, {'@': 171}), 109: (1, {'@': 171}), 110: (1, {'@': 171}), 111: (1, {'@': 171}), 113: (1, {'@': 171}), 116: (1, {'@': 171}), 95: (1, {'@': 171}), 117: (1, {'@': 171}), 31: (1, {'@': 171}), 98: (1, {'@': 171}), 118: (1, {'@': 171}), 119: (1, {'@': 171}), 112: (1, {'@': 171}), 120: (1, {'@': 171}), 115: (1, {'@': 171}), 0: (1, {'@': 171}), 42: (1, {'@': 171}), 1: (1, {'@': 171}), 35: (1, {'@': 171}), 101: (1, {'@': 171}), 2: (1, {'@': 171}), 16: (1, {'@': 171})}, 512: {0: (0, 280), 114: (0, 240)}, 513: {28: (0, 206), 150: (0, 165)}, 514: {4: (0, 407)}, 515: {5: (1, {'@': 297}), 37: (1, {'@': 297}), 38: (1, {'@': 297}), 6: (1, {'@': 297}), 39: (1, {'@': 297}), 7: (1, {'@': 297}), 8: (1, {'@': 297}), 9: (1, {'@': 297}), 10: (1, {'@': 297}), 11: (1, {'@': 297}), 12: (1, {'@': 297}), 13: (1, {'@': 297}), 14: (1, {'@': 297}), 15: (1, {'@': 297}), 16: (1, {'@': 297}), 3: (1, {'@': 297}), 17: (1, {'@': 297}), 18: (1, {'@': 297}), 19: (1, {'@': 297}), 20: (1, {'@': 297}), 21: (1, {'@': 297}), 40: (1, {'@': 297}), 22: (1, {'@': 297}), 23: (1, {'@': 297}), 24: (1, {'@': 297}), 25: (1, {'@': 297}), 26: (1, {'@': 297}), 27: (1, {'@': 297}), 28: (1, {'@': 297}), 29: (1, {'@': 297}), 30: (1, {'@': 297}), 2: (1, {'@': 297}), 31: (1, {'@': 297}), 4: (1, {'@': 297}), 41: (1, {'@': 297}), 32: (1, {'@': 297}), 33: (1, {'@': 297}), 34: (1, {'@': 297})}, 516: {107: (1, {'@': 179}), 3: (1, {'@': 179}), 99: (1, {'@': 179}), 19: (1, {'@': 179}), 108: (1, {'@': 179}), 100: (1, {'@': 179}), 96: (1, {'@': 179}), 97: (1, {'@': 179}), 109: (1, {'@': 179}), 110: (1, {'@': 179}), 111: (1, {'@': 179}), 113: (1, {'@': 179}), 116: (1, {'@': 179}), 95: (1, {'@': 179}), 117: (1, {'@': 179}), 31: (1, {'@': 179}), 98: (1, {'@': 179}), 118: (1, {'@': 179}), 119: (1, {'@': 179}), 112: (1, {'@': 179}), 120: (1, {'@': 179}), 115: (1, {'@': 179}), 0: (1, {'@': 179}), 42: (1, {'@': 179}), 1: (1, {'@': 179}), 35: (1, {'@': 179}), 101: (1, {'@': 179}), 2: (1, {'@': 179}), 16: (1, {'@': 179})}, 517: {43: (0, 307), 7: (0, 116), 27: (0, 537), 49: (0, 201), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 518: {4: (0, 629)}, 519: {31: (0, 281), 99: (0, 453), 0: (0, 398), 3: (1, {'@': 117})}, 520: {1: (0, 440), 42: (0, 396)}, 521: {99: (1, {'@': 218}), 3: (1, {'@': 218}), 31: (1, {'@': 218}), 4: (1, {'@': 218}), 0: (1, {'@': 218}), 101: (1, {'@': 218}), 42: (1, {'@': 218}), 16: (1, {'@': 218}), 1: (1, {'@': 218}), 35: (1, {'@': 218}), 2: (1, {'@': 218})}, 522: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 8: (0, 304), 55: (0, 588), 72: (0, 158), 44: (0, 437), 11: (0, 315), 48: (0, 218), 22: (0, 386), 50: (0, 363), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 86: (0, 436), 87: (0, 544), 33: (0, 39), 29: (0, 221), 89: (0, 503)}, 523: {35: (0, 167)}, 524: {4: (0, 445)}, 525: {29: (0, 466), 8: (1, {'@': 389}), 3: (1, {'@': 389}), 1: (1, {'@': 389}), 35: (1, {'@': 389})}, 526: {31: (0, 281), 99: (0, 453), 35: (0, 429)}, 527: {3: (0, 300), 5: (1, {'@': 352}), 37: (1, {'@': 352}), 38: (1, {'@': 352}), 6: (1, {'@': 352}), 39: (1, {'@': 352}), 7: (1, {'@': 352}), 8: (1, {'@': 352}), 9: (1, {'@': 352}), 10: (1, {'@': 352}), 11: (1, {'@': 352}), 12: (1, {'@': 352}), 13: (1, {'@': 352}), 14: (1, {'@': 352}), 15: (1, {'@': 352}), 16: (1, {'@': 352}), 17: (1, {'@': 352}), 18: (1, {'@': 352}), 19: (1, {'@': 352}), 20: (1, {'@': 352}), 21: (1, {'@': 352}), 40: (1, {'@': 352}), 22: (1, {'@': 352}), 23: (1, {'@': 352}), 24: (1, {'@': 352}), 25: (1, {'@': 352}), 26: (1, {'@': 352}), 27: (1, {'@': 352}), 28: (1, {'@': 352}), 29: (1, {'@': 352}), 30: (1, {'@': 352}), 2: (1, {'@': 352}), 31: (1, {'@': 352}), 4: (1, {'@': 352}), 41: (1, {'@': 352}), 32: (1, {'@': 352}), 33: (1, {'@': 352}), 34: (1, {'@': 352})}, 528: {35: (0, 274), 0: (0, 280)}, 529: {31: (0, 281), 99: (0, 453), 42: (0, 301)}, 530: {41: (0, 242), 139: (0, 623), 36: (0, 439), 140: (0, 506), 3: (0, 534)}, 531: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 259), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 532: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 219}), 0: (1, {'@': 219}), 16: (1, {'@': 219}), 42: (1, {'@': 219}), 101: (1, {'@': 219}), 1: (1, {'@': 219}), 35: (1, {'@': 219}), 2: (1, {'@': 219})}, 533: {114: (1, {'@': 252}), 35: (1, {'@': 252}), 1: (1, {'@': 252})}, 534: {5: (1, {'@': 412}), 37: (1, {'@': 412}), 38: (1, {'@': 412}), 6: (1, {'@': 412}), 39: (1, {'@': 412}), 7: (1, {'@': 412}), 8: (1, {'@': 412}), 9: (1, {'@': 412}), 10: (1, {'@': 412}), 11: (1, {'@': 412}), 12: (1, {'@': 412}), 13: (1, {'@': 412}), 14: (1, {'@': 412}), 15: (1, {'@': 412}), 16: (1, {'@': 412}), 3: (1, {'@': 412}), 17: (1, {'@': 412}), 18: (1, {'@': 412}), 19: (1, {'@': 412}), 20: (1, {'@': 412}), 21: (1, {'@': 412}), 40: (1, {'@': 412}), 22: (1, {'@': 412}), 23: (1, {'@': 412}), 24: (1, {'@': 412}), 25: (1, {'@': 412}), 26: (1, {'@': 412}), 27: (1, {'@': 412}), 28: (1, {'@': 412}), 29: (1, {'@': 412}), 30: (1, {'@': 412}), 2: (1, {'@': 412}), 31: (1, {'@': 412}), 4: (1, {'@': 412}), 41: (1, {'@': 412}), 32: (1, {'@': 412}), 33: (1, {'@': 412}), 34: (1, {'@': 412}), 1: (1, {'@': 412})}, 535: {35: (1, {'@': 235})}, 536: {40: (0, 447), 103: (0, 73), 3: (0, 300)}, 537: {4: (0, 25), 28: (0, 438)}, 538: {62: (0, 237), 8: (0, 53), 3: (0, 300)}, 539: {137: (0, 244), 151: (0, 150), 4: (0, 422), 138: (0, 608), 28: (0, 69)}, 540: {7: (0, 116), 43: (0, 228), 36: (0, 8), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 55: (0, 588), 51: (0, 219), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 62: (0, 119), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 541: {35: (0, 540), 31: (0, 281), 99: (0, 453)}, 542: {5: (1, {'@': 296}), 37: (1, {'@': 296}), 38: (1, {'@': 296}), 6: (1, {'@': 296}), 39: (1, {'@': 296}), 7: (1, {'@': 296}), 8: (1, {'@': 296}), 9: (1, {'@': 296}), 10: (1, {'@': 296}), 11: (1, {'@': 296}), 12: (1, {'@': 296}), 13: (1, {'@': 296}), 14: (1, {'@': 296}), 15: (1, {'@': 296}), 16: (1, {'@': 296}), 3: (1, {'@': 296}), 17: (1, {'@': 296}), 18: (1, {'@': 296}), 19: (1, {'@': 296}), 20: (1, {'@': 296}), 21: (1, {'@': 296}), 40: (1, {'@': 296}), 22: (1, {'@': 296}), 23: (1, {'@': 296}), 24: (1, {'@': 296}), 25: (1, {'@': 296}), 26: (1, {'@': 296}), 27: (1, {'@': 296}), 28: (1, {'@': 296}), 29: (1, {'@': 296}), 30: (1, {'@': 296}), 2: (1, {'@': 296}), 31: (1, {'@': 296}), 4: (1, {'@': 296}), 41: (1, {'@': 296}), 32: (1, {'@': 296}), 33: (1, {'@': 296}), 34: (1, {'@': 296})}, 543: {99: (1, {'@': 220}), 3: (1, {'@': 220}), 31: (1, {'@': 220}), 0: (1, {'@': 220}), 16: (1, {'@': 220}), 42: (1, {'@': 220}), 101: (1, {'@': 220}), 1: (1, {'@': 220}), 35: (1, {'@': 220}), 2: (1, {'@': 220})}, 544: {107: (1, {'@': 395}), 3: (1, {'@': 395}), 99: (1, {'@': 395}), 19: (1, {'@': 395}), 108: (1, {'@': 395}), 100: (1, {'@': 395}), 96: (1, {'@': 395}), 97: (1, {'@': 395}), 109: (1, {'@': 395}), 110: (1, {'@': 395}), 111: (1, {'@': 395}), 112: (1, {'@': 395}), 113: (1, {'@': 395}), 114: (1, {'@': 395}), 115: (1, {'@': 395}), 116: (1, {'@': 395}), 95: (1, {'@': 395}), 117: (1, {'@': 395}), 31: (1, {'@': 395}), 98: (1, {'@': 395}), 4: (1, {'@': 395}), 118: (1, {'@': 395}), 119: (1, {'@': 395}), 120: (1, {'@': 395}), 121: (1, {'@': 395}), 0: (1, {'@': 395}), 42: (1, {'@': 395}), 1: (1, {'@': 395}), 35: (1, {'@': 395}), 101: (1, {'@': 395}), 2: (1, {'@': 395}), 16: (1, {'@': 395})}, 545: {1: (0, 345), 2: (0, 498)}, 546: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 253), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 547: {31: (0, 281), 99: (0, 453), 1: (1, {'@': 185}), 42: (1, {'@': 185})}, 548: {0: (0, 517)}, 549: {1: (0, 499), 35: (1, {'@': 261})}, 550: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 200})}, 551: {43: (0, 228), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 49: (0, 55), 5: (0, 428), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 45: (0, 234), 81: (0, 339), 32: (0, 462), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 552: {}, 553: {31: (0, 281), 99: (0, 453), 0: (0, 326)}, 554: {3: (1, {'@': 116}), 99: (1, {'@': 116}), 42: (1, {'@': 116}), 1: (1, {'@': 116}), 0: (1, {'@': 116}), 35: (1, {'@': 116}), 101: (1, {'@': 116}), 2: (1, {'@': 116}), 31: (1, {'@': 116}), 16: (1, {'@': 116})}, 555: {35: (1, {'@': 231})}, 556: {5: (1, {'@': 324}), 37: (1, {'@': 324}), 38: (1, {'@': 324}), 6: (1, {'@': 324}), 39: (1, {'@': 324}), 7: (1, {'@': 324}), 8: (1, {'@': 324}), 9: (1, {'@': 324}), 10: (1, {'@': 324}), 11: (1, {'@': 324}), 12: (1, {'@': 324}), 13: (1, {'@': 324}), 14: (1, {'@': 324}), 15: (1, {'@': 324}), 16: (1, {'@': 324}), 3: (1, {'@': 324}), 17: (1, {'@': 324}), 18: (1, {'@': 324}), 19: (1, {'@': 324}), 20: (1, {'@': 324}), 21: (1, {'@': 324}), 40: (1, {'@': 324}), 22: (1, {'@': 324}), 23: (1, {'@': 324}), 24: (1, {'@': 324}), 25: (1, {'@': 324}), 26: (1, {'@': 324}), 27: (1, {'@': 324}), 28: (1, {'@': 324}), 29: (1, {'@': 324}), 30: (1, {'@': 324}), 2: (1, {'@': 324}), 31: (1, {'@': 324}), 4: (1, {'@': 324}), 41: (1, {'@': 324}), 32: (1, {'@': 324}), 33: (1, {'@': 324}), 34: (1, {'@': 324})}, 557: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 11: (0, 315), 32: (0, 462), 77: (0, 78), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 26: (0, 399), 86: (0, 436), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 558: {31: (0, 281), 99: (0, 453), 42: (0, 309)}, 559: {99: (1, {'@': 222}), 3: (1, {'@': 222}), 31: (1, {'@': 222}), 0: (1, {'@': 222}), 16: (1, {'@': 222}), 42: (1, {'@': 222}), 101: (1, {'@': 222}), 1: (1, {'@': 222}), 35: (1, {'@': 222}), 2: (1, {'@': 222})}, 560: {3: (0, 534), 36: (0, 305)}, 561: {3: (1, {'@': 378}), 2: (1, {'@': 378}), 1: (1, {'@': 378})}, 562: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 597), 5: (1, {'@': 323}), 38: (1, {'@': 323}), 6: (1, {'@': 323}), 39: (1, {'@': 323}), 7: (1, {'@': 323}), 8: (1, {'@': 323}), 9: (1, {'@': 323}), 10: (1, {'@': 323}), 11: (1, {'@': 323}), 12: (1, {'@': 323}), 13: (1, {'@': 323}), 14: (1, {'@': 323}), 15: (1, {'@': 323}), 16: (1, {'@': 323}), 3: (1, {'@': 323}), 17: (1, {'@': 323}), 18: (1, {'@': 323}), 19: (1, {'@': 323}), 20: (1, {'@': 323}), 21: (1, {'@': 323}), 40: (1, {'@': 323}), 22: (1, {'@': 323}), 23: (1, {'@': 323}), 24: (1, {'@': 323}), 25: (1, {'@': 323}), 26: (1, {'@': 323}), 27: (1, {'@': 323}), 28: (1, {'@': 323}), 29: (1, {'@': 323}), 30: (1, {'@': 323}), 2: (1, {'@': 323}), 31: (1, {'@': 323}), 4: (1, {'@': 323}), 32: (1, {'@': 323}), 33: (1, {'@': 323}), 34: (1, {'@': 323})}, 563: {31: (0, 281), 99: (0, 453), 35: (0, 411)}, 564: {35: (0, 246)}, 565: {35: (0, 637)}, 566: {35: (0, 518)}, 567: {5: (1, {'@': 121}), 37: (1, {'@': 121}), 38: (1, {'@': 121}), 6: (1, {'@': 121}), 39: (1, {'@': 121}), 7: (1, {'@': 121}), 8: (1, {'@': 121}), 9: (1, {'@': 121}), 10: (1, {'@': 121}), 11: (1, {'@': 121}), 12: (1, {'@': 121}), 13: (1, {'@': 121}), 14: (1, {'@': 121}), 15: (1, {'@': 121}), 16: (1, {'@': 121}), 3: (1, {'@': 121}), 17: (1, {'@': 121}), 18: (1, {'@': 121}), 19: (1, {'@': 121}), 20: (1, {'@': 121}), 21: (1, {'@': 121}), 40: (1, {'@': 121}), 22: (1, {'@': 121}), 23: (1, {'@': 121}), 24: (1, {'@': 121}), 25: (1, {'@': 121}), 26: (1, {'@': 121}), 27: (1, {'@': 121}), 28: (1, {'@': 121}), 29: (1, {'@': 121}), 30: (1, {'@': 121}), 2: (1, {'@': 121}), 31: (1, {'@': 121}), 4: (1, {'@': 121}), 41: (1, {'@': 121}), 32: (1, {'@': 121}), 33: (1, {'@': 121}), 34: (1, {'@': 121})}, 568: {1: (0, 268), 35: (1, {'@': 230})}, 569: {5: (1, {'@': 361}), 37: (1, {'@': 361}), 38: (1, {'@': 361}), 6: (1, {'@': 361}), 39: (1, {'@': 361}), 7: (1, {'@': 361}), 8: (1, {'@': 361}), 9: (1, {'@': 361}), 10: (1, {'@': 361}), 11: (1, {'@': 361}), 12: (1, {'@': 361}), 13: (1, {'@': 361}), 14: (1, {'@': 361}), 15: (1, {'@': 361}), 16: (1, {'@': 361}), 3: (1, {'@': 361}), 17: (1, {'@': 361}), 18: (1, {'@': 361}), 19: (1, {'@': 361}), 20: (1, {'@': 361}), 21: (1, {'@': 361}), 40: (1, {'@': 361}), 22: (1, {'@': 361}), 23: (1, {'@': 361}), 24: (1, {'@': 361}), 25: (1, {'@': 361}), 26: (1, {'@': 361}), 27: (1, {'@': 361}), 28: (1, {'@': 361}), 29: (1, {'@': 361}), 30: (1, {'@': 361}), 2: (1, {'@': 361}), 31: (1, {'@': 361}), 4: (1, {'@': 361}), 41: (1, {'@': 361}), 32: (1, {'@': 361}), 33: (1, {'@': 361}), 34: (1, {'@': 361})}, 570: {4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 61: (0, 215), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 571: {77: (0, 87), 4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 26: (0, 399), 86: (0, 436), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 572: {114: (0, 229), 35: (1, {'@': 241}), 1: (1, {'@': 241})}, 573: {5: (1, {'@': 330}), 37: (1, {'@': 330}), 38: (1, {'@': 330}), 6: (1, {'@': 330}), 39: (1, {'@': 330}), 7: (1, {'@': 330}), 8: (1, {'@': 330}), 9: (1, {'@': 330}), 10: (1, {'@': 330}), 11: (1, {'@': 330}), 12: (1, {'@': 330}), 13: (1, {'@': 330}), 14: (1, {'@': 330}), 15: (1, {'@': 330}), 16: (1, {'@': 330}), 3: (1, {'@': 330}), 17: (1, {'@': 330}), 18: (1, {'@': 330}), 19: (1, {'@': 330}), 20: (1, {'@': 330}), 21: (1, {'@': 330}), 40: (1, {'@': 330}), 22: (1, {'@': 330}), 23: (1, {'@': 330}), 24: (1, {'@': 330}), 25: (1, {'@': 330}), 26: (1, {'@': 330}), 27: (1, {'@': 330}), 28: (1, {'@': 330}), 29: (1, {'@': 330}), 30: (1, {'@': 330}), 2: (1, {'@': 330}), 31: (1, {'@': 330}), 4: (1, {'@': 330}), 41: (1, {'@': 330}), 32: (1, {'@': 330}), 33: (1, {'@': 330}), 34: (1, {'@': 330})}, 574: {7: (0, 116), 43: (0, 364), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 430), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 620), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 575: {1: (0, 114), 35: (1, {'@': 232})}, 576: {43: (0, 642), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 577: {43: (0, 600), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 141: (0, 596), 46: (0, 269), 8: (0, 304), 28: (0, 591), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 142: (0, 549), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 649), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 143: (0, 252), 88: (0, 486), 29: (0, 221), 89: (0, 503), 35: (1, {'@': 263})}, 578: {35: (1, {'@': 265}), 1: (1, {'@': 265})}, 579: {38: (0, 524), 40: (0, 447), 103: (0, 619), 104: (0, 640), 3: (0, 300), 105: (0, 644), 102: (0, 115), 5: (1, {'@': 283}), 37: (1, {'@': 283}), 6: (1, {'@': 283}), 39: (1, {'@': 283}), 7: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 10: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 13: (1, {'@': 283}), 14: (1, {'@': 283}), 15: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 20: (1, {'@': 283}), 21: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 25: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 28: (1, {'@': 283}), 29: (1, {'@': 283}), 30: (1, {'@': 283}), 2: (1, {'@': 283}), 31: (1, {'@': 283}), 4: (1, {'@': 283}), 41: (1, {'@': 283}), 32: (1, {'@': 283}), 33: (1, {'@': 283}), 34: (1, {'@': 283})}, 580: {41: (0, 242), 37: (0, 275), 139: (0, 313), 145: (0, 276), 5: (1, {'@': 333}), 38: (1, {'@': 333}), 6: (1, {'@': 333}), 39: (1, {'@': 333}), 7: (1, {'@': 333}), 8: (1, {'@': 333}), 9: (1, {'@': 333}), 10: (1, {'@': 333}), 11: (1, {'@': 333}), 12: (1, {'@': 333}), 13: (1, {'@': 333}), 14: (1, {'@': 333}), 15: (1, {'@': 333}), 16: (1, {'@': 333}), 3: (1, {'@': 333}), 17: (1, {'@': 333}), 18: (1, {'@': 333}), 19: (1, {'@': 333}), 20: (1, {'@': 333}), 21: (1, {'@': 333}), 40: (1, {'@': 333}), 22: (1, {'@': 333}), 23: (1, {'@': 333}), 24: (1, {'@': 333}), 25: (1, {'@': 333}), 26: (1, {'@': 333}), 27: (1, {'@': 333}), 28: (1, {'@': 333}), 29: (1, {'@': 333}), 30: (1, {'@': 333}), 2: (1, {'@': 333}), 31: (1, {'@': 333}), 4: (1, {'@': 333}), 32: (1, {'@': 333}), 33: (1, {'@': 333}), 34: (1, {'@': 333})}, 581: {35: (0, 354)}, 582: {28: (0, 103), 36: (0, 538), 8: (0, 53), 3: (0, 534), 62: (0, 569)}, 583: {7: (0, 116), 43: (0, 228), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 593), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 55), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 24: (0, 539), 62: (0, 357), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 60: (0, 272), 61: (0, 151), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 51: (0, 210), 67: (0, 226), 68: (0, 232), 69: (0, 174), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 75: (0, 567), 28: (0, 349), 76: (0, 325), 13: (0, 511), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 3: (0, 300), 81: (0, 339), 32: (0, 462), 82: (0, 454), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 584: {8: (1, {'@': 394}), 29: (1, {'@': 394}), 1: (1, {'@': 394}), 3: (1, {'@': 394}), 35: (1, {'@': 394})}, 585: {7: (0, 116), 43: (0, 610), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 603), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 57: (0, 628), 81: (0, 339), 32: (0, 462), 83: (0, 613), 49: (0, 592), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 586: {16: (0, 15), 1: (0, 393), 0: (0, 64), 42: (1, {'@': 183})}, 587: {124: (0, 126), 62: (0, 85), 8: (0, 53)}, 588: {116: (0, 622), 107: (1, {'@': 137}), 3: (1, {'@': 137}), 99: (1, {'@': 137}), 108: (1, {'@': 137}), 100: (1, {'@': 137}), 96: (1, {'@': 137}), 117: (1, {'@': 137}), 97: (1, {'@': 137}), 31: (1, {'@': 137}), 98: (1, {'@': 137}), 109: (1, {'@': 137}), 110: (1, {'@': 137}), 111: (1, {'@': 137}), 0: (1, {'@': 137}), 42: (1, {'@': 137}), 1: (1, {'@': 137}), 35: (1, {'@': 137}), 101: (1, {'@': 137}), 2: (1, {'@': 137}), 16: (1, {'@': 137})}, 589: {0: (0, 443)}, 590: {3: (0, 300), 40: (1, {'@': 284}), 38: (1, {'@': 284})}, 591: {114: (0, 266), 148: (0, 388), 107: (1, {'@': 403}), 120: (1, {'@': 403}), 99: (1, {'@': 403}), 19: (1, {'@': 403}), 106: (1, {'@': 403}), 108: (1, {'@': 403}), 100: (1, {'@': 403}), 96: (1, {'@': 403}), 97: (1, {'@': 403}), 109: (1, {'@': 403}), 110: (1, {'@': 403}), 1: (1, {'@': 403}), 111: (1, {'@': 403}), 35: (1, {'@': 403}), 113: (1, {'@': 403}), 29: (1, {'@': 403}), 116: (1, {'@': 403}), 95: (1, {'@': 403}), 117: (1, {'@': 403}), 31: (1, {'@': 403}), 98: (1, {'@': 403}), 4: (1, {'@': 403}), 118: (1, {'@': 403}), 112: (1, {'@': 403}), 119: (1, {'@': 403}), 115: (1, {'@': 403})}, 592: {3: (1, {'@': 198})}, 593: {43: (0, 519), 7: (0, 116), 147: (0, 545), 44: (0, 111), 27: (0, 90), 18: (0, 282), 10: (0, 302), 12: (0, 23), 45: (0, 312), 46: (0, 269), 8: (0, 304), 11: (0, 315), 15: (0, 196), 47: (0, 93), 48: (0, 79), 49: (0, 382), 36: (0, 24), 22: (0, 386), 50: (0, 363), 52: (0, 337), 16: (0, 415), 53: (0, 451), 14: (0, 612), 23: (0, 582), 54: (0, 509), 34: (0, 329), 122: (0, 30), 24: (0, 539), 55: (0, 588), 56: (0, 376), 4: (0, 366), 57: (0, 384), 9: (0, 484), 58: (0, 321), 20: (0, 283), 21: (0, 194), 25: (0, 173), 59: (0, 14), 31: (0, 68), 61: (0, 151), 60: (0, 272), 33: (0, 39), 63: (0, 172), 64: (0, 189), 65: (0, 168), 66: (0, 278), 67: (0, 226), 69: (0, 174), 68: (0, 232), 19: (0, 52), 70: (0, 108), 71: (0, 293), 72: (0, 158), 73: (0, 169), 74: (0, 560), 5: (0, 428), 30: (0, 479), 51: (0, 599), 28: (0, 349), 75: (0, 567), 13: (0, 511), 76: (0, 325), 26: (0, 399), 77: (0, 356), 78: (0, 413), 79: (0, 385), 17: (0, 409), 80: (0, 392), 81: (0, 339), 3: (0, 534), 32: (0, 462), 82: (0, 454), 1: (0, 648), 83: (0, 613), 84: (0, 554), 85: (0, 328), 86: (0, 436), 87: (0, 544), 88: (0, 486), 29: (0, 221), 89: (0, 503), 2: (1, {'@': 75})}, 594: {35: (1, {'@': 253}), 114: (1, {'@': 253}), 1: (1, {'@': 253})}, 595: {43: (0, 82), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 596: {1: (0, 467), 35: (1, {'@': 262})}, 597: {5: (1, {'@': 322}), 37: (1, {'@': 322}), 38: (1, {'@': 322}), 6: (1, {'@': 322}), 39: (1, {'@': 322}), 7: (1, {'@': 322}), 8: (1, {'@': 322}), 9: (1, {'@': 322}), 10: (1, {'@': 322}), 11: (1, {'@': 322}), 12: (1, {'@': 322}), 13: (1, {'@': 322}), 14: (1, {'@': 322}), 15: (1, {'@': 322}), 16: (1, {'@': 322}), 3: (1, {'@': 322}), 17: (1, {'@': 322}), 18: (1, {'@': 322}), 19: (1, {'@': 322}), 20: (1, {'@': 322}), 21: (1, {'@': 322}), 40: (1, {'@': 322}), 22: (1, {'@': 322}), 23: (1, {'@': 322}), 24: (1, {'@': 322}), 25: (1, {'@': 322}), 26: (1, {'@': 322}), 27: (1, {'@': 322}), 28: (1, {'@': 322}), 29: (1, {'@': 322}), 30: (1, {'@': 322}), 2: (1, {'@': 322}), 31: (1, {'@': 322}), 4: (1, {'@': 322}), 41: (1, {'@': 322}), 32: (1, {'@': 322}), 33: (1, {'@': 322}), 34: (1, {'@': 322})}, 598: {126: (0, 525), 28: (0, 584), 4: (0, 205)}, 599: {5: (1, {'@': 73}), 7: (1, {'@': 73}), 8: (1, {'@': 73}), 9: (1, {'@': 73}), 10: (1, {'@': 73}), 11: (1, {'@': 73}), 12: (1, {'@': 73}), 13: (1, {'@': 73}), 14: (1, {'@': 73}), 15: (1, {'@': 73}), 16: (1, {'@': 73}), 17: (1, {'@': 73}), 18: (1, {'@': 73}), 19: (1, {'@': 73}), 20: (1, {'@': 73}), 21: (1, {'@': 73}), 22: (1, {'@': 73}), 23: (1, {'@': 73}), 24: (1, {'@': 73}), 25: (1, {'@': 73}), 26: (1, {'@': 73}), 27: (1, {'@': 73}), 28: (1, {'@': 73}), 29: (1, {'@': 73}), 30: (1, {'@': 73}), 2: (1, {'@': 73}), 31: (1, {'@': 73}), 4: (1, {'@': 73}), 32: (1, {'@': 73}), 33: (1, {'@': 73}), 34: (1, {'@': 73}), 6: (1, {'@': 73})}, 600: {31: (0, 281), 99: (0, 453), 35: (1, {'@': 266}), 1: (1, {'@': 266})}, 601: {0: (1, {'@': 316}), 1: (1, {'@': 316})}, 602: {43: (0, 433), 7: (0, 116), 4: (0, 366), 67: (0, 226), 27: (0, 537), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 53: (0, 451), 61: (0, 151), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 49: (0, 340), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 129: (0, 331), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503), 42: (1, {'@': 184})}, 603: {4: (0, 465), 114: (0, 585), 107: (1, {'@': 162}), 3: (1, {'@': 162}), 99: (1, {'@': 162}), 19: (1, {'@': 162}), 108: (1, {'@': 162}), 100: (1, {'@': 162}), 96: (1, {'@': 162}), 97: (1, {'@': 162}), 109: (1, {'@': 162}), 110: (1, {'@': 162}), 111: (1, {'@': 162}), 113: (1, {'@': 162}), 116: (1, {'@': 162}), 95: (1, {'@': 162}), 117: (1, {'@': 162}), 31: (1, {'@': 162}), 98: (1, {'@': 162}), 118: (1, {'@': 162}), 119: (1, {'@': 162}), 112: (1, {'@': 162}), 120: (1, {'@': 162}), 115: (1, {'@': 162})}, 604: {43: (0, 550), 7: (0, 116), 27: (0, 537), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 49: (0, 344), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 605: {3: (1, {'@': 407})}, 606: {114: (0, 229), 35: (1, {'@': 239}), 1: (1, {'@': 239})}, 607: {1: (0, 98), 35: (1, {'@': 234})}, 608: {130: (0, 120), 3: (1, {'@': 110}), 1: (1, {'@': 110})}, 609: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 406})}, 610: {31: (0, 281), 99: (0, 453), 3: (1, {'@': 197})}, 611: {36: (0, 288), 136: (0, 44), 28: (0, 80), 3: (0, 534), 2: (1, {'@': 382}), 1: (1, {'@': 382})}, 612: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 65: (0, 416), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 588), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 613: {4: (0, 577), 99: (1, {'@': 126}), 3: (1, {'@': 126}), 31: (1, {'@': 126}), 0: (1, {'@': 126}), 101: (1, {'@': 126}), 16: (1, {'@': 126}), 42: (1, {'@': 126}), 1: (1, {'@': 126}), 35: (1, {'@': 126}), 2: (1, {'@': 126})}, 614: {31: (0, 281), 99: (0, 453), 35: (1, {'@': 242}), 1: (1, {'@': 242})}, 615: {1: (0, 440), 42: (0, 516)}, 616: {114: (0, 222), 0: (0, 280), 35: (1, {'@': 238}), 1: (1, {'@': 238})}, 617: {28: (0, 265)}, 618: {0: (0, 63), 36: (0, 133), 3: (0, 534), 8: (0, 153), 132: (0, 18)}, 619: {5: (1, {'@': 282}), 37: (1, {'@': 282}), 38: (1, {'@': 282}), 6: (1, {'@': 282}), 39: (1, {'@': 282}), 7: (1, {'@': 282}), 8: (1, {'@': 282}), 9: (1, {'@': 282}), 10: (1, {'@': 282}), 11: (1, {'@': 282}), 12: (1, {'@': 282}), 13: (1, {'@': 282}), 14: (1, {'@': 282}), 15: (1, {'@': 282}), 16: (1, {'@': 282}), 3: (1, {'@': 282}), 17: (1, {'@': 282}), 18: (1, {'@': 282}), 19: (1, {'@': 282}), 20: (1, {'@': 282}), 21: (1, {'@': 282}), 40: (1, {'@': 282}), 22: (1, {'@': 282}), 23: (1, {'@': 282}), 24: (1, {'@': 282}), 25: (1, {'@': 282}), 26: (1, {'@': 282}), 27: (1, {'@': 282}), 28: (1, {'@': 282}), 29: (1, {'@': 282}), 30: (1, {'@': 282}), 2: (1, {'@': 282}), 31: (1, {'@': 282}), 4: (1, {'@': 282}), 41: (1, {'@': 282}), 32: (1, {'@': 282}), 33: (1, {'@': 282}), 34: (1, {'@': 282})}, 620: {35: (0, 143), 107: (1, {'@': 395}), 99: (1, {'@': 395}), 19: (1, {'@': 395}), 108: (1, {'@': 395}), 100: (1, {'@': 395}), 96: (1, {'@': 395}), 97: (1, {'@': 395}), 109: (1, {'@': 395}), 110: (1, {'@': 395}), 111: (1, {'@': 395}), 112: (1, {'@': 395}), 113: (1, {'@': 395}), 116: (1, {'@': 395}), 95: (1, {'@': 395}), 117: (1, {'@': 395}), 31: (1, {'@': 395}), 98: (1, {'@': 395}), 4: (1, {'@': 395}), 118: (1, {'@': 395}), 119: (1, {'@': 395}), 120: (1, {'@': 395}), 115: (1, {'@': 395})}, 621: {35: (1, {'@': 236})}, 622: {4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 64: (0, 155), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 623: {5: (1, {'@': 416}), 37: (1, {'@': 416}), 38: (1, {'@': 416}), 6: (1, {'@': 416}), 39: (1, {'@': 416}), 7: (1, {'@': 416}), 8: (1, {'@': 416}), 9: (1, {'@': 416}), 10: (1, {'@': 416}), 11: (1, {'@': 416}), 12: (1, {'@': 416}), 13: (1, {'@': 416}), 14: (1, {'@': 416}), 15: (1, {'@': 416}), 16: (1, {'@': 416}), 3: (1, {'@': 416}), 17: (1, {'@': 416}), 18: (1, {'@': 416}), 19: (1, {'@': 416}), 20: (1, {'@': 416}), 21: (1, {'@': 416}), 40: (1, {'@': 416}), 22: (1, {'@': 416}), 23: (1, {'@': 416}), 24: (1, {'@': 416}), 25: (1, {'@': 416}), 26: (1, {'@': 416}), 27: (1, {'@': 416}), 28: (1, {'@': 416}), 29: (1, {'@': 416}), 30: (1, {'@': 416}), 2: (1, {'@': 416}), 31: (1, {'@': 416}), 4: (1, {'@': 416}), 41: (1, {'@': 416}), 32: (1, {'@': 416}), 33: (1, {'@': 416}), 34: (1, {'@': 416})}, 624: {3: (0, 300), 40: (1, {'@': 288}), 38: (1, {'@': 288})}, 625: {43: (0, 239), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 42: (0, 233), 81: (0, 339), 32: (0, 462), 83: (0, 613), 0: (0, 236), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 626: {3: (0, 300), 2: (1, {'@': 380}), 1: (1, {'@': 380})}, 627: {35: (0, 129), 99: (1, {'@': 202}), 31: (1, {'@': 202}), 4: (1, {'@': 202})}, 628: {3: (1, {'@': 199})}, 629: {92: (0, 4), 28: (0, 616), 90: (0, 575), 91: (0, 568), 93: (0, 606), 94: (0, 621), 95: (0, 473), 35: (1, {'@': 237})}, 630: {31: (0, 281), 99: (0, 453), 35: (0, 458)}, 631: {35: (1, {'@': 243}), 1: (1, {'@': 243})}, 632: {3: (0, 534), 36: (0, 418), 21: (0, 2)}, 633: {3: (0, 300), 5: (1, {'@': 81}), 37: (1, {'@': 81}), 38: (1, {'@': 81}), 6: (1, {'@': 81}), 39: (1, {'@': 81}), 7: (1, {'@': 81}), 8: (1, {'@': 81}), 9: (1, {'@': 81}), 10: (1, {'@': 81}), 11: (1, {'@': 81}), 12: (1, {'@': 81}), 13: (1, {'@': 81}), 14: (1, {'@': 81}), 15: (1, {'@': 81}), 16: (1, {'@': 81}), 17: (1, {'@': 81}), 18: (1, {'@': 81}), 19: (1, {'@': 81}), 20: (1, {'@': 81}), 21: (1, {'@': 81}), 40: (1, {'@': 81}), 22: (1, {'@': 81}), 23: (1, {'@': 81}), 24: (1, {'@': 81}), 25: (1, {'@': 81}), 26: (1, {'@': 81}), 27: (1, {'@': 81}), 28: (1, {'@': 81}), 29: (1, {'@': 81}), 30: (1, {'@': 81}), 2: (1, {'@': 81}), 31: (1, {'@': 81}), 4: (1, {'@': 81}), 41: (1, {'@': 81}), 32: (1, {'@': 81}), 33: (1, {'@': 81}), 34: (1, {'@': 81})}, 634: {64: (0, 189), 4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 451), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 55: (0, 262), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 61: (0, 151), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 635: {43: (0, 235), 7: (0, 116), 4: (0, 366), 67: (0, 226), 69: (0, 174), 19: (0, 52), 44: (0, 510), 60: (0, 272), 42: (0, 285), 46: (0, 269), 8: (0, 304), 55: (0, 588), 72: (0, 158), 11: (0, 315), 48: (0, 79), 50: (0, 363), 22: (0, 386), 61: (0, 151), 53: (0, 451), 14: (0, 612), 28: (0, 349), 65: (0, 168), 54: (0, 509), 58: (0, 321), 31: (0, 68), 13: (0, 511), 26: (0, 399), 34: (0, 329), 78: (0, 413), 77: (0, 356), 79: (0, 385), 17: (0, 409), 64: (0, 189), 81: (0, 339), 32: (0, 462), 83: (0, 613), 85: (0, 328), 86: (0, 436), 87: (0, 544), 33: (0, 39), 88: (0, 486), 29: (0, 221), 89: (0, 503)}, 636: {31: (0, 281), 0: (0, 260), 99: (0, 453), 42: (0, 224)}, 637: {8: (1, {'@': 388}), 3: (1, {'@': 388}), 1: (1, {'@': 388}), 35: (1, {'@': 388})}, 638: {107: (1, {'@': 175}), 3: (1, {'@': 175}), 99: (1, {'@': 175}), 19: (1, {'@': 175}), 108: (1, {'@': 175}), 100: (1, {'@': 175}), 96: (1, {'@': 175}), 97: (1, {'@': 175}), 109: (1, {'@': 175}), 110: (1, {'@': 175}), 111: (1, {'@': 175}), 113: (1, {'@': 175}), 116: (1, {'@': 175}), 95: (1, {'@': 175}), 117: (1, {'@': 175}), 31: (1, {'@': 175}), 98: (1, {'@': 175}), 118: (1, {'@': 175}), 119: (1, {'@': 175}), 112: (1, {'@': 175}), 120: (1, {'@': 175}), 115: (1, {'@': 175}), 0: (1, {'@': 175}), 42: (1, {'@': 175}), 1: (1, {'@': 175}), 35: (1, {'@': 175}), 101: (1, {'@': 175}), 2: (1, {'@': 175}), 16: (1, {'@': 175})}, 639: {128: (0, 615), 28: (0, 137)}, 640: {38: (0, 524), 36: (0, 536), 40: (0, 447), 105: (0, 184), 3: (0, 534), 103: (0, 146)}, 641: {31: (0, 281), 99: (0, 453), 0: (0, 398)}, 642: {31: (0, 281), 35: (0, 264), 99: (0, 453)}, 643: {114: (0, 222), 0: (0, 280), 35: (1, {'@': 240}), 1: (1, {'@': 240})}, 644: {40: (1, {'@': 414}), 3: (1, {'@': 414}), 38: (1, {'@': 414})}, 645: {4: (0, 574), 67: (0, 226), 7: (0, 116), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 77: (0, 74), 26: (0, 399), 86: (0, 436), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 646: {35: (1, {'@': 245}), 1: (1, {'@': 245})}, 647: {4: (0, 574), 67: (0, 226), 7: (0, 116), 53: (0, 223), 69: (0, 174), 19: (0, 52), 28: (0, 349), 8: (0, 304), 81: (0, 339), 58: (0, 321), 72: (0, 158), 44: (0, 437), 77: (0, 356), 11: (0, 315), 32: (0, 462), 22: (0, 386), 50: (0, 363), 31: (0, 68), 13: (0, 511), 86: (0, 436), 26: (0, 399), 34: (0, 329), 87: (0, 544), 78: (0, 413), 29: (0, 221), 79: (0, 385), 17: (0, 409)}, 648: {2: (0, 442)}, 649: {35: (1, {'@': 267}), 1: (1, {'@': 267})}}, 'start_states': {'start': 395}, 'end_states': {'start': 552}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'SIGNED_INT', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': 'WS_INLINE', 'pattern': {'value': '(?:(?:\\ |\t))+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': 'C_COMMENT', 'pattern': {'value': '/\\*(.|\n)*?\\*/', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'ASSIGN_OP', 'pattern': {'value': '(?://=|\\+\\+=|\\+=|\\-=|\\*=|/=|%=|\\^=)', 'flags': [], '_width': [2, 3], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'FUN_OP', 'pattern': {'value': '(?:\\[::\\]|and|//|in|\\[\\]|or|\\|\\||\\&\\&|<=|>=|==|!=|\\*|\\+|\\-|/|%|\\^|!|>|<)', 'flags': [], '_width': [1, 4], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'VAR_NAME', 'pattern': {'value': '(?!(if|elif|else|break|continue|do|while|for|import|internal|return|raise|as|finally|try|catch|nil|true|false|fun|class|space|in|or|and|not|new)\\b)[a-zA-Z_][a-zA-Z0-9_]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'INTERNAL', 'pattern': {'value': 'internal', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'HEX_INT', 'pattern': {'value': '0x[a-fA-F0-9]+', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': 'STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 10: {'name': 'FLOW_CTRL', 'pattern': {'value': '(?:continue|break)', 'flags': [], '_width': [5, 8], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 11: {'name': 'DOT', 'pattern': {'value': '(?<!\\.)\\.(?!\\.)', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 12: {'name': 'SCOPE', 'pattern': {'value': '::', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 13: {'name': 'NON_LOC', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'INL_COMMENT', 'pattern': {'value': '#[^\n]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': '_END', 'pattern': {'value': '(?:(?:(?:\r)?\n)+|;)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'SIGNED_FLOAT', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+(?<!\\.)\\.(?!\\.)(?:(?:[0-9])+)?|(?<!\\.)\\.(?!\\.)(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_0', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_1', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_2', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_3', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': '__ANON_4', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_5', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_6', 'pattern': {'value': '++', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_7', 'pattern': {'value': '//', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': 'NIL', 'pattern': {'value': 'nil', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': '__ANON_8', 'pattern': {'value': '..', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'FUN', 'pattern': {'value': 'fun', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'NEW', 'pattern': {'value': 'new', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'TRY', 'pattern': {'value': 'try', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'CATCH', 'pattern': {'value': 'catch', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': 'FINALLY', 'pattern': {'value': 'finally', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': 'SPACE', 'pattern': {'value': 'space', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': 'CLASS', 'pattern': {'value': 'class', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'ENUM', 'pattern': {'value': 'enum', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'RAISE', 'pattern': {'value': 'raise', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmt', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_rvalue', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOW_CTRL', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op_assign', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_clstmt', '__type__': 'NonTerminal'}, {'name': '_clstmts', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_clstmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_rvalue', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOW_CTRL', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op_assign', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', 'import'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_space_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', 'import'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_scope', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'import_as', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', '_list_space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', '_list_space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_list_space_scope', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_scope', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', 'space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_scope', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_scope', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'silent_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'class', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'enum', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', 'silent_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'member', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ternary_if', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_lor', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_land', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_and', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_not', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_not', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_lte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_gte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'expr_gt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'expr_lt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'expr_eq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'expr_neq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'in_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cat_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'in_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'in_e', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cat_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_in', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'cat_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'cat_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cat_e', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_cat', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_fdiv', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'expr_idiv', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'expr_mod', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'exp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'neg_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'exp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exp_e', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'neg_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'neg_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'neg_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'const', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xstring', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dict', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_FLOAT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'float', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': 'hex_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NIL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'nil', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'true', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'false', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'range', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'range', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', 'list_assig'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'list_assig'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'dict'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'dict'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assignment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'op_assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'ASSIGN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'op_assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'ASSIGN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'member'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pmember', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'member'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pslice', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', '_pmember'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pmember', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', '_pmember'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pslice', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', 'lambda'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', 'lambda'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FUN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTERNAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'constructor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'constructor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTERNAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg_list', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'var_args_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'scope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'type_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_list_val', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', '_type_list_val'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', '_type_list_val'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_list_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'member', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_v', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_exp', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_v', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_exp', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'arg_list_call_exp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'arg_list_call_exp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'arg_list_call_v'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'arg_list_call_v'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'if', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'while', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'do_while', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'do_while', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'for', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'else', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': 'else', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'else', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'var_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'var_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_list', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', 'space_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', 'space_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmt', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', 'fun_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', '_class_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_clstmt', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', '_class_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_name', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NON_LOC', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_no_glob', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', 'scope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NON_LOC', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dot_name', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', '_dot_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', '_space_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', 'raise'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', 'raise'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': Token('RULE', 'xstring'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'elif', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': 'elif', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': '__try_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'catch', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': '__try_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'catch', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
