# The file was automatically generated by Lark v1.1.3
__version__ = "1.1.3"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Sequence, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:'rich.tree.Tree'=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        while stack:
            node = stack.pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack.append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    type: str
    start_pos: int
    value: Any
    line: int
    column: int
    end_line: int
    end_column: int
    end_pos: int

    def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)
        inst.type = type_
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr=None, last_token=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str):
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens: Dict[FrozenSet[str], BasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text):
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)
        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = md5_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_md5, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_md5 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_md5 is not None
                    f.write(cache_md5.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}], 'ignore': ['WS_INLINE', 'INL_COMMENT', 'C_COMMENT'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'try', 1: 'shc_e', 2: 'LSQB', 3: 'fun_call', 4: 'space', 5: 'TRY', 6: 'ternary_if', 7: 'product', 8: '___stmt_plus_0', 9: 'NEW', 10: 'SIGNED_FLOAT', 11: 'HEX_INT', 12: 'FOR', 13: 'not_e', 14: 'FUN', 15: 'cat_e', 16: 'exp_e', 17: 'RAISE', 18: 'IF', 19: 'scope_name', 20: '_END', 21: 'in_e', 22: 'FLOW_CTRL', 23: 'cmp_e', 24: 'construct', 25: 'scope_list', 26: 'atom', 27: '_scope_no_glob', 28: 'LPAR', 29: 'do_while', 30: 'TILDE', 31: 'VAR_NAME', 32: 'expr', 33: 'member', 34: 'CLASS', 35: 'DO', 36: 'RETURN', 37: 'MINUS', 38: 'NON_LOC', 39: '_pslice', 40: 'list', 41: 'TRUE', 42: 'if', 43: 'SIGNED_INT', 44: 'raise', 45: 'return', 46: 'ENUM', 47: 'add_e', 48: 'op_assign', 49: '_clstmt', 50: 'ANNOT_SYMB', 51: 'for', 52: '_definition', 53: '_pscope_name', 54: 'WHILE', 55: 'NOT', 56: '_clstmts', 57: '_rvalue', 58: 'IMPORT', 59: 'function', 60: 'log_e', 61: 'SPACE', 62: '_dot_name', 63: '_space_name', 64: 'INNER', 65: 'constructor', 66: '_pmember', 67: 'enum', 68: 'dict', 69: 'FALSE', 70: 'const', 71: 'lambda', 72: 'xstring', 73: 'annotation', 74: 'import', 75: 'neg_e', 76: 'LBRACE', 77: 'NIL', 78: 'while', 79: 'silent_expr', 80: 'STRING', 81: 'assignment', 82: 'class', 83: 'SCOPE', 84: 'RBRACE', 85: 'space_scope', 86: '_pspace_scope', 87: 'COMMA', 88: 'RPAR', 89: 'QMARK', 90: '__ANON_3', 91: 'SLASH', 92: '__ANON_5', 93: 'PERCENT', 94: 'LESSTHAN', 95: '__ANON_8', 96: '__ANON_1', 97: '__ANON_7', 98: 'PLUS', 99: 'COLON', 100: 'STAR', 101: 'OR', 102: 'MORETHAN', 103: 'AND', 104: 'RSQB', 105: 'IN', 106: 'CIRCUMFLEX', 107: '__ANON_4', 108: '__ANON_2', 109: '__ANON_6', 110: '__ANON_0', 111: 'EQUAL', 112: 'CATCH', 113: '$END', 114: 'ELIF', 115: 'FINALLY', 116: 'ELSE', 117: 'elif', 118: 'else', 119: '_stmt', 120: '_stmts', 121: 'code_block', 122: '__try_plus_2', 123: 'catch', 124: '_arg_list_ndef', 125: 'typed_var', 126: 'var_args_list', 127: 'arg_list', 128: 'fun_args', 129: 'fun_code_block', 130: '___ifel_plus_1', 131: '_ifel', 132: 'AS', 133: '_enum_name_list', 134: '_pspace_name', 135: '_space_no_glob', 136: 'MULT_STRING', 137: 'ES_STR', 138: 'DOT', 139: 'ASSIGN_OP', 140: 'annot_list', 141: '_list_vals', 142: '_class_code_block', 143: 'INTERNAL', 144: 'list_assig', 145: 'finally', 146: 'type_list', 147: '_dict_val_list', 148: '_list_space_scope', 149: 'space_list', 150: 'arg_list_call_exp', 151: 'arg_list_call_v', 152: 'fun_call_args', 153: '_type_list_val', 154: 'FUN_OP', 155: 'var_list', 156: 'start'}, 'states': {0: {0: (0, 302), 1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 5: (0, 631), 6: (0, 496), 7: (0, 507), 8: (0, 275), 9: (0, 407), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 22: (0, 405), 23: (0, 540), 24: (0, 295), 25: (0, 538), 26: (0, 570), 27: (0, 569), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 44: (0, 372), 45: (0, 287), 46: (0, 324), 47: (0, 264), 48: (0, 385), 49: (0, 379), 50: (0, 353), 51: (0, 355), 52: (0, 482), 53: (0, 366), 54: (0, 382), 55: (0, 388), 56: (0, 470), 57: (0, 312), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 65: (0, 461), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 70: (0, 159), 71: (0, 230), 72: (0, 283), 73: (0, 409), 74: (0, 402), 75: (0, 280), 76: (0, 300), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 81: (0, 443), 82: (0, 423), 83: (0, 625), 84: (1, {'@': 96})}, 1: {85: (0, 10), 28: (0, 246), 86: (0, 60), 31: (0, 486)}, 2: {87: (0, 307), 88: (1, {'@': 247})}, 3: {2: (0, 214), 89: (0, 555), 88: (0, 116)}, 4: {90: (1, {'@': 174}), 91: (1, {'@': 174}), 88: (1, {'@': 174}), 20: (1, {'@': 174}), 92: (1, {'@': 174}), 93: (1, {'@': 174}), 94: (1, {'@': 174}), 95: (1, {'@': 174}), 96: (1, {'@': 174}), 97: (1, {'@': 174}), 98: (1, {'@': 174}), 87: (1, {'@': 174}), 99: (1, {'@': 174}), 100: (1, {'@': 174}), 101: (1, {'@': 174}), 102: (1, {'@': 174}), 37: (1, {'@': 174}), 103: (1, {'@': 174}), 89: (1, {'@': 174}), 104: (1, {'@': 174}), 105: (1, {'@': 174}), 106: (1, {'@': 174}), 107: (1, {'@': 174}), 84: (1, {'@': 174}), 108: (1, {'@': 174}), 18: (1, {'@': 174}), 2: (1, {'@': 174}), 109: (1, {'@': 174}), 110: (1, {'@': 174})}, 5: {111: (1, {'@': 218}), 87: (1, {'@': 218})}, 6: {31: (0, 24)}, 7: {8: (0, 57), 20: (0, 554), 84: (0, 564)}, 8: {111: (1, {'@': 268}), 88: (1, {'@': 268}), 87: (1, {'@': 268})}, 9: {2: (0, 214), 89: (0, 555), 104: (0, 25)}, 10: {20: (1, {'@': 117}), 87: (1, {'@': 117})}, 11: {20: (0, 677), 41: (1, {'@': 78}), 34: (1, {'@': 78}), 46: (1, {'@': 78}), 58: (1, {'@': 78}), 11: (1, {'@': 78}), 36: (1, {'@': 78}), 31: (1, {'@': 78}), 77: (1, {'@': 78}), 37: (1, {'@': 78}), 84: (1, {'@': 78}), 12: (1, {'@': 78}), 64: (1, {'@': 78}), 28: (1, {'@': 78}), 35: (1, {'@': 78}), 83: (1, {'@': 78}), 17: (1, {'@': 78}), 38: (1, {'@': 78}), 76: (1, {'@': 78}), 43: (1, {'@': 78}), 61: (1, {'@': 78}), 22: (1, {'@': 78}), 30: (1, {'@': 78}), 55: (1, {'@': 78}), 14: (1, {'@': 78}), 10: (1, {'@': 78}), 54: (1, {'@': 78}), 69: (1, {'@': 78}), 5: (1, {'@': 78}), 18: (1, {'@': 78}), 80: (1, {'@': 78}), 2: (1, {'@': 78}), 50: (1, {'@': 78}), 112: (1, {'@': 78}), 113: (1, {'@': 78}), 114: (1, {'@': 78}), 9: (1, {'@': 78}), 115: (1, {'@': 78}), 116: (1, {'@': 78})}, 12: {99: (0, 42), 104: (0, 351), 2: (0, 214), 89: (0, 555)}, 13: {88: (1, {'@': 264}), 87: (1, {'@': 264})}, 14: {41: (1, {'@': 402}), 46: (1, {'@': 402}), 11: (1, {'@': 402}), 31: (1, {'@': 402}), 77: (1, {'@': 402}), 84: (1, {'@': 402}), 83: (1, {'@': 402}), 112: (1, {'@': 402}), 61: (1, {'@': 402}), 113: (1, {'@': 402}), 55: (1, {'@': 402}), 14: (1, {'@': 402}), 69: (1, {'@': 402}), 5: (1, {'@': 402}), 80: (1, {'@': 402}), 2: (1, {'@': 402}), 34: (1, {'@': 402}), 58: (1, {'@': 402}), 36: (1, {'@': 402}), 114: (1, {'@': 402}), 37: (1, {'@': 402}), 12: (1, {'@': 402}), 64: (1, {'@': 402}), 28: (1, {'@': 402}), 35: (1, {'@': 402}), 9: (1, {'@': 402}), 17: (1, {'@': 402}), 38: (1, {'@': 402}), 20: (1, {'@': 402}), 115: (1, {'@': 402}), 76: (1, {'@': 402}), 43: (1, {'@': 402}), 22: (1, {'@': 402}), 30: (1, {'@': 402}), 54: (1, {'@': 402}), 10: (1, {'@': 402}), 18: (1, {'@': 402}), 116: (1, {'@': 402}), 50: (1, {'@': 402})}, 15: {2: (0, 214), 89: (0, 555), 84: (1, {'@': 205}), 87: (1, {'@': 205})}, 16: {88: (1, {'@': 270}), 87: (1, {'@': 270}), 111: (1, {'@': 270})}, 17: {41: (1, {'@': 292}), 34: (1, {'@': 292}), 46: (1, {'@': 292}), 58: (1, {'@': 292}), 11: (1, {'@': 292}), 36: (1, {'@': 292}), 31: (1, {'@': 292}), 77: (1, {'@': 292}), 37: (1, {'@': 292}), 84: (1, {'@': 292}), 12: (1, {'@': 292}), 64: (1, {'@': 292}), 28: (1, {'@': 292}), 9: (1, {'@': 292}), 35: (1, {'@': 292}), 83: (1, {'@': 292}), 17: (1, {'@': 292}), 38: (1, {'@': 292}), 20: (1, {'@': 292}), 76: (1, {'@': 292}), 43: (1, {'@': 292}), 61: (1, {'@': 292}), 22: (1, {'@': 292}), 30: (1, {'@': 292}), 55: (1, {'@': 292}), 14: (1, {'@': 292}), 10: (1, {'@': 292}), 54: (1, {'@': 292}), 69: (1, {'@': 292}), 5: (1, {'@': 292}), 18: (1, {'@': 292}), 80: (1, {'@': 292}), 2: (1, {'@': 292}), 50: (1, {'@': 292}), 112: (1, {'@': 292}), 113: (1, {'@': 292}), 114: (1, {'@': 292}), 115: (1, {'@': 292}), 116: (1, {'@': 292})}, 18: {20: (1, {'@': 424})}, 19: {117: (0, 180), 116: (0, 35), 114: (0, 414), 8: (0, 122), 20: (0, 554), 118: (0, 80)}, 20: {88: (1, {'@': 284}), 87: (1, {'@': 284})}, 21: {88: (0, 471)}, 22: {1: (0, 588), 2: (0, 601), 8: (0, 151), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 119: (0, 299), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 76: (0, 300), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 120: (0, 472), 83: (0, 625), 84: (1, {'@': 77})}, 23: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 32: (0, 157), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 71: (0, 476), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 24: {20: (1, {'@': 115})}, 25: {90: (1, {'@': 185}), 91: (1, {'@': 185}), 20: (1, {'@': 185}), 92: (1, {'@': 185}), 93: (1, {'@': 185}), 94: (1, {'@': 185}), 96: (1, {'@': 185}), 97: (1, {'@': 185}), 98: (1, {'@': 185}), 100: (1, {'@': 185}), 101: (1, {'@': 185}), 102: (1, {'@': 185}), 37: (1, {'@': 185}), 103: (1, {'@': 185}), 89: (1, {'@': 185}), 105: (1, {'@': 185}), 106: (1, {'@': 185}), 107: (1, {'@': 185}), 108: (1, {'@': 185}), 2: (1, {'@': 185}), 109: (1, {'@': 185}), 110: (1, {'@': 185}), 88: (1, {'@': 185}), 95: (1, {'@': 185}), 87: (1, {'@': 185}), 99: (1, {'@': 185}), 104: (1, {'@': 185}), 84: (1, {'@': 185}), 18: (1, {'@': 185})}, 26: {27: (0, 241), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 213), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 418), 68: (0, 131), 39: (0, 74), 69: (0, 135), 70: (0, 159), 53: (0, 123), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 27: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 423})}, 28: {2: (1, {'@': 227}), 20: (1, {'@': 227}), 89: (1, {'@': 227}), 28: (1, {'@': 227}), 104: (1, {'@': 227}), 88: (1, {'@': 227}), 95: (1, {'@': 227}), 84: (1, {'@': 227}), 18: (1, {'@': 227}), 87: (1, {'@': 227}), 99: (1, {'@': 227})}, 29: {84: (1, {'@': 206}), 87: (1, {'@': 206})}, 30: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 249), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 31: {84: (1, {'@': 208}), 87: (1, {'@': 208})}, 32: {2: (1, {'@': 233}), 20: (1, {'@': 233}), 89: (1, {'@': 233}), 28: (1, {'@': 233}), 104: (1, {'@': 233}), 88: (1, {'@': 233}), 95: (1, {'@': 233}), 84: (1, {'@': 233}), 18: (1, {'@': 233}), 87: (1, {'@': 233}), 99: (1, {'@': 233})}, 33: {2: (0, 214), 89: (0, 555), 88: (1, {'@': 283}), 87: (1, {'@': 283})}, 34: {41: (1, {'@': 339}), 34: (1, {'@': 339}), 46: (1, {'@': 339}), 58: (1, {'@': 339}), 11: (1, {'@': 339}), 36: (1, {'@': 339}), 31: (1, {'@': 339}), 77: (1, {'@': 339}), 37: (1, {'@': 339}), 84: (1, {'@': 339}), 12: (1, {'@': 339}), 64: (1, {'@': 339}), 28: (1, {'@': 339}), 9: (1, {'@': 339}), 35: (1, {'@': 339}), 83: (1, {'@': 339}), 17: (1, {'@': 339}), 38: (1, {'@': 339}), 20: (1, {'@': 339}), 76: (1, {'@': 339}), 43: (1, {'@': 339}), 61: (1, {'@': 339}), 22: (1, {'@': 339}), 30: (1, {'@': 339}), 55: (1, {'@': 339}), 14: (1, {'@': 339}), 10: (1, {'@': 339}), 54: (1, {'@': 339}), 69: (1, {'@': 339}), 5: (1, {'@': 339}), 18: (1, {'@': 339}), 80: (1, {'@': 339}), 2: (1, {'@': 339}), 50: (1, {'@': 339}), 112: (1, {'@': 339}), 113: (1, {'@': 339}), 114: (1, {'@': 339}), 115: (1, {'@': 339}), 116: (1, {'@': 339})}, 35: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 218), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 121: (0, 240), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 120: (0, 262), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 36: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 120: (0, 337), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 121: (0, 386), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 37: {122: (0, 627), 112: (0, 617), 8: (0, 678), 20: (0, 554), 123: (0, 548)}, 38: {111: (1, {'@': 269}), 88: (1, {'@': 269}), 87: (1, {'@': 269})}, 39: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 32: (0, 150), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 40: {41: (1, {'@': 246}), 34: (1, {'@': 246}), 46: (1, {'@': 246}), 58: (1, {'@': 246}), 11: (1, {'@': 246}), 36: (1, {'@': 246}), 31: (1, {'@': 246}), 77: (1, {'@': 246}), 37: (1, {'@': 246}), 84: (1, {'@': 246}), 12: (1, {'@': 246}), 64: (1, {'@': 246}), 28: (1, {'@': 246}), 9: (1, {'@': 246}), 35: (1, {'@': 246}), 83: (1, {'@': 246}), 17: (1, {'@': 246}), 38: (1, {'@': 246}), 20: (1, {'@': 246}), 76: (1, {'@': 246}), 43: (1, {'@': 246}), 61: (1, {'@': 246}), 22: (1, {'@': 246}), 30: (1, {'@': 246}), 55: (1, {'@': 246}), 14: (1, {'@': 246}), 10: (1, {'@': 246}), 54: (1, {'@': 246}), 69: (1, {'@': 246}), 5: (1, {'@': 246}), 18: (1, {'@': 246}), 80: (1, {'@': 246}), 2: (1, {'@': 246}), 50: (1, {'@': 246})}, 41: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 32: (0, 168), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 104: (0, 293), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 42: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 447), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 104: (0, 32), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 43: {20: (1, {'@': 432}), 114: (1, {'@': 432}), 116: (1, {'@': 432})}, 44: {2: (1, {'@': 224}), 20: (1, {'@': 224}), 89: (1, {'@': 224}), 28: (1, {'@': 224}), 104: (1, {'@': 224}), 88: (1, {'@': 224}), 95: (1, {'@': 224}), 84: (1, {'@': 224}), 18: (1, {'@': 224}), 87: (1, {'@': 224}), 99: (1, {'@': 224})}, 45: {124: (0, 2), 31: (0, 306), 125: (0, 139), 126: (0, 189), 127: (0, 89), 128: (0, 181), 100: (0, 469), 88: (1, {'@': 254})}, 46: {31: (0, 53)}, 47: {41: (1, {'@': 314}), 34: (1, {'@': 314}), 46: (1, {'@': 314}), 58: (1, {'@': 314}), 11: (1, {'@': 314}), 36: (1, {'@': 314}), 31: (1, {'@': 314}), 77: (1, {'@': 314}), 37: (1, {'@': 314}), 84: (1, {'@': 314}), 12: (1, {'@': 314}), 64: (1, {'@': 314}), 28: (1, {'@': 314}), 9: (1, {'@': 314}), 35: (1, {'@': 314}), 83: (1, {'@': 314}), 17: (1, {'@': 314}), 38: (1, {'@': 314}), 20: (1, {'@': 314}), 76: (1, {'@': 314}), 43: (1, {'@': 314}), 61: (1, {'@': 314}), 22: (1, {'@': 314}), 30: (1, {'@': 314}), 55: (1, {'@': 314}), 14: (1, {'@': 314}), 10: (1, {'@': 314}), 54: (1, {'@': 314}), 69: (1, {'@': 314}), 5: (1, {'@': 314}), 18: (1, {'@': 314}), 80: (1, {'@': 314}), 2: (1, {'@': 314}), 50: (1, {'@': 314}), 112: (1, {'@': 314}), 113: (1, {'@': 314}), 114: (1, {'@': 314}), 115: (1, {'@': 314}), 116: (1, {'@': 314})}, 48: {2: (0, 214), 89: (0, 555), 84: (1, {'@': 203}), 87: (1, {'@': 203})}, 49: {76: (0, 22), 129: (0, 294), 121: (0, 14)}, 50: {87: (0, 237), 104: (0, 16)}, 51: {130: (0, 19), 116: (0, 35), 118: (0, 285), 114: (0, 414), 131: (0, 59), 20: (0, 677), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 52: {20: (0, 677), 41: (1, {'@': 359}), 46: (1, {'@': 359}), 11: (1, {'@': 359}), 31: (1, {'@': 359}), 77: (1, {'@': 359}), 84: (1, {'@': 359}), 83: (1, {'@': 359}), 112: (1, {'@': 359}), 61: (1, {'@': 359}), 113: (1, {'@': 359}), 55: (1, {'@': 359}), 14: (1, {'@': 359}), 69: (1, {'@': 359}), 5: (1, {'@': 359}), 80: (1, {'@': 359}), 2: (1, {'@': 359}), 34: (1, {'@': 359}), 58: (1, {'@': 359}), 36: (1, {'@': 359}), 114: (1, {'@': 359}), 37: (1, {'@': 359}), 12: (1, {'@': 359}), 64: (1, {'@': 359}), 28: (1, {'@': 359}), 35: (1, {'@': 359}), 9: (1, {'@': 359}), 17: (1, {'@': 359}), 38: (1, {'@': 359}), 115: (1, {'@': 359}), 76: (1, {'@': 359}), 43: (1, {'@': 359}), 22: (1, {'@': 359}), 30: (1, {'@': 359}), 54: (1, {'@': 359}), 10: (1, {'@': 359}), 18: (1, {'@': 359}), 116: (1, {'@': 359}), 50: (1, {'@': 359})}, 53: {83: (1, {'@': 410}), 88: (1, {'@': 410}), 76: (1, {'@': 410}), 20: (1, {'@': 410}), 87: (1, {'@': 410})}, 54: {130: (0, 19), 8: (0, 99), 116: (0, 35), 118: (0, 285), 114: (0, 414), 131: (0, 224), 20: (0, 554), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 55: {2: (0, 214), 89: (0, 555), 88: (1, {'@': 265}), 87: (1, {'@': 265})}, 56: {2: (1, {'@': 219}), 20: (1, {'@': 219}), 89: (1, {'@': 219}), 28: (1, {'@': 219}), 104: (1, {'@': 219}), 88: (1, {'@': 219}), 95: (1, {'@': 219}), 84: (1, {'@': 219}), 18: (1, {'@': 219}), 87: (1, {'@': 219}), 99: (1, {'@': 219})}, 57: {84: (0, 474), 20: (0, 677)}, 58: {32: (0, 578), 1: (0, 588), 27: (0, 569), 2: (0, 601), 47: (0, 264), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 75: (0, 280), 43: (0, 289), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 59: {41: (1, {'@': 295}), 34: (1, {'@': 295}), 46: (1, {'@': 295}), 58: (1, {'@': 295}), 11: (1, {'@': 295}), 36: (1, {'@': 295}), 31: (1, {'@': 295}), 77: (1, {'@': 295}), 37: (1, {'@': 295}), 84: (1, {'@': 295}), 12: (1, {'@': 295}), 64: (1, {'@': 295}), 28: (1, {'@': 295}), 9: (1, {'@': 295}), 35: (1, {'@': 295}), 83: (1, {'@': 295}), 17: (1, {'@': 295}), 38: (1, {'@': 295}), 20: (1, {'@': 295}), 76: (1, {'@': 295}), 43: (1, {'@': 295}), 61: (1, {'@': 295}), 22: (1, {'@': 295}), 30: (1, {'@': 295}), 55: (1, {'@': 295}), 14: (1, {'@': 295}), 10: (1, {'@': 295}), 54: (1, {'@': 295}), 69: (1, {'@': 295}), 5: (1, {'@': 295}), 18: (1, {'@': 295}), 80: (1, {'@': 295}), 2: (1, {'@': 295}), 50: (1, {'@': 295}), 112: (1, {'@': 295}), 113: (1, {'@': 295}), 114: (1, {'@': 295}), 115: (1, {'@': 295}), 116: (1, {'@': 295})}, 60: {83: (0, 255), 20: (1, {'@': 118}), 87: (1, {'@': 118}), 132: (1, {'@': 118})}, 61: {83: (0, 46), 76: (1, {'@': 408}), 20: (1, {'@': 408}), 87: (1, {'@': 408})}, 62: {41: (1, {'@': 391}), 34: (1, {'@': 391}), 46: (1, {'@': 391}), 58: (1, {'@': 391}), 11: (1, {'@': 391}), 36: (1, {'@': 391}), 31: (1, {'@': 391}), 77: (1, {'@': 391}), 37: (1, {'@': 391}), 84: (1, {'@': 391}), 12: (1, {'@': 391}), 64: (1, {'@': 391}), 28: (1, {'@': 391}), 9: (1, {'@': 391}), 35: (1, {'@': 391}), 83: (1, {'@': 391}), 17: (1, {'@': 391}), 38: (1, {'@': 391}), 20: (1, {'@': 391}), 76: (1, {'@': 391}), 43: (1, {'@': 391}), 61: (1, {'@': 391}), 22: (1, {'@': 391}), 30: (1, {'@': 391}), 55: (1, {'@': 391}), 14: (1, {'@': 391}), 10: (1, {'@': 391}), 54: (1, {'@': 391}), 69: (1, {'@': 391}), 5: (1, {'@': 391}), 18: (1, {'@': 391}), 80: (1, {'@': 391}), 2: (1, {'@': 391}), 50: (1, {'@': 391}), 114: (1, {'@': 391}), 115: (1, {'@': 391}), 112: (1, {'@': 391}), 113: (1, {'@': 391}), 116: (1, {'@': 391})}, 63: {41: (1, {'@': 313}), 34: (1, {'@': 313}), 46: (1, {'@': 313}), 58: (1, {'@': 313}), 11: (1, {'@': 313}), 36: (1, {'@': 313}), 31: (1, {'@': 313}), 77: (1, {'@': 313}), 37: (1, {'@': 313}), 84: (1, {'@': 313}), 12: (1, {'@': 313}), 64: (1, {'@': 313}), 28: (1, {'@': 313}), 9: (1, {'@': 313}), 35: (1, {'@': 313}), 83: (1, {'@': 313}), 17: (1, {'@': 313}), 38: (1, {'@': 313}), 20: (1, {'@': 313}), 76: (1, {'@': 313}), 43: (1, {'@': 313}), 61: (1, {'@': 313}), 22: (1, {'@': 313}), 30: (1, {'@': 313}), 55: (1, {'@': 313}), 14: (1, {'@': 313}), 10: (1, {'@': 313}), 54: (1, {'@': 313}), 69: (1, {'@': 313}), 5: (1, {'@': 313}), 18: (1, {'@': 313}), 80: (1, {'@': 313}), 2: (1, {'@': 313}), 50: (1, {'@': 313}), 112: (1, {'@': 313}), 113: (1, {'@': 313}), 114: (1, {'@': 313}), 115: (1, {'@': 313}), 116: (1, {'@': 313})}, 64: {28: (0, 587)}, 65: {31: (0, 278), 133: (0, 395), 20: (0, 677), 84: (1, {'@': 399})}, 66: {41: (1, {'@': 381}), 34: (1, {'@': 381}), 46: (1, {'@': 381}), 58: (1, {'@': 381}), 11: (1, {'@': 381}), 36: (1, {'@': 381}), 31: (1, {'@': 381}), 77: (1, {'@': 381}), 37: (1, {'@': 381}), 84: (1, {'@': 381}), 12: (1, {'@': 381}), 64: (1, {'@': 381}), 28: (1, {'@': 381}), 9: (1, {'@': 381}), 35: (1, {'@': 381}), 83: (1, {'@': 381}), 17: (1, {'@': 381}), 38: (1, {'@': 381}), 20: (1, {'@': 381}), 76: (1, {'@': 381}), 43: (1, {'@': 381}), 61: (1, {'@': 381}), 22: (1, {'@': 381}), 30: (1, {'@': 381}), 55: (1, {'@': 381}), 14: (1, {'@': 381}), 10: (1, {'@': 381}), 54: (1, {'@': 381}), 69: (1, {'@': 381}), 5: (1, {'@': 381}), 18: (1, {'@': 381}), 80: (1, {'@': 381}), 2: (1, {'@': 381}), 50: (1, {'@': 381}), 114: (1, {'@': 381}), 115: (1, {'@': 381}), 112: (1, {'@': 381}), 113: (1, {'@': 381}), 116: (1, {'@': 381})}, 67: {87: (0, 616), 88: (1, {'@': 279})}, 68: {20: (0, 677), 41: (1, {'@': 108}), 34: (1, {'@': 108}), 46: (1, {'@': 108}), 58: (1, {'@': 108}), 11: (1, {'@': 108}), 36: (1, {'@': 108}), 31: (1, {'@': 108}), 77: (1, {'@': 108}), 37: (1, {'@': 108}), 84: (1, {'@': 108}), 12: (1, {'@': 108}), 64: (1, {'@': 108}), 28: (1, {'@': 108}), 9: (1, {'@': 108}), 35: (1, {'@': 108}), 83: (1, {'@': 108}), 17: (1, {'@': 108}), 38: (1, {'@': 108}), 76: (1, {'@': 108}), 43: (1, {'@': 108}), 61: (1, {'@': 108}), 22: (1, {'@': 108}), 30: (1, {'@': 108}), 55: (1, {'@': 108}), 14: (1, {'@': 108}), 10: (1, {'@': 108}), 54: (1, {'@': 108}), 69: (1, {'@': 108}), 5: (1, {'@': 108}), 18: (1, {'@': 108}), 80: (1, {'@': 108}), 2: (1, {'@': 108}), 50: (1, {'@': 108})}, 69: {90: (1, {'@': 191}), 91: (1, {'@': 191}), 20: (1, {'@': 191}), 92: (1, {'@': 191}), 93: (1, {'@': 191}), 94: (1, {'@': 191}), 96: (1, {'@': 191}), 97: (1, {'@': 191}), 98: (1, {'@': 191}), 100: (1, {'@': 191}), 101: (1, {'@': 191}), 102: (1, {'@': 191}), 37: (1, {'@': 191}), 103: (1, {'@': 191}), 89: (1, {'@': 191}), 105: (1, {'@': 191}), 106: (1, {'@': 191}), 107: (1, {'@': 191}), 108: (1, {'@': 191}), 2: (1, {'@': 191}), 109: (1, {'@': 191}), 110: (1, {'@': 191}), 88: (1, {'@': 191}), 95: (1, {'@': 191}), 87: (1, {'@': 191}), 99: (1, {'@': 191}), 104: (1, {'@': 191}), 84: (1, {'@': 191}), 18: (1, {'@': 191})}, 70: {41: (1, {'@': 400}), 46: (1, {'@': 400}), 11: (1, {'@': 400}), 31: (1, {'@': 400}), 77: (1, {'@': 400}), 84: (1, {'@': 400}), 83: (1, {'@': 400}), 112: (1, {'@': 400}), 61: (1, {'@': 400}), 113: (1, {'@': 400}), 55: (1, {'@': 400}), 14: (1, {'@': 400}), 69: (1, {'@': 400}), 5: (1, {'@': 400}), 80: (1, {'@': 400}), 2: (1, {'@': 400}), 34: (1, {'@': 400}), 58: (1, {'@': 400}), 36: (1, {'@': 400}), 114: (1, {'@': 400}), 37: (1, {'@': 400}), 12: (1, {'@': 400}), 64: (1, {'@': 400}), 28: (1, {'@': 400}), 35: (1, {'@': 400}), 9: (1, {'@': 400}), 17: (1, {'@': 400}), 38: (1, {'@': 400}), 20: (1, {'@': 400}), 115: (1, {'@': 400}), 76: (1, {'@': 400}), 43: (1, {'@': 400}), 22: (1, {'@': 400}), 30: (1, {'@': 400}), 54: (1, {'@': 400}), 10: (1, {'@': 400}), 18: (1, {'@': 400}), 116: (1, {'@': 400}), 50: (1, {'@': 400})}, 71: {130: (0, 19), 116: (0, 35), 118: (0, 285), 114: (0, 414), 8: (0, 220), 20: (0, 554), 131: (0, 17), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 72: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 121: (0, 54), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 120: (0, 71), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 73: {88: (1, {'@': 252})}, 74: {88: (0, 357), 2: (1, {'@': 220}), 89: (1, {'@': 220}), 28: (1, {'@': 220})}, 75: {88: (0, 118)}, 76: {20: (0, 677), 41: (1, {'@': 369}), 46: (1, {'@': 369}), 11: (1, {'@': 369}), 31: (1, {'@': 369}), 77: (1, {'@': 369}), 84: (1, {'@': 369}), 83: (1, {'@': 369}), 112: (1, {'@': 369}), 61: (1, {'@': 369}), 113: (1, {'@': 369}), 55: (1, {'@': 369}), 14: (1, {'@': 369}), 69: (1, {'@': 369}), 5: (1, {'@': 369}), 80: (1, {'@': 369}), 2: (1, {'@': 369}), 34: (1, {'@': 369}), 58: (1, {'@': 369}), 36: (1, {'@': 369}), 114: (1, {'@': 369}), 37: (1, {'@': 369}), 12: (1, {'@': 369}), 64: (1, {'@': 369}), 28: (1, {'@': 369}), 35: (1, {'@': 369}), 9: (1, {'@': 369}), 17: (1, {'@': 369}), 38: (1, {'@': 369}), 115: (1, {'@': 369}), 76: (1, {'@': 369}), 43: (1, {'@': 369}), 22: (1, {'@': 369}), 30: (1, {'@': 369}), 54: (1, {'@': 369}), 10: (1, {'@': 369}), 18: (1, {'@': 369}), 116: (1, {'@': 369}), 50: (1, {'@': 369})}, 77: {20: (1, {'@': 213})}, 78: {134: (0, 124), 83: (0, 202), 135: (0, 422), 28: (0, 78), 38: (0, 112), 31: (0, 221)}, 79: {20: (1, {'@': 241}), 88: (1, {'@': 241}), 95: (1, {'@': 241}), 87: (1, {'@': 241}), 99: (1, {'@': 241}), 104: (1, {'@': 241}), 89: (1, {'@': 241}), 84: (1, {'@': 241}), 18: (1, {'@': 241}), 2: (1, {'@': 241})}, 80: {41: (1, {'@': 298}), 46: (1, {'@': 298}), 11: (1, {'@': 298}), 31: (1, {'@': 298}), 77: (1, {'@': 298}), 84: (1, {'@': 298}), 83: (1, {'@': 298}), 112: (1, {'@': 298}), 61: (1, {'@': 298}), 113: (1, {'@': 298}), 55: (1, {'@': 298}), 14: (1, {'@': 298}), 69: (1, {'@': 298}), 5: (1, {'@': 298}), 80: (1, {'@': 298}), 2: (1, {'@': 298}), 34: (1, {'@': 298}), 58: (1, {'@': 298}), 36: (1, {'@': 298}), 114: (1, {'@': 298}), 37: (1, {'@': 298}), 12: (1, {'@': 298}), 64: (1, {'@': 298}), 28: (1, {'@': 298}), 35: (1, {'@': 298}), 9: (1, {'@': 298}), 17: (1, {'@': 298}), 38: (1, {'@': 298}), 20: (1, {'@': 298}), 115: (1, {'@': 298}), 76: (1, {'@': 298}), 43: (1, {'@': 298}), 22: (1, {'@': 298}), 30: (1, {'@': 298}), 54: (1, {'@': 298}), 10: (1, {'@': 298}), 18: (1, {'@': 298}), 116: (1, {'@': 298}), 50: (1, {'@': 298})}, 81: {41: (1, {'@': 128}), 34: (1, {'@': 128}), 46: (1, {'@': 128}), 58: (1, {'@': 128}), 11: (1, {'@': 128}), 36: (1, {'@': 128}), 31: (1, {'@': 128}), 77: (1, {'@': 128}), 37: (1, {'@': 128}), 84: (1, {'@': 128}), 12: (1, {'@': 128}), 64: (1, {'@': 128}), 28: (1, {'@': 128}), 9: (1, {'@': 128}), 35: (1, {'@': 128}), 83: (1, {'@': 128}), 17: (1, {'@': 128}), 38: (1, {'@': 128}), 20: (1, {'@': 128}), 76: (1, {'@': 128}), 43: (1, {'@': 128}), 61: (1, {'@': 128}), 22: (1, {'@': 128}), 30: (1, {'@': 128}), 55: (1, {'@': 128}), 14: (1, {'@': 128}), 10: (1, {'@': 128}), 54: (1, {'@': 128}), 69: (1, {'@': 128}), 5: (1, {'@': 128}), 18: (1, {'@': 128}), 80: (1, {'@': 128}), 2: (1, {'@': 128}), 50: (1, {'@': 128}), 114: (1, {'@': 128}), 115: (1, {'@': 128}), 112: (1, {'@': 128}), 113: (1, {'@': 128}), 116: (1, {'@': 128})}, 82: {104: (0, 114), 87: (0, 622)}, 83: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 288), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 84: {28: (0, 607), 2: (1, {'@': 136}), 20: (1, {'@': 136}), 89: (1, {'@': 136}), 88: (1, {'@': 136}), 95: (1, {'@': 136}), 87: (1, {'@': 136}), 99: (1, {'@': 136}), 104: (1, {'@': 136}), 84: (1, {'@': 136}), 18: (1, {'@': 136})}, 85: {20: (0, 677), 41: (1, {'@': 99}), 34: (1, {'@': 99}), 46: (1, {'@': 99}), 58: (1, {'@': 99}), 11: (1, {'@': 99}), 36: (1, {'@': 99}), 31: (1, {'@': 99}), 77: (1, {'@': 99}), 37: (1, {'@': 99}), 84: (1, {'@': 99}), 12: (1, {'@': 99}), 64: (1, {'@': 99}), 28: (1, {'@': 99}), 9: (1, {'@': 99}), 35: (1, {'@': 99}), 83: (1, {'@': 99}), 17: (1, {'@': 99}), 38: (1, {'@': 99}), 76: (1, {'@': 99}), 43: (1, {'@': 99}), 61: (1, {'@': 99}), 22: (1, {'@': 99}), 30: (1, {'@': 99}), 55: (1, {'@': 99}), 14: (1, {'@': 99}), 10: (1, {'@': 99}), 54: (1, {'@': 99}), 69: (1, {'@': 99}), 5: (1, {'@': 99}), 18: (1, {'@': 99}), 80: (1, {'@': 99}), 2: (1, {'@': 99}), 50: (1, {'@': 99})}, 86: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 411), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 87: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 32: (0, 12), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 104: (0, 28), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 99: (0, 41), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 88: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 120: (0, 373), 39: (0, 257), 76: (0, 499), 121: (0, 377), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 89: {87: (0, 529), 88: (1, {'@': 249})}, 90: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 215})}, 91: {84: (1, {'@': 204}), 87: (1, {'@': 204})}, 92: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 123}), 88: (1, {'@': 123}), 95: (1, {'@': 123}), 87: (1, {'@': 123}), 99: (1, {'@': 123}), 104: (1, {'@': 123}), 84: (1, {'@': 123}), 18: (1, {'@': 123})}, 93: {132: (0, 6), 20: (1, {'@': 116}), 87: (1, {'@': 116})}, 94: {130: (0, 19), 116: (0, 35), 131: (0, 317), 118: (0, 285), 8: (0, 334), 114: (0, 414), 20: (0, 554), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 95: {83: (0, 202), 135: (0, 61), 28: (0, 78), 38: (0, 112), 134: (0, 201), 31: (0, 221)}, 96: {31: (0, 328), 100: (0, 469), 126: (0, 73), 125: (0, 340)}, 97: {2: (0, 214), 89: (0, 555), 84: (1, {'@': 207}), 87: (1, {'@': 207})}, 98: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 36), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 120: (0, 188), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 121: (0, 170), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 99: {130: (0, 19), 116: (0, 35), 118: (0, 285), 114: (0, 414), 131: (0, 352), 20: (0, 677), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 100: {136: (0, 559), 137: (0, 584), 90: (1, {'@': 420}), 91: (1, {'@': 420}), 20: (1, {'@': 420}), 92: (1, {'@': 420}), 93: (1, {'@': 420}), 94: (1, {'@': 420}), 109: (1, {'@': 420}), 96: (1, {'@': 420}), 138: (1, {'@': 420}), 97: (1, {'@': 420}), 98: (1, {'@': 420}), 87: (1, {'@': 420}), 101: (1, {'@': 420}), 102: (1, {'@': 420}), 37: (1, {'@': 420}), 103: (1, {'@': 420}), 89: (1, {'@': 420}), 105: (1, {'@': 420}), 106: (1, {'@': 420}), 107: (1, {'@': 420}), 108: (1, {'@': 420}), 28: (1, {'@': 420}), 139: (1, {'@': 420}), 2: (1, {'@': 420}), 83: (1, {'@': 420}), 111: (1, {'@': 420}), 100: (1, {'@': 420}), 110: (1, {'@': 420}), 88: (1, {'@': 420}), 99: (1, {'@': 420}), 84: (1, {'@': 420}), 95: (1, {'@': 420}), 104: (1, {'@': 420}), 18: (1, {'@': 420})}, 101: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 121: (0, 321), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 120: (0, 374), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 102: {87: (0, 479), 20: (1, {'@': 394}), 84: (1, {'@': 394})}, 103: {27: (0, 569), 62: (0, 167), 53: (0, 198), 28: (0, 360), 63: (0, 475), 83: (0, 625), 31: (0, 609), 38: (0, 250)}, 104: {41: (1, {'@': 130}), 34: (1, {'@': 130}), 46: (1, {'@': 130}), 58: (1, {'@': 130}), 11: (1, {'@': 130}), 36: (1, {'@': 130}), 31: (1, {'@': 130}), 77: (1, {'@': 130}), 37: (1, {'@': 130}), 84: (1, {'@': 130}), 12: (1, {'@': 130}), 64: (1, {'@': 130}), 28: (1, {'@': 130}), 9: (1, {'@': 130}), 35: (1, {'@': 130}), 83: (1, {'@': 130}), 17: (1, {'@': 130}), 38: (1, {'@': 130}), 20: (1, {'@': 130}), 76: (1, {'@': 130}), 43: (1, {'@': 130}), 61: (1, {'@': 130}), 22: (1, {'@': 130}), 30: (1, {'@': 130}), 55: (1, {'@': 130}), 14: (1, {'@': 130}), 10: (1, {'@': 130}), 54: (1, {'@': 130}), 69: (1, {'@': 130}), 5: (1, {'@': 130}), 18: (1, {'@': 130}), 80: (1, {'@': 130}), 2: (1, {'@': 130}), 50: (1, {'@': 130}), 114: (1, {'@': 130}), 115: (1, {'@': 130}), 112: (1, {'@': 130}), 113: (1, {'@': 130}), 116: (1, {'@': 130})}, 105: {20: (0, 554), 8: (0, 310), 114: (1, {'@': 308}), 116: (1, {'@': 308})}, 106: {41: (1, {'@': 287}), 34: (1, {'@': 287}), 46: (1, {'@': 287}), 58: (1, {'@': 287}), 11: (1, {'@': 287}), 36: (1, {'@': 287}), 31: (1, {'@': 287}), 77: (1, {'@': 287}), 37: (1, {'@': 287}), 84: (1, {'@': 287}), 12: (1, {'@': 287}), 64: (1, {'@': 287}), 28: (1, {'@': 287}), 9: (1, {'@': 287}), 35: (1, {'@': 287}), 83: (1, {'@': 287}), 17: (1, {'@': 287}), 38: (1, {'@': 287}), 20: (1, {'@': 287}), 76: (1, {'@': 287}), 43: (1, {'@': 287}), 61: (1, {'@': 287}), 22: (1, {'@': 287}), 30: (1, {'@': 287}), 55: (1, {'@': 287}), 14: (1, {'@': 287}), 10: (1, {'@': 287}), 54: (1, {'@': 287}), 69: (1, {'@': 287}), 5: (1, {'@': 287}), 18: (1, {'@': 287}), 80: (1, {'@': 287}), 2: (1, {'@': 287}), 50: (1, {'@': 287}), 112: (1, {'@': 287}), 113: (1, {'@': 287}), 114: (1, {'@': 287}), 115: (1, {'@': 287}), 116: (1, {'@': 287})}, 107: {2: (0, 214), 89: (0, 555), 99: (0, 393)}, 108: {99: (0, 182), 20: (1, {'@': 124})}, 109: {88: (1, {'@': 276})}, 110: {28: (0, 39)}, 111: {140: (0, 82), 27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 574), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 634), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 572), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 112: {28: (0, 537), 135: (0, 343), 31: (0, 221)}, 113: {8: (0, 266), 20: (0, 554), 41: (1, {'@': 364}), 46: (1, {'@': 364}), 11: (1, {'@': 364}), 31: (1, {'@': 364}), 77: (1, {'@': 364}), 84: (1, {'@': 364}), 83: (1, {'@': 364}), 112: (1, {'@': 364}), 61: (1, {'@': 364}), 113: (1, {'@': 364}), 55: (1, {'@': 364}), 14: (1, {'@': 364}), 69: (1, {'@': 364}), 5: (1, {'@': 364}), 80: (1, {'@': 364}), 2: (1, {'@': 364}), 34: (1, {'@': 364}), 58: (1, {'@': 364}), 36: (1, {'@': 364}), 114: (1, {'@': 364}), 37: (1, {'@': 364}), 12: (1, {'@': 364}), 64: (1, {'@': 364}), 28: (1, {'@': 364}), 35: (1, {'@': 364}), 9: (1, {'@': 364}), 17: (1, {'@': 364}), 38: (1, {'@': 364}), 115: (1, {'@': 364}), 76: (1, {'@': 364}), 43: (1, {'@': 364}), 22: (1, {'@': 364}), 30: (1, {'@': 364}), 54: (1, {'@': 364}), 10: (1, {'@': 364}), 18: (1, {'@': 364}), 116: (1, {'@': 364}), 50: (1, {'@': 364})}, 114: {41: (1, {'@': 131}), 34: (1, {'@': 131}), 46: (1, {'@': 131}), 58: (1, {'@': 131}), 11: (1, {'@': 131}), 36: (1, {'@': 131}), 31: (1, {'@': 131}), 77: (1, {'@': 131}), 37: (1, {'@': 131}), 84: (1, {'@': 131}), 12: (1, {'@': 131}), 64: (1, {'@': 131}), 28: (1, {'@': 131}), 9: (1, {'@': 131}), 35: (1, {'@': 131}), 83: (1, {'@': 131}), 17: (1, {'@': 131}), 38: (1, {'@': 131}), 20: (1, {'@': 131}), 76: (1, {'@': 131}), 43: (1, {'@': 131}), 61: (1, {'@': 131}), 22: (1, {'@': 131}), 30: (1, {'@': 131}), 55: (1, {'@': 131}), 14: (1, {'@': 131}), 10: (1, {'@': 131}), 54: (1, {'@': 131}), 69: (1, {'@': 131}), 5: (1, {'@': 131}), 18: (1, {'@': 131}), 80: (1, {'@': 131}), 2: (1, {'@': 131}), 50: (1, {'@': 131}), 114: (1, {'@': 131}), 115: (1, {'@': 131}), 112: (1, {'@': 131}), 113: (1, {'@': 131}), 116: (1, {'@': 131})}, 115: {41: (1, {'@': 382}), 34: (1, {'@': 382}), 46: (1, {'@': 382}), 58: (1, {'@': 382}), 11: (1, {'@': 382}), 36: (1, {'@': 382}), 31: (1, {'@': 382}), 77: (1, {'@': 382}), 37: (1, {'@': 382}), 84: (1, {'@': 382}), 12: (1, {'@': 382}), 64: (1, {'@': 382}), 28: (1, {'@': 382}), 9: (1, {'@': 382}), 35: (1, {'@': 382}), 83: (1, {'@': 382}), 17: (1, {'@': 382}), 38: (1, {'@': 382}), 20: (1, {'@': 382}), 76: (1, {'@': 382}), 43: (1, {'@': 382}), 61: (1, {'@': 382}), 22: (1, {'@': 382}), 30: (1, {'@': 382}), 55: (1, {'@': 382}), 14: (1, {'@': 382}), 10: (1, {'@': 382}), 54: (1, {'@': 382}), 69: (1, {'@': 382}), 5: (1, {'@': 382}), 18: (1, {'@': 382}), 80: (1, {'@': 382}), 2: (1, {'@': 382}), 50: (1, {'@': 382}), 114: (1, {'@': 382}), 115: (1, {'@': 382}), 112: (1, {'@': 382}), 113: (1, {'@': 382}), 116: (1, {'@': 382})}, 116: {41: (1, {'@': 323}), 34: (1, {'@': 323}), 46: (1, {'@': 323}), 58: (1, {'@': 323}), 11: (1, {'@': 323}), 36: (1, {'@': 323}), 31: (1, {'@': 323}), 77: (1, {'@': 323}), 37: (1, {'@': 323}), 84: (1, {'@': 323}), 12: (1, {'@': 323}), 64: (1, {'@': 323}), 28: (1, {'@': 323}), 9: (1, {'@': 323}), 35: (1, {'@': 323}), 83: (1, {'@': 323}), 17: (1, {'@': 323}), 38: (1, {'@': 323}), 20: (1, {'@': 323}), 76: (1, {'@': 323}), 43: (1, {'@': 323}), 61: (1, {'@': 323}), 22: (1, {'@': 323}), 30: (1, {'@': 323}), 55: (1, {'@': 323}), 14: (1, {'@': 323}), 10: (1, {'@': 323}), 54: (1, {'@': 323}), 69: (1, {'@': 323}), 5: (1, {'@': 323}), 18: (1, {'@': 323}), 80: (1, {'@': 323}), 2: (1, {'@': 323}), 50: (1, {'@': 323}), 114: (1, {'@': 323}), 115: (1, {'@': 323}), 112: (1, {'@': 323}), 113: (1, {'@': 323}), 116: (1, {'@': 323})}, 117: {88: (1, {'@': 260}), 87: (1, {'@': 260})}, 118: {111: (0, 381)}, 119: {27: (0, 569), 2: (0, 601), 10: (0, 526), 11: (0, 522), 28: (0, 603), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 16: (0, 305), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 120: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 141: (0, 589), 13: (0, 503), 32: (0, 602), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 75: (0, 280), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 71: (0, 638), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 104: (1, {'@': 196})}, 121: {99: (1, {'@': 334}), 87: (1, {'@': 334})}, 122: {116: (0, 35), 20: (0, 677), 118: (0, 323)}, 123: {88: (0, 322), 90: (1, {'@': 412}), 91: (1, {'@': 412}), 92: (1, {'@': 412}), 93: (1, {'@': 412}), 94: (1, {'@': 412}), 109: (1, {'@': 412}), 96: (1, {'@': 412}), 97: (1, {'@': 412}), 98: (1, {'@': 412}), 101: (1, {'@': 412}), 102: (1, {'@': 412}), 37: (1, {'@': 412}), 103: (1, {'@': 412}), 89: (1, {'@': 412}), 105: (1, {'@': 412}), 106: (1, {'@': 412}), 107: (1, {'@': 412}), 108: (1, {'@': 412}), 28: (1, {'@': 412}), 2: (1, {'@': 412}), 100: (1, {'@': 412}), 110: (1, {'@': 412})}, 124: {88: (0, 460)}, 125: {2: (0, 214), 89: (0, 555), 99: (0, 145), 20: (1, {'@': 123})}, 126: {2: (0, 214), 89: (0, 555), 84: (1, {'@': 201}), 87: (1, {'@': 201})}, 127: {2: (0, 154)}, 128: {130: (0, 19), 131: (0, 363), 8: (0, 51), 116: (0, 35), 118: (0, 285), 114: (0, 414), 20: (0, 554), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 129: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 420), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 104: (0, 401), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 130: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 3), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 131: {90: (1, {'@': 176}), 91: (1, {'@': 176}), 20: (1, {'@': 176}), 92: (1, {'@': 176}), 93: (1, {'@': 176}), 94: (1, {'@': 176}), 96: (1, {'@': 176}), 97: (1, {'@': 176}), 98: (1, {'@': 176}), 100: (1, {'@': 176}), 101: (1, {'@': 176}), 102: (1, {'@': 176}), 37: (1, {'@': 176}), 103: (1, {'@': 176}), 89: (1, {'@': 176}), 105: (1, {'@': 176}), 106: (1, {'@': 176}), 107: (1, {'@': 176}), 108: (1, {'@': 176}), 2: (1, {'@': 176}), 109: (1, {'@': 176}), 110: (1, {'@': 176}), 88: (1, {'@': 176}), 95: (1, {'@': 176}), 87: (1, {'@': 176}), 99: (1, {'@': 176}), 104: (1, {'@': 176}), 84: (1, {'@': 176}), 18: (1, {'@': 176})}, 132: {41: (1, {'@': 392}), 34: (1, {'@': 392}), 46: (1, {'@': 392}), 58: (1, {'@': 392}), 11: (1, {'@': 392}), 36: (1, {'@': 392}), 31: (1, {'@': 392}), 77: (1, {'@': 392}), 37: (1, {'@': 392}), 84: (1, {'@': 392}), 12: (1, {'@': 392}), 64: (1, {'@': 392}), 28: (1, {'@': 392}), 9: (1, {'@': 392}), 35: (1, {'@': 392}), 83: (1, {'@': 392}), 17: (1, {'@': 392}), 38: (1, {'@': 392}), 20: (1, {'@': 392}), 76: (1, {'@': 392}), 43: (1, {'@': 392}), 61: (1, {'@': 392}), 22: (1, {'@': 392}), 30: (1, {'@': 392}), 55: (1, {'@': 392}), 14: (1, {'@': 392}), 10: (1, {'@': 392}), 54: (1, {'@': 392}), 69: (1, {'@': 392}), 5: (1, {'@': 392}), 18: (1, {'@': 392}), 80: (1, {'@': 392}), 2: (1, {'@': 392}), 50: (1, {'@': 392}), 114: (1, {'@': 392}), 115: (1, {'@': 392}), 112: (1, {'@': 392}), 113: (1, {'@': 392}), 116: (1, {'@': 392})}, 133: {8: (0, 314), 20: (0, 554), 41: (1, {'@': 356}), 46: (1, {'@': 356}), 11: (1, {'@': 356}), 31: (1, {'@': 356}), 77: (1, {'@': 356}), 84: (1, {'@': 356}), 83: (1, {'@': 356}), 112: (1, {'@': 356}), 61: (1, {'@': 356}), 113: (1, {'@': 356}), 55: (1, {'@': 356}), 14: (1, {'@': 356}), 69: (1, {'@': 356}), 5: (1, {'@': 356}), 80: (1, {'@': 356}), 2: (1, {'@': 356}), 34: (1, {'@': 356}), 58: (1, {'@': 356}), 36: (1, {'@': 356}), 114: (1, {'@': 356}), 37: (1, {'@': 356}), 12: (1, {'@': 356}), 64: (1, {'@': 356}), 28: (1, {'@': 356}), 35: (1, {'@': 356}), 9: (1, {'@': 356}), 17: (1, {'@': 356}), 38: (1, {'@': 356}), 115: (1, {'@': 356}), 76: (1, {'@': 356}), 43: (1, {'@': 356}), 22: (1, {'@': 356}), 30: (1, {'@': 356}), 54: (1, {'@': 356}), 10: (1, {'@': 356}), 18: (1, {'@': 356}), 116: (1, {'@': 356}), 50: (1, {'@': 356})}, 134: {90: (1, {'@': 171}), 91: (1, {'@': 171}), 20: (1, {'@': 171}), 92: (1, {'@': 171}), 93: (1, {'@': 171}), 94: (1, {'@': 171}), 96: (1, {'@': 171}), 97: (1, {'@': 171}), 98: (1, {'@': 171}), 100: (1, {'@': 171}), 101: (1, {'@': 171}), 102: (1, {'@': 171}), 37: (1, {'@': 171}), 103: (1, {'@': 171}), 89: (1, {'@': 171}), 105: (1, {'@': 171}), 106: (1, {'@': 171}), 107: (1, {'@': 171}), 108: (1, {'@': 171}), 2: (1, {'@': 171}), 109: (1, {'@': 171}), 110: (1, {'@': 171}), 88: (1, {'@': 171}), 95: (1, {'@': 171}), 87: (1, {'@': 171}), 99: (1, {'@': 171}), 104: (1, {'@': 171}), 84: (1, {'@': 171}), 18: (1, {'@': 171})}, 135: {90: (1, {'@': 184}), 91: (1, {'@': 184}), 20: (1, {'@': 184}), 92: (1, {'@': 184}), 93: (1, {'@': 184}), 94: (1, {'@': 184}), 96: (1, {'@': 184}), 97: (1, {'@': 184}), 98: (1, {'@': 184}), 100: (1, {'@': 184}), 101: (1, {'@': 184}), 102: (1, {'@': 184}), 37: (1, {'@': 184}), 103: (1, {'@': 184}), 89: (1, {'@': 184}), 105: (1, {'@': 184}), 106: (1, {'@': 184}), 107: (1, {'@': 184}), 108: (1, {'@': 184}), 2: (1, {'@': 184}), 109: (1, {'@': 184}), 110: (1, {'@': 184}), 88: (1, {'@': 184}), 95: (1, {'@': 184}), 87: (1, {'@': 184}), 99: (1, {'@': 184}), 104: (1, {'@': 184}), 84: (1, {'@': 184}), 18: (1, {'@': 184})}, 136: {88: (0, 504), 2: (0, 214), 89: (0, 555)}, 137: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 404), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 138: {2: (1, {'@': 229}), 20: (1, {'@': 229}), 89: (1, {'@': 229}), 28: (1, {'@': 229}), 104: (1, {'@': 229}), 88: (1, {'@': 229}), 95: (1, {'@': 229}), 84: (1, {'@': 229}), 18: (1, {'@': 229}), 87: (1, {'@': 229}), 99: (1, {'@': 229})}, 139: {111: (0, 642), 88: (1, {'@': 256}), 87: (1, {'@': 256})}, 140: {20: (1, {'@': 395}), 84: (1, {'@': 395}), 87: (1, {'@': 395})}, 141: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 152), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 71: (0, 13), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 142: {41: (1, {'@': 318}), 34: (1, {'@': 318}), 46: (1, {'@': 318}), 58: (1, {'@': 318}), 11: (1, {'@': 318}), 36: (1, {'@': 318}), 31: (1, {'@': 318}), 77: (1, {'@': 318}), 37: (1, {'@': 318}), 84: (1, {'@': 318}), 12: (1, {'@': 318}), 64: (1, {'@': 318}), 28: (1, {'@': 318}), 9: (1, {'@': 318}), 35: (1, {'@': 318}), 83: (1, {'@': 318}), 17: (1, {'@': 318}), 38: (1, {'@': 318}), 20: (1, {'@': 318}), 76: (1, {'@': 318}), 43: (1, {'@': 318}), 61: (1, {'@': 318}), 22: (1, {'@': 318}), 30: (1, {'@': 318}), 55: (1, {'@': 318}), 14: (1, {'@': 318}), 10: (1, {'@': 318}), 54: (1, {'@': 318}), 69: (1, {'@': 318}), 5: (1, {'@': 318}), 18: (1, {'@': 318}), 80: (1, {'@': 318}), 2: (1, {'@': 318}), 50: (1, {'@': 318}), 114: (1, {'@': 318}), 115: (1, {'@': 318}), 112: (1, {'@': 318}), 113: (1, {'@': 318}), 116: (1, {'@': 318})}, 143: {20: (0, 554), 8: (0, 248), 84: (0, 132)}, 144: {20: (0, 554), 8: (0, 651), 41: (1, {'@': 92}), 34: (1, {'@': 92}), 46: (1, {'@': 92}), 58: (1, {'@': 92}), 11: (1, {'@': 92}), 36: (1, {'@': 92}), 31: (1, {'@': 92}), 77: (1, {'@': 92}), 37: (1, {'@': 92}), 84: (1, {'@': 92}), 12: (1, {'@': 92}), 64: (1, {'@': 92}), 28: (1, {'@': 92}), 35: (1, {'@': 92}), 83: (1, {'@': 92}), 17: (1, {'@': 92}), 38: (1, {'@': 92}), 76: (1, {'@': 92}), 43: (1, {'@': 92}), 61: (1, {'@': 92}), 22: (1, {'@': 92}), 30: (1, {'@': 92}), 55: (1, {'@': 92}), 14: (1, {'@': 92}), 10: (1, {'@': 92}), 54: (1, {'@': 92}), 69: (1, {'@': 92}), 5: (1, {'@': 92}), 18: (1, {'@': 92}), 80: (1, {'@': 92}), 2: (1, {'@': 92}), 50: (1, {'@': 92}), 112: (1, {'@': 92}), 113: (1, {'@': 92}), 114: (1, {'@': 92}), 9: (1, {'@': 92}), 115: (1, {'@': 92}), 116: (1, {'@': 92})}, 145: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 126), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 71: (0, 387), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 146: {76: (1, {'@': 383}), 20: (1, {'@': 383}), 87: (1, {'@': 383})}, 147: {83: (1, {'@': 409}), 88: (1, {'@': 409}), 76: (1, {'@': 409}), 20: (1, {'@': 409}), 87: (1, {'@': 409})}, 148: {94: (0, 153), 107: (0, 628), 102: (0, 544), 92: (0, 558), 108: (0, 576), 90: (0, 547), 96: (1, {'@': 148}), 20: (1, {'@': 148}), 103: (1, {'@': 148}), 89: (1, {'@': 148}), 2: (1, {'@': 148}), 110: (1, {'@': 148}), 101: (1, {'@': 148}), 88: (1, {'@': 148}), 104: (1, {'@': 148}), 95: (1, {'@': 148}), 84: (1, {'@': 148}), 18: (1, {'@': 148}), 87: (1, {'@': 148}), 99: (1, {'@': 148})}, 149: {87: (0, 95), 76: (0, 0), 20: (0, 554), 8: (0, 462), 142: (0, 115)}, 150: {2: (0, 214), 89: (0, 555), 88: (0, 365)}, 151: {84: (0, 502), 20: (0, 677), 41: (1, {'@': 76}), 34: (1, {'@': 76}), 46: (1, {'@': 76}), 58: (1, {'@': 76}), 11: (1, {'@': 76}), 36: (1, {'@': 76}), 31: (1, {'@': 76}), 77: (1, {'@': 76}), 37: (1, {'@': 76}), 12: (1, {'@': 76}), 64: (1, {'@': 76}), 28: (1, {'@': 76}), 35: (1, {'@': 76}), 83: (1, {'@': 76}), 17: (1, {'@': 76}), 38: (1, {'@': 76}), 76: (1, {'@': 76}), 43: (1, {'@': 76}), 61: (1, {'@': 76}), 22: (1, {'@': 76}), 30: (1, {'@': 76}), 55: (1, {'@': 76}), 14: (1, {'@': 76}), 10: (1, {'@': 76}), 54: (1, {'@': 76}), 69: (1, {'@': 76}), 5: (1, {'@': 76}), 18: (1, {'@': 76}), 80: (1, {'@': 76}), 2: (1, {'@': 76}), 50: (1, {'@': 76})}, 152: {2: (0, 214), 89: (0, 555), 88: (1, {'@': 263}), 87: (1, {'@': 263})}, 153: {47: (0, 264), 27: (0, 569), 2: (0, 601), 7: (0, 507), 10: (0, 526), 11: (0, 522), 21: (0, 274), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 154: {140: (0, 160), 27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 574), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 634), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 572), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 155: {20: (0, 677), 41: (1, {'@': 100}), 34: (1, {'@': 100}), 46: (1, {'@': 100}), 58: (1, {'@': 100}), 11: (1, {'@': 100}), 36: (1, {'@': 100}), 31: (1, {'@': 100}), 77: (1, {'@': 100}), 37: (1, {'@': 100}), 84: (1, {'@': 100}), 12: (1, {'@': 100}), 64: (1, {'@': 100}), 28: (1, {'@': 100}), 9: (1, {'@': 100}), 35: (1, {'@': 100}), 83: (1, {'@': 100}), 17: (1, {'@': 100}), 38: (1, {'@': 100}), 76: (1, {'@': 100}), 43: (1, {'@': 100}), 61: (1, {'@': 100}), 22: (1, {'@': 100}), 30: (1, {'@': 100}), 55: (1, {'@': 100}), 14: (1, {'@': 100}), 10: (1, {'@': 100}), 54: (1, {'@': 100}), 69: (1, {'@': 100}), 5: (1, {'@': 100}), 18: (1, {'@': 100}), 80: (1, {'@': 100}), 2: (1, {'@': 100}), 50: (1, {'@': 100})}, 156: {41: (1, {'@': 320}), 34: (1, {'@': 320}), 46: (1, {'@': 320}), 58: (1, {'@': 320}), 11: (1, {'@': 320}), 36: (1, {'@': 320}), 31: (1, {'@': 320}), 77: (1, {'@': 320}), 37: (1, {'@': 320}), 84: (1, {'@': 320}), 12: (1, {'@': 320}), 64: (1, {'@': 320}), 28: (1, {'@': 320}), 9: (1, {'@': 320}), 35: (1, {'@': 320}), 83: (1, {'@': 320}), 17: (1, {'@': 320}), 38: (1, {'@': 320}), 20: (1, {'@': 320}), 76: (1, {'@': 320}), 43: (1, {'@': 320}), 61: (1, {'@': 320}), 22: (1, {'@': 320}), 30: (1, {'@': 320}), 55: (1, {'@': 320}), 14: (1, {'@': 320}), 10: (1, {'@': 320}), 54: (1, {'@': 320}), 69: (1, {'@': 320}), 5: (1, {'@': 320}), 18: (1, {'@': 320}), 80: (1, {'@': 320}), 2: (1, {'@': 320}), 50: (1, {'@': 320}), 114: (1, {'@': 320}), 115: (1, {'@': 320}), 112: (1, {'@': 320}), 113: (1, {'@': 320}), 116: (1, {'@': 320})}, 157: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 238}), 88: (1, {'@': 238}), 95: (1, {'@': 238}), 87: (1, {'@': 238}), 99: (1, {'@': 238}), 104: (1, {'@': 238}), 84: (1, {'@': 238}), 18: (1, {'@': 238})}, 158: {2: (1, {'@': 232}), 20: (1, {'@': 232}), 89: (1, {'@': 232}), 28: (1, {'@': 232}), 104: (1, {'@': 232}), 88: (1, {'@': 232}), 95: (1, {'@': 232}), 84: (1, {'@': 232}), 18: (1, {'@': 232}), 87: (1, {'@': 232}), 99: (1, {'@': 232})}, 159: {90: (1, {'@': 172}), 91: (1, {'@': 172}), 20: (1, {'@': 172}), 92: (1, {'@': 172}), 93: (1, {'@': 172}), 94: (1, {'@': 172}), 96: (1, {'@': 172}), 97: (1, {'@': 172}), 98: (1, {'@': 172}), 100: (1, {'@': 172}), 101: (1, {'@': 172}), 102: (1, {'@': 172}), 37: (1, {'@': 172}), 103: (1, {'@': 172}), 89: (1, {'@': 172}), 105: (1, {'@': 172}), 106: (1, {'@': 172}), 107: (1, {'@': 172}), 108: (1, {'@': 172}), 2: (1, {'@': 172}), 109: (1, {'@': 172}), 110: (1, {'@': 172}), 88: (1, {'@': 172}), 95: (1, {'@': 172}), 87: (1, {'@': 172}), 99: (1, {'@': 172}), 104: (1, {'@': 172}), 84: (1, {'@': 172}), 18: (1, {'@': 172})}, 160: {87: (0, 622), 104: (0, 104)}, 161: {41: (1, {'@': 389}), 34: (1, {'@': 389}), 46: (1, {'@': 389}), 58: (1, {'@': 389}), 11: (1, {'@': 389}), 36: (1, {'@': 389}), 31: (1, {'@': 389}), 77: (1, {'@': 389}), 37: (1, {'@': 389}), 84: (1, {'@': 389}), 12: (1, {'@': 389}), 64: (1, {'@': 389}), 28: (1, {'@': 389}), 9: (1, {'@': 389}), 35: (1, {'@': 389}), 83: (1, {'@': 389}), 17: (1, {'@': 389}), 38: (1, {'@': 389}), 20: (1, {'@': 389}), 76: (1, {'@': 389}), 43: (1, {'@': 389}), 61: (1, {'@': 389}), 22: (1, {'@': 389}), 30: (1, {'@': 389}), 55: (1, {'@': 389}), 14: (1, {'@': 389}), 10: (1, {'@': 389}), 54: (1, {'@': 389}), 69: (1, {'@': 389}), 5: (1, {'@': 389}), 18: (1, {'@': 389}), 80: (1, {'@': 389}), 2: (1, {'@': 389}), 50: (1, {'@': 389}), 114: (1, {'@': 389}), 115: (1, {'@': 389}), 112: (1, {'@': 389}), 113: (1, {'@': 389}), 116: (1, {'@': 389})}, 162: {31: (0, 532)}, 163: {20: (1, {'@': 240}), 88: (1, {'@': 240}), 95: (1, {'@': 240}), 87: (1, {'@': 240}), 99: (1, {'@': 240}), 104: (1, {'@': 240}), 89: (1, {'@': 240}), 84: (1, {'@': 240}), 18: (1, {'@': 240}), 2: (1, {'@': 240})}, 164: {142: (0, 247), 76: (0, 0), 20: (0, 677)}, 165: {8: (0, 263), 20: (0, 554), 41: (1, {'@': 358}), 46: (1, {'@': 358}), 11: (1, {'@': 358}), 31: (1, {'@': 358}), 77: (1, {'@': 358}), 84: (1, {'@': 358}), 83: (1, {'@': 358}), 112: (1, {'@': 358}), 61: (1, {'@': 358}), 113: (1, {'@': 358}), 55: (1, {'@': 358}), 14: (1, {'@': 358}), 69: (1, {'@': 358}), 5: (1, {'@': 358}), 80: (1, {'@': 358}), 2: (1, {'@': 358}), 34: (1, {'@': 358}), 58: (1, {'@': 358}), 36: (1, {'@': 358}), 114: (1, {'@': 358}), 37: (1, {'@': 358}), 12: (1, {'@': 358}), 64: (1, {'@': 358}), 28: (1, {'@': 358}), 35: (1, {'@': 358}), 9: (1, {'@': 358}), 17: (1, {'@': 358}), 38: (1, {'@': 358}), 115: (1, {'@': 358}), 76: (1, {'@': 358}), 43: (1, {'@': 358}), 22: (1, {'@': 358}), 30: (1, {'@': 358}), 54: (1, {'@': 358}), 10: (1, {'@': 358}), 18: (1, {'@': 358}), 116: (1, {'@': 358}), 50: (1, {'@': 358})}, 166: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 204), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 120: (0, 217), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 121: (0, 222), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 167: {90: (1, {'@': 419}), 91: (1, {'@': 419}), 20: (1, {'@': 419}), 92: (1, {'@': 419}), 93: (1, {'@': 419}), 94: (1, {'@': 419}), 109: (1, {'@': 419}), 96: (1, {'@': 419}), 138: (1, {'@': 419}), 97: (1, {'@': 419}), 98: (1, {'@': 419}), 87: (1, {'@': 419}), 101: (1, {'@': 419}), 102: (1, {'@': 419}), 37: (1, {'@': 419}), 103: (1, {'@': 419}), 89: (1, {'@': 419}), 105: (1, {'@': 419}), 106: (1, {'@': 419}), 107: (1, {'@': 419}), 108: (1, {'@': 419}), 28: (1, {'@': 419}), 139: (1, {'@': 419}), 2: (1, {'@': 419}), 83: (1, {'@': 419}), 111: (1, {'@': 419}), 100: (1, {'@': 419}), 110: (1, {'@': 419}), 88: (1, {'@': 419}), 99: (1, {'@': 419}), 84: (1, {'@': 419}), 95: (1, {'@': 419}), 104: (1, {'@': 419}), 18: (1, {'@': 419})}, 168: {2: (0, 214), 89: (0, 555), 104: (0, 657)}, 169: {20: (0, 677), 41: (1, {'@': 101}), 34: (1, {'@': 101}), 46: (1, {'@': 101}), 58: (1, {'@': 101}), 11: (1, {'@': 101}), 36: (1, {'@': 101}), 31: (1, {'@': 101}), 77: (1, {'@': 101}), 37: (1, {'@': 101}), 84: (1, {'@': 101}), 12: (1, {'@': 101}), 64: (1, {'@': 101}), 28: (1, {'@': 101}), 9: (1, {'@': 101}), 35: (1, {'@': 101}), 83: (1, {'@': 101}), 17: (1, {'@': 101}), 38: (1, {'@': 101}), 76: (1, {'@': 101}), 43: (1, {'@': 101}), 61: (1, {'@': 101}), 22: (1, {'@': 101}), 30: (1, {'@': 101}), 55: (1, {'@': 101}), 14: (1, {'@': 101}), 10: (1, {'@': 101}), 54: (1, {'@': 101}), 69: (1, {'@': 101}), 5: (1, {'@': 101}), 18: (1, {'@': 101}), 80: (1, {'@': 101}), 2: (1, {'@': 101}), 50: (1, {'@': 101})}, 170: {20: (0, 304), 41: (1, {'@': 330}), 34: (1, {'@': 330}), 46: (1, {'@': 330}), 58: (1, {'@': 330}), 11: (1, {'@': 330}), 36: (1, {'@': 330}), 31: (1, {'@': 330}), 77: (1, {'@': 330}), 37: (1, {'@': 330}), 84: (1, {'@': 330}), 12: (1, {'@': 330}), 64: (1, {'@': 330}), 28: (1, {'@': 330}), 9: (1, {'@': 330}), 35: (1, {'@': 330}), 83: (1, {'@': 330}), 17: (1, {'@': 330}), 38: (1, {'@': 330}), 76: (1, {'@': 330}), 43: (1, {'@': 330}), 61: (1, {'@': 330}), 22: (1, {'@': 330}), 30: (1, {'@': 330}), 55: (1, {'@': 330}), 14: (1, {'@': 330}), 10: (1, {'@': 330}), 54: (1, {'@': 330}), 69: (1, {'@': 330}), 5: (1, {'@': 330}), 18: (1, {'@': 330}), 80: (1, {'@': 330}), 2: (1, {'@': 330}), 50: (1, {'@': 330}), 112: (1, {'@': 330}), 113: (1, {'@': 330}), 114: (1, {'@': 330}), 115: (1, {'@': 330}), 116: (1, {'@': 330})}, 171: {2: (1, {'@': 221}), 20: (1, {'@': 221}), 89: (1, {'@': 221}), 28: (1, {'@': 221}), 104: (1, {'@': 221}), 88: (1, {'@': 221}), 95: (1, {'@': 221}), 84: (1, {'@': 221}), 18: (1, {'@': 221}), 87: (1, {'@': 221}), 99: (1, {'@': 221})}, 172: {2: (0, 214), 89: (0, 555), 88: (0, 344)}, 173: {8: (0, 669), 20: (0, 554)}, 174: {88: (0, 582)}, 175: {2: (1, {'@': 222}), 20: (1, {'@': 222}), 89: (1, {'@': 222}), 28: (1, {'@': 222}), 104: (1, {'@': 222}), 88: (1, {'@': 222}), 95: (1, {'@': 222}), 84: (1, {'@': 222}), 18: (1, {'@': 222}), 87: (1, {'@': 222}), 99: (1, {'@': 222})}, 176: {2: (1, {'@': 237}), 20: (1, {'@': 237}), 89: (1, {'@': 237}), 88: (1, {'@': 237}), 95: (1, {'@': 237}), 87: (1, {'@': 237}), 99: (1, {'@': 237}), 104: (1, {'@': 237}), 84: (1, {'@': 237}), 18: (1, {'@': 237})}, 177: {90: (1, {'@': 177}), 91: (1, {'@': 177}), 20: (1, {'@': 177}), 92: (1, {'@': 177}), 93: (1, {'@': 177}), 94: (1, {'@': 177}), 96: (1, {'@': 177}), 97: (1, {'@': 177}), 98: (1, {'@': 177}), 100: (1, {'@': 177}), 101: (1, {'@': 177}), 102: (1, {'@': 177}), 37: (1, {'@': 177}), 103: (1, {'@': 177}), 89: (1, {'@': 177}), 105: (1, {'@': 177}), 106: (1, {'@': 177}), 107: (1, {'@': 177}), 108: (1, {'@': 177}), 2: (1, {'@': 177}), 109: (1, {'@': 177}), 110: (1, {'@': 177}), 88: (1, {'@': 177}), 95: (1, {'@': 177}), 87: (1, {'@': 177}), 99: (1, {'@': 177}), 104: (1, {'@': 177}), 84: (1, {'@': 177}), 18: (1, {'@': 177})}, 178: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 92), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 30: (0, 86), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 71: (0, 230), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 79: (0, 359), 57: (0, 79), 83: (0, 625)}, 179: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 8: (0, 200), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 20: (0, 554), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 121: (0, 133), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 120: (0, 165), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 180: {20: (1, {'@': 433}), 114: (1, {'@': 433}), 116: (1, {'@': 433})}, 181: {88: (0, 668)}, 182: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 48), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 71: (0, 91), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 183: {20: (1, {'@': 216})}, 184: {41: (1, {'@': 293}), 34: (1, {'@': 293}), 46: (1, {'@': 293}), 58: (1, {'@': 293}), 11: (1, {'@': 293}), 36: (1, {'@': 293}), 31: (1, {'@': 293}), 77: (1, {'@': 293}), 37: (1, {'@': 293}), 84: (1, {'@': 293}), 12: (1, {'@': 293}), 64: (1, {'@': 293}), 28: (1, {'@': 293}), 9: (1, {'@': 293}), 35: (1, {'@': 293}), 83: (1, {'@': 293}), 17: (1, {'@': 293}), 38: (1, {'@': 293}), 20: (1, {'@': 293}), 76: (1, {'@': 293}), 43: (1, {'@': 293}), 61: (1, {'@': 293}), 22: (1, {'@': 293}), 30: (1, {'@': 293}), 55: (1, {'@': 293}), 14: (1, {'@': 293}), 10: (1, {'@': 293}), 54: (1, {'@': 293}), 69: (1, {'@': 293}), 5: (1, {'@': 293}), 18: (1, {'@': 293}), 80: (1, {'@': 293}), 2: (1, {'@': 293}), 50: (1, {'@': 293}), 112: (1, {'@': 293}), 113: (1, {'@': 293}), 114: (1, {'@': 293}), 115: (1, {'@': 293}), 116: (1, {'@': 293})}, 185: {2: (1, {'@': 230}), 20: (1, {'@': 230}), 89: (1, {'@': 230}), 28: (1, {'@': 230}), 104: (1, {'@': 230}), 88: (1, {'@': 230}), 95: (1, {'@': 230}), 84: (1, {'@': 230}), 18: (1, {'@': 230}), 87: (1, {'@': 230}), 99: (1, {'@': 230})}, 186: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 383), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 121: (0, 480), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 120: (0, 234), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 187: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 55), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 71: (0, 196), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 188: {20: (0, 380), 41: (1, {'@': 332}), 34: (1, {'@': 332}), 46: (1, {'@': 332}), 58: (1, {'@': 332}), 11: (1, {'@': 332}), 36: (1, {'@': 332}), 31: (1, {'@': 332}), 77: (1, {'@': 332}), 37: (1, {'@': 332}), 84: (1, {'@': 332}), 12: (1, {'@': 332}), 64: (1, {'@': 332}), 28: (1, {'@': 332}), 9: (1, {'@': 332}), 35: (1, {'@': 332}), 83: (1, {'@': 332}), 17: (1, {'@': 332}), 38: (1, {'@': 332}), 76: (1, {'@': 332}), 43: (1, {'@': 332}), 61: (1, {'@': 332}), 22: (1, {'@': 332}), 30: (1, {'@': 332}), 55: (1, {'@': 332}), 14: (1, {'@': 332}), 10: (1, {'@': 332}), 54: (1, {'@': 332}), 69: (1, {'@': 332}), 5: (1, {'@': 332}), 18: (1, {'@': 332}), 80: (1, {'@': 332}), 2: (1, {'@': 332}), 50: (1, {'@': 332}), 112: (1, {'@': 332}), 113: (1, {'@': 332}), 114: (1, {'@': 332}), 115: (1, {'@': 332}), 116: (1, {'@': 332})}, 189: {88: (1, {'@': 253})}, 190: {105: (0, 440), 102: (1, {'@': 150}), 90: (1, {'@': 150}), 20: (1, {'@': 150}), 92: (1, {'@': 150}), 103: (1, {'@': 150}), 89: (1, {'@': 150}), 94: (1, {'@': 150}), 107: (1, {'@': 150}), 96: (1, {'@': 150}), 108: (1, {'@': 150}), 2: (1, {'@': 150}), 110: (1, {'@': 150}), 101: (1, {'@': 150}), 88: (1, {'@': 150}), 95: (1, {'@': 150}), 87: (1, {'@': 150}), 99: (1, {'@': 150}), 104: (1, {'@': 150}), 84: (1, {'@': 150}), 18: (1, {'@': 150})}, 191: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 32: (0, 364), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 192: {41: (1, {'@': 387}), 34: (1, {'@': 387}), 46: (1, {'@': 387}), 58: (1, {'@': 387}), 11: (1, {'@': 387}), 36: (1, {'@': 387}), 31: (1, {'@': 387}), 77: (1, {'@': 387}), 37: (1, {'@': 387}), 84: (1, {'@': 387}), 12: (1, {'@': 387}), 64: (1, {'@': 387}), 28: (1, {'@': 387}), 9: (1, {'@': 387}), 35: (1, {'@': 387}), 83: (1, {'@': 387}), 17: (1, {'@': 387}), 38: (1, {'@': 387}), 20: (1, {'@': 387}), 76: (1, {'@': 387}), 43: (1, {'@': 387}), 61: (1, {'@': 387}), 22: (1, {'@': 387}), 30: (1, {'@': 387}), 55: (1, {'@': 387}), 14: (1, {'@': 387}), 10: (1, {'@': 387}), 54: (1, {'@': 387}), 69: (1, {'@': 387}), 5: (1, {'@': 387}), 18: (1, {'@': 387}), 80: (1, {'@': 387}), 2: (1, {'@': 387}), 50: (1, {'@': 387}), 114: (1, {'@': 387}), 115: (1, {'@': 387}), 112: (1, {'@': 387}), 113: (1, {'@': 387}), 116: (1, {'@': 387})}, 193: {41: (1, {'@': 376}), 34: (1, {'@': 376}), 46: (1, {'@': 376}), 58: (1, {'@': 376}), 11: (1, {'@': 376}), 36: (1, {'@': 376}), 31: (1, {'@': 376}), 77: (1, {'@': 376}), 37: (1, {'@': 376}), 84: (1, {'@': 376}), 12: (1, {'@': 376}), 64: (1, {'@': 376}), 28: (1, {'@': 376}), 9: (1, {'@': 376}), 35: (1, {'@': 376}), 83: (1, {'@': 376}), 17: (1, {'@': 376}), 38: (1, {'@': 376}), 20: (1, {'@': 376}), 76: (1, {'@': 376}), 43: (1, {'@': 376}), 61: (1, {'@': 376}), 22: (1, {'@': 376}), 30: (1, {'@': 376}), 55: (1, {'@': 376}), 14: (1, {'@': 376}), 10: (1, {'@': 376}), 54: (1, {'@': 376}), 69: (1, {'@': 376}), 5: (1, {'@': 376}), 18: (1, {'@': 376}), 80: (1, {'@': 376}), 2: (1, {'@': 376}), 50: (1, {'@': 376}), 114: (1, {'@': 376}), 115: (1, {'@': 376}), 112: (1, {'@': 376}), 113: (1, {'@': 376}), 116: (1, {'@': 376})}, 194: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 434), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 195: {20: (0, 677), 84: (1, {'@': 397}), 87: (1, {'@': 397})}, 196: {88: (1, {'@': 266}), 87: (1, {'@': 266})}, 197: {90: (1, {'@': 421}), 91: (1, {'@': 421}), 20: (1, {'@': 421}), 92: (1, {'@': 421}), 93: (1, {'@': 421}), 94: (1, {'@': 421}), 109: (1, {'@': 421}), 96: (1, {'@': 421}), 138: (1, {'@': 421}), 97: (1, {'@': 421}), 98: (1, {'@': 421}), 87: (1, {'@': 421}), 101: (1, {'@': 421}), 102: (1, {'@': 421}), 37: (1, {'@': 421}), 103: (1, {'@': 421}), 89: (1, {'@': 421}), 105: (1, {'@': 421}), 106: (1, {'@': 421}), 107: (1, {'@': 421}), 108: (1, {'@': 421}), 28: (1, {'@': 421}), 139: (1, {'@': 421}), 2: (1, {'@': 421}), 83: (1, {'@': 421}), 111: (1, {'@': 421}), 100: (1, {'@': 421}), 110: (1, {'@': 421}), 88: (1, {'@': 421}), 99: (1, {'@': 421}), 84: (1, {'@': 421}), 95: (1, {'@': 421}), 104: (1, {'@': 421}), 18: (1, {'@': 421})}, 198: {111: (1, {'@': 217}), 87: (1, {'@': 217})}, 199: {88: (1, {'@': 262}), 87: (1, {'@': 262})}, 200: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 120: (0, 367), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 121: (0, 335), 45: (0, 336), 50: (0, 353), 53: (0, 366), 51: (0, 355), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 201: {76: (1, {'@': 384}), 20: (1, {'@': 384}), 87: (1, {'@': 384})}, 202: {28: (0, 537), 135: (0, 235), 31: (0, 221)}, 203: {31: (0, 413)}, 204: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 121: (0, 63), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 120: (0, 47), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 205: {2: (0, 214), 104: (0, 281), 89: (0, 555)}, 206: {111: (0, 642), 88: (1, {'@': 258}), 87: (1, {'@': 258})}, 207: {129: (0, 272), 76: (0, 22), 111: (0, 381), 121: (0, 14), 143: (0, 209)}, 208: {8: (0, 368), 20: (0, 554), 41: (1, {'@': 366}), 46: (1, {'@': 366}), 11: (1, {'@': 366}), 31: (1, {'@': 366}), 77: (1, {'@': 366}), 84: (1, {'@': 366}), 83: (1, {'@': 366}), 112: (1, {'@': 366}), 61: (1, {'@': 366}), 113: (1, {'@': 366}), 55: (1, {'@': 366}), 14: (1, {'@': 366}), 69: (1, {'@': 366}), 5: (1, {'@': 366}), 80: (1, {'@': 366}), 2: (1, {'@': 366}), 34: (1, {'@': 366}), 58: (1, {'@': 366}), 36: (1, {'@': 366}), 114: (1, {'@': 366}), 37: (1, {'@': 366}), 12: (1, {'@': 366}), 64: (1, {'@': 366}), 28: (1, {'@': 366}), 35: (1, {'@': 366}), 9: (1, {'@': 366}), 17: (1, {'@': 366}), 38: (1, {'@': 366}), 115: (1, {'@': 366}), 76: (1, {'@': 366}), 43: (1, {'@': 366}), 22: (1, {'@': 366}), 30: (1, {'@': 366}), 54: (1, {'@': 366}), 10: (1, {'@': 366}), 18: (1, {'@': 366}), 116: (1, {'@': 366}), 50: (1, {'@': 366})}, 209: {41: (1, {'@': 244}), 34: (1, {'@': 244}), 46: (1, {'@': 244}), 58: (1, {'@': 244}), 11: (1, {'@': 244}), 36: (1, {'@': 244}), 31: (1, {'@': 244}), 77: (1, {'@': 244}), 37: (1, {'@': 244}), 84: (1, {'@': 244}), 12: (1, {'@': 244}), 64: (1, {'@': 244}), 28: (1, {'@': 244}), 9: (1, {'@': 244}), 35: (1, {'@': 244}), 83: (1, {'@': 244}), 17: (1, {'@': 244}), 38: (1, {'@': 244}), 20: (1, {'@': 244}), 76: (1, {'@': 244}), 43: (1, {'@': 244}), 61: (1, {'@': 244}), 22: (1, {'@': 244}), 30: (1, {'@': 244}), 55: (1, {'@': 244}), 14: (1, {'@': 244}), 10: (1, {'@': 244}), 54: (1, {'@': 244}), 69: (1, {'@': 244}), 5: (1, {'@': 244}), 18: (1, {'@': 244}), 80: (1, {'@': 244}), 2: (1, {'@': 244}), 50: (1, {'@': 244}), 114: (1, {'@': 244}), 115: (1, {'@': 244}), 112: (1, {'@': 244}), 113: (1, {'@': 244}), 116: (1, {'@': 244})}, 210: {20: (0, 677), 114: (1, {'@': 303}), 116: (1, {'@': 303})}, 211: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 141: (0, 589), 13: (0, 503), 32: (0, 666), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 72: (0, 283), 41: (0, 291), 43: (0, 289), 75: (0, 280), 71: (0, 638), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 104: (1, {'@': 196})}, 212: {20: (0, 677), 41: (1, {'@': 105}), 34: (1, {'@': 105}), 46: (1, {'@': 105}), 58: (1, {'@': 105}), 11: (1, {'@': 105}), 36: (1, {'@': 105}), 31: (1, {'@': 105}), 77: (1, {'@': 105}), 37: (1, {'@': 105}), 84: (1, {'@': 105}), 12: (1, {'@': 105}), 64: (1, {'@': 105}), 28: (1, {'@': 105}), 9: (1, {'@': 105}), 35: (1, {'@': 105}), 83: (1, {'@': 105}), 17: (1, {'@': 105}), 38: (1, {'@': 105}), 76: (1, {'@': 105}), 43: (1, {'@': 105}), 61: (1, {'@': 105}), 22: (1, {'@': 105}), 30: (1, {'@': 105}), 55: (1, {'@': 105}), 14: (1, {'@': 105}), 10: (1, {'@': 105}), 54: (1, {'@': 105}), 69: (1, {'@': 105}), 5: (1, {'@': 105}), 18: (1, {'@': 105}), 80: (1, {'@': 105}), 2: (1, {'@': 105}), 50: (1, {'@': 105})}, 213: {88: (0, 177), 2: (0, 214), 89: (0, 555)}, 214: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 99: (0, 87), 11: (0, 522), 32: (0, 437), 13: (0, 503), 23: (0, 540), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 75: (0, 280), 43: (0, 289), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 215: {76: (0, 22), 121: (0, 348), 20: (0, 677)}, 216: {2: (0, 214), 89: (0, 555), 88: (1, {'@': 261}), 87: (1, {'@': 261})}, 217: {41: (1, {'@': 316}), 34: (1, {'@': 316}), 46: (1, {'@': 316}), 58: (1, {'@': 316}), 11: (1, {'@': 316}), 36: (1, {'@': 316}), 31: (1, {'@': 316}), 77: (1, {'@': 316}), 37: (1, {'@': 316}), 84: (1, {'@': 316}), 12: (1, {'@': 316}), 64: (1, {'@': 316}), 28: (1, {'@': 316}), 9: (1, {'@': 316}), 35: (1, {'@': 316}), 83: (1, {'@': 316}), 17: (1, {'@': 316}), 38: (1, {'@': 316}), 20: (1, {'@': 316}), 76: (1, {'@': 316}), 43: (1, {'@': 316}), 61: (1, {'@': 316}), 22: (1, {'@': 316}), 30: (1, {'@': 316}), 55: (1, {'@': 316}), 14: (1, {'@': 316}), 10: (1, {'@': 316}), 54: (1, {'@': 316}), 69: (1, {'@': 316}), 5: (1, {'@': 316}), 18: (1, {'@': 316}), 80: (1, {'@': 316}), 2: (1, {'@': 316}), 50: (1, {'@': 316}), 112: (1, {'@': 316}), 113: (1, {'@': 316}), 114: (1, {'@': 316}), 115: (1, {'@': 316}), 116: (1, {'@': 316})}, 218: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 120: (0, 439), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 121: (0, 490), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 219: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 83: (0, 625), 32: (0, 27), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 71: (0, 18), 20: (1, {'@': 425})}, 220: {130: (0, 19), 116: (0, 35), 118: (0, 285), 114: (0, 414), 131: (0, 362), 20: (0, 677), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 221: {83: (1, {'@': 411}), 88: (1, {'@': 411}), 76: (1, {'@': 411}), 20: (1, {'@': 411}), 87: (1, {'@': 411})}, 222: {41: (1, {'@': 315}), 34: (1, {'@': 315}), 46: (1, {'@': 315}), 58: (1, {'@': 315}), 11: (1, {'@': 315}), 36: (1, {'@': 315}), 31: (1, {'@': 315}), 77: (1, {'@': 315}), 37: (1, {'@': 315}), 84: (1, {'@': 315}), 12: (1, {'@': 315}), 64: (1, {'@': 315}), 28: (1, {'@': 315}), 9: (1, {'@': 315}), 35: (1, {'@': 315}), 83: (1, {'@': 315}), 17: (1, {'@': 315}), 38: (1, {'@': 315}), 20: (1, {'@': 315}), 76: (1, {'@': 315}), 43: (1, {'@': 315}), 61: (1, {'@': 315}), 22: (1, {'@': 315}), 30: (1, {'@': 315}), 55: (1, {'@': 315}), 14: (1, {'@': 315}), 10: (1, {'@': 315}), 54: (1, {'@': 315}), 69: (1, {'@': 315}), 5: (1, {'@': 315}), 18: (1, {'@': 315}), 80: (1, {'@': 315}), 2: (1, {'@': 315}), 50: (1, {'@': 315}), 112: (1, {'@': 315}), 113: (1, {'@': 315}), 114: (1, {'@': 315}), 115: (1, {'@': 315}), 116: (1, {'@': 315})}, 223: {8: (0, 454), 31: (0, 278), 20: (0, 554), 133: (0, 451), 87: (1, {'@': 399}), 84: (1, {'@': 399})}, 224: {41: (1, {'@': 290}), 34: (1, {'@': 290}), 46: (1, {'@': 290}), 58: (1, {'@': 290}), 11: (1, {'@': 290}), 36: (1, {'@': 290}), 31: (1, {'@': 290}), 77: (1, {'@': 290}), 37: (1, {'@': 290}), 84: (1, {'@': 290}), 12: (1, {'@': 290}), 64: (1, {'@': 290}), 28: (1, {'@': 290}), 9: (1, {'@': 290}), 35: (1, {'@': 290}), 83: (1, {'@': 290}), 17: (1, {'@': 290}), 38: (1, {'@': 290}), 20: (1, {'@': 290}), 76: (1, {'@': 290}), 43: (1, {'@': 290}), 61: (1, {'@': 290}), 22: (1, {'@': 290}), 30: (1, {'@': 290}), 55: (1, {'@': 290}), 14: (1, {'@': 290}), 10: (1, {'@': 290}), 54: (1, {'@': 290}), 69: (1, {'@': 290}), 5: (1, {'@': 290}), 18: (1, {'@': 290}), 80: (1, {'@': 290}), 2: (1, {'@': 290}), 50: (1, {'@': 290}), 112: (1, {'@': 290}), 113: (1, {'@': 290}), 114: (1, {'@': 290}), 115: (1, {'@': 290}), 116: (1, {'@': 290})}, 225: {20: (0, 677), 41: (1, {'@': 102}), 34: (1, {'@': 102}), 46: (1, {'@': 102}), 58: (1, {'@': 102}), 11: (1, {'@': 102}), 36: (1, {'@': 102}), 31: (1, {'@': 102}), 77: (1, {'@': 102}), 37: (1, {'@': 102}), 84: (1, {'@': 102}), 12: (1, {'@': 102}), 64: (1, {'@': 102}), 28: (1, {'@': 102}), 9: (1, {'@': 102}), 35: (1, {'@': 102}), 83: (1, {'@': 102}), 17: (1, {'@': 102}), 38: (1, {'@': 102}), 76: (1, {'@': 102}), 43: (1, {'@': 102}), 61: (1, {'@': 102}), 22: (1, {'@': 102}), 30: (1, {'@': 102}), 55: (1, {'@': 102}), 14: (1, {'@': 102}), 10: (1, {'@': 102}), 54: (1, {'@': 102}), 69: (1, {'@': 102}), 5: (1, {'@': 102}), 18: (1, {'@': 102}), 80: (1, {'@': 102}), 2: (1, {'@': 102}), 50: (1, {'@': 102})}, 226: {41: (1, {'@': 286}), 34: (1, {'@': 286}), 46: (1, {'@': 286}), 58: (1, {'@': 286}), 11: (1, {'@': 286}), 36: (1, {'@': 286}), 31: (1, {'@': 286}), 77: (1, {'@': 286}), 37: (1, {'@': 286}), 84: (1, {'@': 286}), 12: (1, {'@': 286}), 64: (1, {'@': 286}), 28: (1, {'@': 286}), 9: (1, {'@': 286}), 35: (1, {'@': 286}), 83: (1, {'@': 286}), 17: (1, {'@': 286}), 38: (1, {'@': 286}), 20: (1, {'@': 286}), 76: (1, {'@': 286}), 43: (1, {'@': 286}), 61: (1, {'@': 286}), 22: (1, {'@': 286}), 30: (1, {'@': 286}), 55: (1, {'@': 286}), 14: (1, {'@': 286}), 10: (1, {'@': 286}), 54: (1, {'@': 286}), 69: (1, {'@': 286}), 5: (1, {'@': 286}), 18: (1, {'@': 286}), 80: (1, {'@': 286}), 2: (1, {'@': 286}), 50: (1, {'@': 286}), 112: (1, {'@': 286}), 113: (1, {'@': 286}), 114: (1, {'@': 286}), 115: (1, {'@': 286}), 116: (1, {'@': 286})}, 227: {106: (0, 629), 90: (1, {'@': 165}), 91: (1, {'@': 165}), 20: (1, {'@': 165}), 92: (1, {'@': 165}), 93: (1, {'@': 165}), 94: (1, {'@': 165}), 109: (1, {'@': 165}), 96: (1, {'@': 165}), 97: (1, {'@': 165}), 98: (1, {'@': 165}), 101: (1, {'@': 165}), 102: (1, {'@': 165}), 37: (1, {'@': 165}), 103: (1, {'@': 165}), 89: (1, {'@': 165}), 105: (1, {'@': 165}), 107: (1, {'@': 165}), 108: (1, {'@': 165}), 2: (1, {'@': 165}), 100: (1, {'@': 165}), 110: (1, {'@': 165}), 88: (1, {'@': 165}), 95: (1, {'@': 165}), 87: (1, {'@': 165}), 99: (1, {'@': 165}), 104: (1, {'@': 165}), 84: (1, {'@': 165}), 18: (1, {'@': 165})}, 228: {122: (0, 465), 112: (0, 617), 20: (0, 677), 123: (0, 548)}, 229: {31: (0, 590), 144: (0, 332)}, 230: {20: (1, {'@': 124}), 88: (1, {'@': 124}), 95: (1, {'@': 124}), 87: (1, {'@': 124}), 99: (1, {'@': 124}), 104: (1, {'@': 124}), 89: (1, {'@': 124}), 84: (1, {'@': 124}), 18: (1, {'@': 124}), 2: (1, {'@': 124})}, 231: {112: (0, 617), 122: (0, 542), 8: (0, 228), 20: (0, 554), 123: (0, 548)}, 232: {41: (1, {'@': 380}), 34: (1, {'@': 380}), 46: (1, {'@': 380}), 58: (1, {'@': 380}), 11: (1, {'@': 380}), 36: (1, {'@': 380}), 31: (1, {'@': 380}), 77: (1, {'@': 380}), 37: (1, {'@': 380}), 84: (1, {'@': 380}), 12: (1, {'@': 380}), 64: (1, {'@': 380}), 28: (1, {'@': 380}), 9: (1, {'@': 380}), 35: (1, {'@': 380}), 83: (1, {'@': 380}), 17: (1, {'@': 380}), 38: (1, {'@': 380}), 20: (1, {'@': 380}), 76: (1, {'@': 380}), 43: (1, {'@': 380}), 61: (1, {'@': 380}), 22: (1, {'@': 380}), 30: (1, {'@': 380}), 55: (1, {'@': 380}), 14: (1, {'@': 380}), 10: (1, {'@': 380}), 54: (1, {'@': 380}), 69: (1, {'@': 380}), 5: (1, {'@': 380}), 18: (1, {'@': 380}), 80: (1, {'@': 380}), 2: (1, {'@': 380}), 50: (1, {'@': 380}), 114: (1, {'@': 380}), 115: (1, {'@': 380}), 112: (1, {'@': 380}), 113: (1, {'@': 380}), 116: (1, {'@': 380})}, 233: {88: (0, 98), 2: (0, 214), 89: (0, 555)}, 234: {54: (0, 674), 8: (0, 512), 20: (0, 554)}, 235: {83: (0, 46), 88: (1, {'@': 406}), 76: (1, {'@': 406}), 20: (1, {'@': 406}), 87: (1, {'@': 406})}, 236: {28: (0, 478)}, 237: {31: (0, 297)}, 238: {76: (0, 649), 20: (0, 677)}, 239: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 32: (0, 9), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 240: {41: (1, {'@': 311}), 46: (1, {'@': 311}), 11: (1, {'@': 311}), 31: (1, {'@': 311}), 77: (1, {'@': 311}), 84: (1, {'@': 311}), 83: (1, {'@': 311}), 112: (1, {'@': 311}), 61: (1, {'@': 311}), 113: (1, {'@': 311}), 55: (1, {'@': 311}), 14: (1, {'@': 311}), 69: (1, {'@': 311}), 5: (1, {'@': 311}), 80: (1, {'@': 311}), 2: (1, {'@': 311}), 34: (1, {'@': 311}), 58: (1, {'@': 311}), 36: (1, {'@': 311}), 114: (1, {'@': 311}), 37: (1, {'@': 311}), 12: (1, {'@': 311}), 64: (1, {'@': 311}), 28: (1, {'@': 311}), 35: (1, {'@': 311}), 9: (1, {'@': 311}), 17: (1, {'@': 311}), 38: (1, {'@': 311}), 20: (1, {'@': 311}), 115: (1, {'@': 311}), 76: (1, {'@': 311}), 43: (1, {'@': 311}), 22: (1, {'@': 311}), 30: (1, {'@': 311}), 54: (1, {'@': 311}), 10: (1, {'@': 311}), 18: (1, {'@': 311}), 116: (1, {'@': 311}), 50: (1, {'@': 311})}, 241: {138: (0, 417), 83: (0, 565), 88: (0, 498), 90: (1, {'@': 416}), 91: (1, {'@': 416}), 92: (1, {'@': 416}), 93: (1, {'@': 416}), 94: (1, {'@': 416}), 96: (1, {'@': 416}), 97: (1, {'@': 416}), 98: (1, {'@': 416}), 100: (1, {'@': 416}), 101: (1, {'@': 416}), 102: (1, {'@': 416}), 37: (1, {'@': 416}), 103: (1, {'@': 416}), 89: (1, {'@': 416}), 105: (1, {'@': 416}), 106: (1, {'@': 416}), 107: (1, {'@': 416}), 108: (1, {'@': 416}), 28: (1, {'@': 416}), 2: (1, {'@': 416}), 109: (1, {'@': 416}), 110: (1, {'@': 416})}, 242: {27: (0, 569), 2: (0, 601), 10: (0, 526), 11: (0, 522), 28: (0, 603), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 80: (0, 375), 26: (0, 134), 62: (0, 167), 63: (0, 475), 83: (0, 625), 38: (0, 250)}, 243: {136: (0, 559), 137: (0, 584), 111: (0, 598), 90: (1, {'@': 420}), 91: (1, {'@': 420}), 92: (1, {'@': 420}), 88: (1, {'@': 420}), 93: (1, {'@': 420}), 94: (1, {'@': 420}), 96: (1, {'@': 420}), 138: (1, {'@': 420}), 97: (1, {'@': 420}), 98: (1, {'@': 420}), 87: (1, {'@': 420}), 100: (1, {'@': 420}), 101: (1, {'@': 420}), 102: (1, {'@': 420}), 37: (1, {'@': 420}), 103: (1, {'@': 420}), 89: (1, {'@': 420}), 105: (1, {'@': 420}), 106: (1, {'@': 420}), 107: (1, {'@': 420}), 108: (1, {'@': 420}), 28: (1, {'@': 420}), 2: (1, {'@': 420}), 83: (1, {'@': 420}), 109: (1, {'@': 420}), 110: (1, {'@': 420})}, 244: {31: (0, 590), 144: (0, 346)}, 245: {20: (0, 554), 8: (0, 267), 41: (1, {'@': 372}), 46: (1, {'@': 372}), 11: (1, {'@': 372}), 31: (1, {'@': 372}), 77: (1, {'@': 372}), 84: (1, {'@': 372}), 83: (1, {'@': 372}), 112: (1, {'@': 372}), 61: (1, {'@': 372}), 113: (1, {'@': 372}), 55: (1, {'@': 372}), 14: (1, {'@': 372}), 69: (1, {'@': 372}), 5: (1, {'@': 372}), 80: (1, {'@': 372}), 2: (1, {'@': 372}), 34: (1, {'@': 372}), 58: (1, {'@': 372}), 36: (1, {'@': 372}), 114: (1, {'@': 372}), 37: (1, {'@': 372}), 12: (1, {'@': 372}), 64: (1, {'@': 372}), 28: (1, {'@': 372}), 35: (1, {'@': 372}), 9: (1, {'@': 372}), 17: (1, {'@': 372}), 38: (1, {'@': 372}), 115: (1, {'@': 372}), 76: (1, {'@': 372}), 43: (1, {'@': 372}), 22: (1, {'@': 372}), 30: (1, {'@': 372}), 54: (1, {'@': 372}), 10: (1, {'@': 372}), 18: (1, {'@': 372}), 116: (1, {'@': 372}), 50: (1, {'@': 372})}, 246: {86: (0, 412), 28: (0, 246), 31: (0, 486)}, 247: {41: (1, {'@': 379}), 34: (1, {'@': 379}), 46: (1, {'@': 379}), 58: (1, {'@': 379}), 11: (1, {'@': 379}), 36: (1, {'@': 379}), 31: (1, {'@': 379}), 77: (1, {'@': 379}), 37: (1, {'@': 379}), 84: (1, {'@': 379}), 12: (1, {'@': 379}), 64: (1, {'@': 379}), 28: (1, {'@': 379}), 9: (1, {'@': 379}), 35: (1, {'@': 379}), 83: (1, {'@': 379}), 17: (1, {'@': 379}), 38: (1, {'@': 379}), 20: (1, {'@': 379}), 76: (1, {'@': 379}), 43: (1, {'@': 379}), 61: (1, {'@': 379}), 22: (1, {'@': 379}), 30: (1, {'@': 379}), 55: (1, {'@': 379}), 14: (1, {'@': 379}), 10: (1, {'@': 379}), 54: (1, {'@': 379}), 69: (1, {'@': 379}), 5: (1, {'@': 379}), 18: (1, {'@': 379}), 80: (1, {'@': 379}), 2: (1, {'@': 379}), 50: (1, {'@': 379}), 114: (1, {'@': 379}), 115: (1, {'@': 379}), 112: (1, {'@': 379}), 113: (1, {'@': 379}), 116: (1, {'@': 379})}, 248: {84: (0, 62), 20: (0, 677)}, 249: {2: (0, 214), 89: (0, 555), 88: (0, 492)}, 250: {28: (0, 577), 63: (0, 475), 27: (0, 541), 62: (0, 167), 31: (0, 609)}, 251: {99: (1, {'@': 333}), 87: (1, {'@': 333})}, 252: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 32: (0, 425), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 253: {20: (0, 677), 54: (0, 399)}, 254: {41: (1, {'@': 321}), 34: (1, {'@': 321}), 46: (1, {'@': 321}), 58: (1, {'@': 321}), 11: (1, {'@': 321}), 36: (1, {'@': 321}), 31: (1, {'@': 321}), 77: (1, {'@': 321}), 37: (1, {'@': 321}), 84: (1, {'@': 321}), 12: (1, {'@': 321}), 64: (1, {'@': 321}), 28: (1, {'@': 321}), 9: (1, {'@': 321}), 35: (1, {'@': 321}), 83: (1, {'@': 321}), 17: (1, {'@': 321}), 38: (1, {'@': 321}), 20: (1, {'@': 321}), 76: (1, {'@': 321}), 43: (1, {'@': 321}), 61: (1, {'@': 321}), 22: (1, {'@': 321}), 30: (1, {'@': 321}), 55: (1, {'@': 321}), 14: (1, {'@': 321}), 10: (1, {'@': 321}), 54: (1, {'@': 321}), 69: (1, {'@': 321}), 5: (1, {'@': 321}), 18: (1, {'@': 321}), 80: (1, {'@': 321}), 2: (1, {'@': 321}), 50: (1, {'@': 321}), 114: (1, {'@': 321}), 115: (1, {'@': 321}), 112: (1, {'@': 321}), 113: (1, {'@': 321}), 116: (1, {'@': 321})}, 255: {31: (0, 269)}, 256: {20: (0, 677), 41: (1, {'@': 367}), 46: (1, {'@': 367}), 11: (1, {'@': 367}), 31: (1, {'@': 367}), 77: (1, {'@': 367}), 84: (1, {'@': 367}), 83: (1, {'@': 367}), 112: (1, {'@': 367}), 61: (1, {'@': 367}), 113: (1, {'@': 367}), 55: (1, {'@': 367}), 14: (1, {'@': 367}), 69: (1, {'@': 367}), 5: (1, {'@': 367}), 80: (1, {'@': 367}), 2: (1, {'@': 367}), 34: (1, {'@': 367}), 58: (1, {'@': 367}), 36: (1, {'@': 367}), 114: (1, {'@': 367}), 37: (1, {'@': 367}), 12: (1, {'@': 367}), 64: (1, {'@': 367}), 28: (1, {'@': 367}), 35: (1, {'@': 367}), 9: (1, {'@': 367}), 17: (1, {'@': 367}), 38: (1, {'@': 367}), 115: (1, {'@': 367}), 76: (1, {'@': 367}), 43: (1, {'@': 367}), 22: (1, {'@': 367}), 30: (1, {'@': 367}), 54: (1, {'@': 367}), 10: (1, {'@': 367}), 18: (1, {'@': 367}), 116: (1, {'@': 367}), 50: (1, {'@': 367})}, 257: {2: (1, {'@': 220}), 20: (1, {'@': 220}), 89: (1, {'@': 220}), 28: (1, {'@': 220}), 104: (1, {'@': 220}), 88: (1, {'@': 220}), 95: (1, {'@': 220}), 84: (1, {'@': 220}), 18: (1, {'@': 220}), 87: (1, {'@': 220}), 99: (1, {'@': 220})}, 258: {106: (0, 629), 90: (1, {'@': 164}), 91: (1, {'@': 164}), 20: (1, {'@': 164}), 92: (1, {'@': 164}), 93: (1, {'@': 164}), 94: (1, {'@': 164}), 109: (1, {'@': 164}), 96: (1, {'@': 164}), 97: (1, {'@': 164}), 98: (1, {'@': 164}), 101: (1, {'@': 164}), 102: (1, {'@': 164}), 37: (1, {'@': 164}), 103: (1, {'@': 164}), 89: (1, {'@': 164}), 105: (1, {'@': 164}), 107: (1, {'@': 164}), 108: (1, {'@': 164}), 2: (1, {'@': 164}), 100: (1, {'@': 164}), 110: (1, {'@': 164}), 88: (1, {'@': 164}), 95: (1, {'@': 164}), 87: (1, {'@': 164}), 99: (1, {'@': 164}), 104: (1, {'@': 164}), 84: (1, {'@': 164}), 18: (1, {'@': 164})}, 259: {88: (0, 663)}, 260: {2: (1, {'@': 274}), 20: (1, {'@': 274}), 89: (1, {'@': 274}), 28: (1, {'@': 274}), 104: (1, {'@': 274}), 88: (1, {'@': 274}), 95: (1, {'@': 274}), 84: (1, {'@': 274}), 18: (1, {'@': 274}), 87: (1, {'@': 274}), 99: (1, {'@': 274})}, 261: {93: (0, 119), 100: (0, 620), 91: (0, 664), 97: (0, 632), 90: (1, {'@': 162}), 20: (1, {'@': 162}), 92: (1, {'@': 162}), 94: (1, {'@': 162}), 96: (1, {'@': 162}), 98: (1, {'@': 162}), 101: (1, {'@': 162}), 102: (1, {'@': 162}), 37: (1, {'@': 162}), 103: (1, {'@': 162}), 89: (1, {'@': 162}), 105: (1, {'@': 162}), 107: (1, {'@': 162}), 108: (1, {'@': 162}), 2: (1, {'@': 162}), 109: (1, {'@': 162}), 110: (1, {'@': 162}), 88: (1, {'@': 162}), 95: (1, {'@': 162}), 87: (1, {'@': 162}), 99: (1, {'@': 162}), 104: (1, {'@': 162}), 84: (1, {'@': 162}), 18: (1, {'@': 162})}, 262: {41: (1, {'@': 312}), 46: (1, {'@': 312}), 11: (1, {'@': 312}), 31: (1, {'@': 312}), 77: (1, {'@': 312}), 84: (1, {'@': 312}), 83: (1, {'@': 312}), 112: (1, {'@': 312}), 61: (1, {'@': 312}), 113: (1, {'@': 312}), 55: (1, {'@': 312}), 14: (1, {'@': 312}), 69: (1, {'@': 312}), 5: (1, {'@': 312}), 80: (1, {'@': 312}), 2: (1, {'@': 312}), 34: (1, {'@': 312}), 58: (1, {'@': 312}), 36: (1, {'@': 312}), 114: (1, {'@': 312}), 37: (1, {'@': 312}), 12: (1, {'@': 312}), 64: (1, {'@': 312}), 28: (1, {'@': 312}), 35: (1, {'@': 312}), 9: (1, {'@': 312}), 17: (1, {'@': 312}), 38: (1, {'@': 312}), 20: (1, {'@': 312}), 115: (1, {'@': 312}), 76: (1, {'@': 312}), 43: (1, {'@': 312}), 22: (1, {'@': 312}), 30: (1, {'@': 312}), 54: (1, {'@': 312}), 10: (1, {'@': 312}), 18: (1, {'@': 312}), 116: (1, {'@': 312}), 50: (1, {'@': 312})}, 263: {20: (0, 677), 41: (1, {'@': 357}), 46: (1, {'@': 357}), 11: (1, {'@': 357}), 31: (1, {'@': 357}), 77: (1, {'@': 357}), 84: (1, {'@': 357}), 83: (1, {'@': 357}), 112: (1, {'@': 357}), 61: (1, {'@': 357}), 113: (1, {'@': 357}), 55: (1, {'@': 357}), 14: (1, {'@': 357}), 69: (1, {'@': 357}), 5: (1, {'@': 357}), 80: (1, {'@': 357}), 2: (1, {'@': 357}), 34: (1, {'@': 357}), 58: (1, {'@': 357}), 36: (1, {'@': 357}), 114: (1, {'@': 357}), 37: (1, {'@': 357}), 12: (1, {'@': 357}), 64: (1, {'@': 357}), 28: (1, {'@': 357}), 35: (1, {'@': 357}), 9: (1, {'@': 357}), 17: (1, {'@': 357}), 38: (1, {'@': 357}), 115: (1, {'@': 357}), 76: (1, {'@': 357}), 43: (1, {'@': 357}), 22: (1, {'@': 357}), 30: (1, {'@': 357}), 54: (1, {'@': 357}), 10: (1, {'@': 357}), 18: (1, {'@': 357}), 116: (1, {'@': 357}), 50: (1, {'@': 357})}, 264: {98: (0, 644), 37: (0, 626), 102: (1, {'@': 158}), 90: (1, {'@': 158}), 20: (1, {'@': 158}), 92: (1, {'@': 158}), 103: (1, {'@': 158}), 89: (1, {'@': 158}), 105: (1, {'@': 158}), 94: (1, {'@': 158}), 107: (1, {'@': 158}), 96: (1, {'@': 158}), 108: (1, {'@': 158}), 2: (1, {'@': 158}), 109: (1, {'@': 158}), 110: (1, {'@': 158}), 101: (1, {'@': 158}), 88: (1, {'@': 158}), 95: (1, {'@': 158}), 87: (1, {'@': 158}), 99: (1, {'@': 158}), 104: (1, {'@': 158}), 84: (1, {'@': 158}), 18: (1, {'@': 158})}, 265: {104: (1, {'@': 271}), 87: (1, {'@': 271})}, 266: {20: (0, 677), 41: (1, {'@': 363}), 46: (1, {'@': 363}), 11: (1, {'@': 363}), 31: (1, {'@': 363}), 77: (1, {'@': 363}), 84: (1, {'@': 363}), 83: (1, {'@': 363}), 112: (1, {'@': 363}), 61: (1, {'@': 363}), 113: (1, {'@': 363}), 55: (1, {'@': 363}), 14: (1, {'@': 363}), 69: (1, {'@': 363}), 5: (1, {'@': 363}), 80: (1, {'@': 363}), 2: (1, {'@': 363}), 34: (1, {'@': 363}), 58: (1, {'@': 363}), 36: (1, {'@': 363}), 114: (1, {'@': 363}), 37: (1, {'@': 363}), 12: (1, {'@': 363}), 64: (1, {'@': 363}), 28: (1, {'@': 363}), 35: (1, {'@': 363}), 9: (1, {'@': 363}), 17: (1, {'@': 363}), 38: (1, {'@': 363}), 115: (1, {'@': 363}), 76: (1, {'@': 363}), 43: (1, {'@': 363}), 22: (1, {'@': 363}), 30: (1, {'@': 363}), 54: (1, {'@': 363}), 10: (1, {'@': 363}), 18: (1, {'@': 363}), 116: (1, {'@': 363}), 50: (1, {'@': 363})}, 267: {20: (0, 677), 41: (1, {'@': 371}), 46: (1, {'@': 371}), 11: (1, {'@': 371}), 31: (1, {'@': 371}), 77: (1, {'@': 371}), 84: (1, {'@': 371}), 83: (1, {'@': 371}), 112: (1, {'@': 371}), 61: (1, {'@': 371}), 113: (1, {'@': 371}), 55: (1, {'@': 371}), 14: (1, {'@': 371}), 69: (1, {'@': 371}), 5: (1, {'@': 371}), 80: (1, {'@': 371}), 2: (1, {'@': 371}), 34: (1, {'@': 371}), 58: (1, {'@': 371}), 36: (1, {'@': 371}), 114: (1, {'@': 371}), 37: (1, {'@': 371}), 12: (1, {'@': 371}), 64: (1, {'@': 371}), 28: (1, {'@': 371}), 35: (1, {'@': 371}), 9: (1, {'@': 371}), 17: (1, {'@': 371}), 38: (1, {'@': 371}), 115: (1, {'@': 371}), 76: (1, {'@': 371}), 43: (1, {'@': 371}), 22: (1, {'@': 371}), 30: (1, {'@': 371}), 54: (1, {'@': 371}), 10: (1, {'@': 371}), 18: (1, {'@': 371}), 116: (1, {'@': 371}), 50: (1, {'@': 371})}, 268: {41: (1, {'@': 347}), 34: (1, {'@': 347}), 46: (1, {'@': 347}), 58: (1, {'@': 347}), 11: (1, {'@': 347}), 36: (1, {'@': 347}), 31: (1, {'@': 347}), 77: (1, {'@': 347}), 37: (1, {'@': 347}), 84: (1, {'@': 347}), 12: (1, {'@': 347}), 64: (1, {'@': 347}), 28: (1, {'@': 347}), 9: (1, {'@': 347}), 35: (1, {'@': 347}), 83: (1, {'@': 347}), 17: (1, {'@': 347}), 38: (1, {'@': 347}), 20: (1, {'@': 347}), 76: (1, {'@': 347}), 43: (1, {'@': 347}), 61: (1, {'@': 347}), 22: (1, {'@': 347}), 30: (1, {'@': 347}), 55: (1, {'@': 347}), 14: (1, {'@': 347}), 10: (1, {'@': 347}), 54: (1, {'@': 347}), 69: (1, {'@': 347}), 5: (1, {'@': 347}), 18: (1, {'@': 347}), 80: (1, {'@': 347}), 2: (1, {'@': 347}), 50: (1, {'@': 347}), 112: (1, {'@': 347}), 113: (1, {'@': 347}), 114: (1, {'@': 347}), 115: (1, {'@': 347}), 116: (1, {'@': 347})}, 269: {83: (1, {'@': 121}), 20: (1, {'@': 121}), 87: (1, {'@': 121}), 88: (1, {'@': 121}), 132: (1, {'@': 121})}, 270: {112: (0, 617), 115: (0, 618), 145: (0, 34), 123: (0, 673), 41: (1, {'@': 340}), 34: (1, {'@': 340}), 46: (1, {'@': 340}), 58: (1, {'@': 340}), 11: (1, {'@': 340}), 36: (1, {'@': 340}), 31: (1, {'@': 340}), 77: (1, {'@': 340}), 37: (1, {'@': 340}), 84: (1, {'@': 340}), 12: (1, {'@': 340}), 64: (1, {'@': 340}), 28: (1, {'@': 340}), 9: (1, {'@': 340}), 35: (1, {'@': 340}), 83: (1, {'@': 340}), 17: (1, {'@': 340}), 38: (1, {'@': 340}), 20: (1, {'@': 340}), 76: (1, {'@': 340}), 43: (1, {'@': 340}), 61: (1, {'@': 340}), 22: (1, {'@': 340}), 30: (1, {'@': 340}), 55: (1, {'@': 340}), 14: (1, {'@': 340}), 10: (1, {'@': 340}), 54: (1, {'@': 340}), 69: (1, {'@': 340}), 5: (1, {'@': 340}), 18: (1, {'@': 340}), 80: (1, {'@': 340}), 2: (1, {'@': 340}), 50: (1, {'@': 340}), 113: (1, {'@': 340}), 114: (1, {'@': 340}), 116: (1, {'@': 340})}, 271: {2: (1, {'@': 225}), 20: (1, {'@': 225}), 89: (1, {'@': 225}), 28: (1, {'@': 225}), 104: (1, {'@': 225}), 88: (1, {'@': 225}), 95: (1, {'@': 225}), 84: (1, {'@': 225}), 18: (1, {'@': 225}), 87: (1, {'@': 225}), 99: (1, {'@': 225})}, 272: {41: (1, {'@': 242}), 34: (1, {'@': 242}), 46: (1, {'@': 242}), 58: (1, {'@': 242}), 11: (1, {'@': 242}), 36: (1, {'@': 242}), 31: (1, {'@': 242}), 77: (1, {'@': 242}), 37: (1, {'@': 242}), 84: (1, {'@': 242}), 12: (1, {'@': 242}), 64: (1, {'@': 242}), 28: (1, {'@': 242}), 9: (1, {'@': 242}), 35: (1, {'@': 242}), 83: (1, {'@': 242}), 17: (1, {'@': 242}), 38: (1, {'@': 242}), 20: (1, {'@': 242}), 76: (1, {'@': 242}), 43: (1, {'@': 242}), 61: (1, {'@': 242}), 22: (1, {'@': 242}), 30: (1, {'@': 242}), 55: (1, {'@': 242}), 14: (1, {'@': 242}), 10: (1, {'@': 242}), 54: (1, {'@': 242}), 69: (1, {'@': 242}), 5: (1, {'@': 242}), 18: (1, {'@': 242}), 80: (1, {'@': 242}), 2: (1, {'@': 242}), 50: (1, {'@': 242}), 114: (1, {'@': 242}), 115: (1, {'@': 242}), 112: (1, {'@': 242}), 113: (1, {'@': 242}), 116: (1, {'@': 242})}, 273: {20: (0, 677), 41: (1, {'@': 86}), 34: (1, {'@': 86}), 46: (1, {'@': 86}), 58: (1, {'@': 86}), 11: (1, {'@': 86}), 36: (1, {'@': 86}), 31: (1, {'@': 86}), 77: (1, {'@': 86}), 37: (1, {'@': 86}), 84: (1, {'@': 86}), 12: (1, {'@': 86}), 64: (1, {'@': 86}), 28: (1, {'@': 86}), 35: (1, {'@': 86}), 83: (1, {'@': 86}), 17: (1, {'@': 86}), 38: (1, {'@': 86}), 76: (1, {'@': 86}), 43: (1, {'@': 86}), 61: (1, {'@': 86}), 22: (1, {'@': 86}), 30: (1, {'@': 86}), 55: (1, {'@': 86}), 14: (1, {'@': 86}), 10: (1, {'@': 86}), 54: (1, {'@': 86}), 69: (1, {'@': 86}), 5: (1, {'@': 86}), 18: (1, {'@': 86}), 80: (1, {'@': 86}), 2: (1, {'@': 86}), 50: (1, {'@': 86}), 112: (1, {'@': 86}), 113: (1, {'@': 86}), 114: (1, {'@': 86}), 9: (1, {'@': 86}), 115: (1, {'@': 86}), 116: (1, {'@': 86})}, 274: {105: (0, 440), 102: (1, {'@': 153}), 90: (1, {'@': 153}), 20: (1, {'@': 153}), 92: (1, {'@': 153}), 103: (1, {'@': 153}), 89: (1, {'@': 153}), 94: (1, {'@': 153}), 107: (1, {'@': 153}), 96: (1, {'@': 153}), 108: (1, {'@': 153}), 2: (1, {'@': 153}), 110: (1, {'@': 153}), 101: (1, {'@': 153}), 88: (1, {'@': 153}), 95: (1, {'@': 153}), 87: (1, {'@': 153}), 99: (1, {'@': 153}), 104: (1, {'@': 153}), 84: (1, {'@': 153}), 18: (1, {'@': 153})}, 275: {84: (0, 561), 20: (0, 677), 41: (1, {'@': 95}), 34: (1, {'@': 95}), 46: (1, {'@': 95}), 58: (1, {'@': 95}), 11: (1, {'@': 95}), 36: (1, {'@': 95}), 31: (1, {'@': 95}), 77: (1, {'@': 95}), 37: (1, {'@': 95}), 12: (1, {'@': 95}), 64: (1, {'@': 95}), 28: (1, {'@': 95}), 9: (1, {'@': 95}), 35: (1, {'@': 95}), 83: (1, {'@': 95}), 17: (1, {'@': 95}), 38: (1, {'@': 95}), 76: (1, {'@': 95}), 43: (1, {'@': 95}), 61: (1, {'@': 95}), 22: (1, {'@': 95}), 30: (1, {'@': 95}), 55: (1, {'@': 95}), 14: (1, {'@': 95}), 10: (1, {'@': 95}), 54: (1, {'@': 95}), 69: (1, {'@': 95}), 5: (1, {'@': 95}), 18: (1, {'@': 95}), 80: (1, {'@': 95}), 2: (1, {'@': 95}), 50: (1, {'@': 95})}, 276: {41: (1, {'@': 341}), 34: (1, {'@': 341}), 46: (1, {'@': 341}), 58: (1, {'@': 341}), 11: (1, {'@': 341}), 36: (1, {'@': 341}), 31: (1, {'@': 341}), 77: (1, {'@': 341}), 37: (1, {'@': 341}), 84: (1, {'@': 341}), 12: (1, {'@': 341}), 64: (1, {'@': 341}), 28: (1, {'@': 341}), 9: (1, {'@': 341}), 35: (1, {'@': 341}), 83: (1, {'@': 341}), 17: (1, {'@': 341}), 38: (1, {'@': 341}), 20: (1, {'@': 341}), 76: (1, {'@': 341}), 43: (1, {'@': 341}), 61: (1, {'@': 341}), 22: (1, {'@': 341}), 30: (1, {'@': 341}), 55: (1, {'@': 341}), 14: (1, {'@': 341}), 10: (1, {'@': 341}), 54: (1, {'@': 341}), 69: (1, {'@': 341}), 5: (1, {'@': 341}), 18: (1, {'@': 341}), 80: (1, {'@': 341}), 2: (1, {'@': 341}), 50: (1, {'@': 341}), 112: (1, {'@': 341}), 113: (1, {'@': 341}), 114: (1, {'@': 341}), 115: (1, {'@': 341}), 116: (1, {'@': 341})}, 277: {90: (1, {'@': 175}), 91: (1, {'@': 175}), 20: (1, {'@': 175}), 92: (1, {'@': 175}), 93: (1, {'@': 175}), 94: (1, {'@': 175}), 96: (1, {'@': 175}), 97: (1, {'@': 175}), 98: (1, {'@': 175}), 100: (1, {'@': 175}), 101: (1, {'@': 175}), 102: (1, {'@': 175}), 37: (1, {'@': 175}), 103: (1, {'@': 175}), 89: (1, {'@': 175}), 105: (1, {'@': 175}), 106: (1, {'@': 175}), 107: (1, {'@': 175}), 108: (1, {'@': 175}), 2: (1, {'@': 175}), 109: (1, {'@': 175}), 110: (1, {'@': 175}), 88: (1, {'@': 175}), 95: (1, {'@': 175}), 87: (1, {'@': 175}), 99: (1, {'@': 175}), 104: (1, {'@': 175}), 84: (1, {'@': 175}), 18: (1, {'@': 175})}, 278: {87: (0, 223), 20: (0, 554), 8: (0, 195), 84: (1, {'@': 398})}, 279: {41: (1, {'@': 343}), 34: (1, {'@': 343}), 46: (1, {'@': 343}), 58: (1, {'@': 343}), 11: (1, {'@': 343}), 36: (1, {'@': 343}), 31: (1, {'@': 343}), 77: (1, {'@': 343}), 37: (1, {'@': 343}), 84: (1, {'@': 343}), 12: (1, {'@': 343}), 64: (1, {'@': 343}), 28: (1, {'@': 343}), 9: (1, {'@': 343}), 35: (1, {'@': 343}), 83: (1, {'@': 343}), 17: (1, {'@': 343}), 38: (1, {'@': 343}), 20: (1, {'@': 343}), 76: (1, {'@': 343}), 43: (1, {'@': 343}), 61: (1, {'@': 343}), 22: (1, {'@': 343}), 30: (1, {'@': 343}), 55: (1, {'@': 343}), 14: (1, {'@': 343}), 10: (1, {'@': 343}), 54: (1, {'@': 343}), 69: (1, {'@': 343}), 5: (1, {'@': 343}), 18: (1, {'@': 343}), 80: (1, {'@': 343}), 2: (1, {'@': 343}), 50: (1, {'@': 343}), 112: (1, {'@': 343}), 113: (1, {'@': 343}), 114: (1, {'@': 343}), 115: (1, {'@': 343}), 116: (1, {'@': 343})}, 280: {90: (1, {'@': 168}), 91: (1, {'@': 168}), 20: (1, {'@': 168}), 92: (1, {'@': 168}), 93: (1, {'@': 168}), 94: (1, {'@': 168}), 96: (1, {'@': 168}), 97: (1, {'@': 168}), 98: (1, {'@': 168}), 100: (1, {'@': 168}), 101: (1, {'@': 168}), 102: (1, {'@': 168}), 37: (1, {'@': 168}), 103: (1, {'@': 168}), 89: (1, {'@': 168}), 105: (1, {'@': 168}), 106: (1, {'@': 168}), 107: (1, {'@': 168}), 108: (1, {'@': 168}), 2: (1, {'@': 168}), 109: (1, {'@': 168}), 110: (1, {'@': 168}), 88: (1, {'@': 168}), 95: (1, {'@': 168}), 87: (1, {'@': 168}), 99: (1, {'@': 168}), 104: (1, {'@': 168}), 84: (1, {'@': 168}), 18: (1, {'@': 168})}, 281: {2: (1, {'@': 228}), 20: (1, {'@': 228}), 89: (1, {'@': 228}), 28: (1, {'@': 228}), 104: (1, {'@': 228}), 88: (1, {'@': 228}), 95: (1, {'@': 228}), 84: (1, {'@': 228}), 18: (1, {'@': 228}), 87: (1, {'@': 228}), 99: (1, {'@': 228})}, 282: {41: (1, {'@': 337}), 34: (1, {'@': 337}), 46: (1, {'@': 337}), 58: (1, {'@': 337}), 11: (1, {'@': 337}), 36: (1, {'@': 337}), 31: (1, {'@': 337}), 77: (1, {'@': 337}), 37: (1, {'@': 337}), 84: (1, {'@': 337}), 12: (1, {'@': 337}), 64: (1, {'@': 337}), 28: (1, {'@': 337}), 9: (1, {'@': 337}), 35: (1, {'@': 337}), 83: (1, {'@': 337}), 17: (1, {'@': 337}), 38: (1, {'@': 337}), 20: (1, {'@': 337}), 76: (1, {'@': 337}), 43: (1, {'@': 337}), 61: (1, {'@': 337}), 22: (1, {'@': 337}), 30: (1, {'@': 337}), 55: (1, {'@': 337}), 14: (1, {'@': 337}), 10: (1, {'@': 337}), 54: (1, {'@': 337}), 69: (1, {'@': 337}), 5: (1, {'@': 337}), 18: (1, {'@': 337}), 80: (1, {'@': 337}), 2: (1, {'@': 337}), 50: (1, {'@': 337}), 112: (1, {'@': 337}), 113: (1, {'@': 337}), 114: (1, {'@': 337}), 115: (1, {'@': 337}), 116: (1, {'@': 337})}, 283: {90: (1, {'@': 173}), 91: (1, {'@': 173}), 20: (1, {'@': 173}), 92: (1, {'@': 173}), 93: (1, {'@': 173}), 94: (1, {'@': 173}), 96: (1, {'@': 173}), 97: (1, {'@': 173}), 98: (1, {'@': 173}), 100: (1, {'@': 173}), 101: (1, {'@': 173}), 102: (1, {'@': 173}), 37: (1, {'@': 173}), 103: (1, {'@': 173}), 89: (1, {'@': 173}), 105: (1, {'@': 173}), 106: (1, {'@': 173}), 107: (1, {'@': 173}), 108: (1, {'@': 173}), 2: (1, {'@': 173}), 109: (1, {'@': 173}), 110: (1, {'@': 173}), 88: (1, {'@': 173}), 95: (1, {'@': 173}), 87: (1, {'@': 173}), 99: (1, {'@': 173}), 104: (1, {'@': 173}), 84: (1, {'@': 173}), 18: (1, {'@': 173})}, 284: {41: (1, {'@': 285}), 34: (1, {'@': 285}), 46: (1, {'@': 285}), 58: (1, {'@': 285}), 11: (1, {'@': 285}), 36: (1, {'@': 285}), 31: (1, {'@': 285}), 77: (1, {'@': 285}), 37: (1, {'@': 285}), 84: (1, {'@': 285}), 12: (1, {'@': 285}), 64: (1, {'@': 285}), 28: (1, {'@': 285}), 9: (1, {'@': 285}), 35: (1, {'@': 285}), 83: (1, {'@': 285}), 17: (1, {'@': 285}), 38: (1, {'@': 285}), 20: (1, {'@': 285}), 76: (1, {'@': 285}), 43: (1, {'@': 285}), 61: (1, {'@': 285}), 22: (1, {'@': 285}), 30: (1, {'@': 285}), 55: (1, {'@': 285}), 14: (1, {'@': 285}), 10: (1, {'@': 285}), 54: (1, {'@': 285}), 69: (1, {'@': 285}), 5: (1, {'@': 285}), 18: (1, {'@': 285}), 80: (1, {'@': 285}), 2: (1, {'@': 285}), 50: (1, {'@': 285}), 112: (1, {'@': 285}), 113: (1, {'@': 285}), 114: (1, {'@': 285}), 115: (1, {'@': 285}), 116: (1, {'@': 285})}, 285: {41: (1, {'@': 299}), 46: (1, {'@': 299}), 11: (1, {'@': 299}), 31: (1, {'@': 299}), 77: (1, {'@': 299}), 84: (1, {'@': 299}), 83: (1, {'@': 299}), 112: (1, {'@': 299}), 61: (1, {'@': 299}), 113: (1, {'@': 299}), 55: (1, {'@': 299}), 14: (1, {'@': 299}), 69: (1, {'@': 299}), 5: (1, {'@': 299}), 80: (1, {'@': 299}), 2: (1, {'@': 299}), 34: (1, {'@': 299}), 58: (1, {'@': 299}), 36: (1, {'@': 299}), 114: (1, {'@': 299}), 37: (1, {'@': 299}), 12: (1, {'@': 299}), 64: (1, {'@': 299}), 28: (1, {'@': 299}), 35: (1, {'@': 299}), 9: (1, {'@': 299}), 17: (1, {'@': 299}), 38: (1, {'@': 299}), 20: (1, {'@': 299}), 115: (1, {'@': 299}), 76: (1, {'@': 299}), 43: (1, {'@': 299}), 22: (1, {'@': 299}), 30: (1, {'@': 299}), 54: (1, {'@': 299}), 10: (1, {'@': 299}), 18: (1, {'@': 299}), 116: (1, {'@': 299}), 50: (1, {'@': 299})}, 286: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 594), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 121: (0, 580), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 120: (0, 105), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 287: {8: (0, 155), 20: (0, 554)}, 288: {2: (0, 214), 89: (0, 555), 104: (1, {'@': 198}), 87: (1, {'@': 198})}, 289: {90: (1, {'@': 179}), 91: (1, {'@': 179}), 20: (1, {'@': 179}), 92: (1, {'@': 179}), 93: (1, {'@': 179}), 94: (1, {'@': 179}), 96: (1, {'@': 179}), 97: (1, {'@': 179}), 98: (1, {'@': 179}), 100: (1, {'@': 179}), 101: (1, {'@': 179}), 102: (1, {'@': 179}), 37: (1, {'@': 179}), 103: (1, {'@': 179}), 89: (1, {'@': 179}), 105: (1, {'@': 179}), 106: (1, {'@': 179}), 107: (1, {'@': 179}), 108: (1, {'@': 179}), 2: (1, {'@': 179}), 109: (1, {'@': 179}), 110: (1, {'@': 179}), 88: (1, {'@': 179}), 95: (1, {'@': 179}), 87: (1, {'@': 179}), 99: (1, {'@': 179}), 104: (1, {'@': 179}), 84: (1, {'@': 179}), 18: (1, {'@': 179})}, 290: {99: (0, 672), 87: (0, 665)}, 291: {90: (1, {'@': 183}), 91: (1, {'@': 183}), 20: (1, {'@': 183}), 92: (1, {'@': 183}), 93: (1, {'@': 183}), 94: (1, {'@': 183}), 96: (1, {'@': 183}), 97: (1, {'@': 183}), 98: (1, {'@': 183}), 100: (1, {'@': 183}), 101: (1, {'@': 183}), 102: (1, {'@': 183}), 37: (1, {'@': 183}), 103: (1, {'@': 183}), 89: (1, {'@': 183}), 105: (1, {'@': 183}), 106: (1, {'@': 183}), 107: (1, {'@': 183}), 108: (1, {'@': 183}), 2: (1, {'@': 183}), 109: (1, {'@': 183}), 110: (1, {'@': 183}), 88: (1, {'@': 183}), 95: (1, {'@': 183}), 87: (1, {'@': 183}), 99: (1, {'@': 183}), 104: (1, {'@': 183}), 84: (1, {'@': 183}), 18: (1, {'@': 183})}, 292: {90: (1, {'@': 189}), 91: (1, {'@': 189}), 20: (1, {'@': 189}), 92: (1, {'@': 189}), 93: (1, {'@': 189}), 94: (1, {'@': 189}), 96: (1, {'@': 189}), 97: (1, {'@': 189}), 98: (1, {'@': 189}), 100: (1, {'@': 189}), 101: (1, {'@': 189}), 102: (1, {'@': 189}), 37: (1, {'@': 189}), 103: (1, {'@': 189}), 89: (1, {'@': 189}), 105: (1, {'@': 189}), 106: (1, {'@': 189}), 107: (1, {'@': 189}), 108: (1, {'@': 189}), 2: (1, {'@': 189}), 109: (1, {'@': 189}), 110: (1, {'@': 189}), 88: (1, {'@': 189}), 95: (1, {'@': 189}), 87: (1, {'@': 189}), 99: (1, {'@': 189}), 104: (1, {'@': 189}), 84: (1, {'@': 189}), 18: (1, {'@': 189})}, 293: {2: (1, {'@': 235}), 20: (1, {'@': 235}), 89: (1, {'@': 235}), 28: (1, {'@': 235}), 104: (1, {'@': 235}), 88: (1, {'@': 235}), 95: (1, {'@': 235}), 84: (1, {'@': 235}), 18: (1, {'@': 235}), 87: (1, {'@': 235}), 99: (1, {'@': 235})}, 294: {41: (1, {'@': 243}), 34: (1, {'@': 243}), 46: (1, {'@': 243}), 58: (1, {'@': 243}), 11: (1, {'@': 243}), 36: (1, {'@': 243}), 31: (1, {'@': 243}), 77: (1, {'@': 243}), 37: (1, {'@': 243}), 84: (1, {'@': 243}), 12: (1, {'@': 243}), 64: (1, {'@': 243}), 28: (1, {'@': 243}), 9: (1, {'@': 243}), 35: (1, {'@': 243}), 83: (1, {'@': 243}), 17: (1, {'@': 243}), 38: (1, {'@': 243}), 20: (1, {'@': 243}), 76: (1, {'@': 243}), 43: (1, {'@': 243}), 61: (1, {'@': 243}), 22: (1, {'@': 243}), 30: (1, {'@': 243}), 55: (1, {'@': 243}), 14: (1, {'@': 243}), 10: (1, {'@': 243}), 54: (1, {'@': 243}), 69: (1, {'@': 243}), 5: (1, {'@': 243}), 18: (1, {'@': 243}), 80: (1, {'@': 243}), 2: (1, {'@': 243}), 50: (1, {'@': 243}), 114: (1, {'@': 243}), 115: (1, {'@': 243}), 112: (1, {'@': 243}), 113: (1, {'@': 243}), 116: (1, {'@': 243})}, 295: {20: (0, 554), 8: (0, 68), 41: (1, {'@': 109}), 34: (1, {'@': 109}), 46: (1, {'@': 109}), 58: (1, {'@': 109}), 11: (1, {'@': 109}), 36: (1, {'@': 109}), 31: (1, {'@': 109}), 77: (1, {'@': 109}), 37: (1, {'@': 109}), 84: (1, {'@': 109}), 12: (1, {'@': 109}), 64: (1, {'@': 109}), 28: (1, {'@': 109}), 9: (1, {'@': 109}), 35: (1, {'@': 109}), 83: (1, {'@': 109}), 17: (1, {'@': 109}), 38: (1, {'@': 109}), 76: (1, {'@': 109}), 43: (1, {'@': 109}), 61: (1, {'@': 109}), 22: (1, {'@': 109}), 30: (1, {'@': 109}), 55: (1, {'@': 109}), 14: (1, {'@': 109}), 10: (1, {'@': 109}), 54: (1, {'@': 109}), 69: (1, {'@': 109}), 5: (1, {'@': 109}), 18: (1, {'@': 109}), 80: (1, {'@': 109}), 2: (1, {'@': 109}), 50: (1, {'@': 109})}, 296: {27: (0, 569), 53: (0, 583), 19: (0, 8), 146: (0, 38), 62: (0, 167), 28: (0, 360), 2: (0, 464), 63: (0, 475), 83: (0, 625), 31: (0, 609), 38: (0, 250)}, 297: {104: (1, {'@': 272}), 87: (1, {'@': 272})}, 298: {}, 299: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 120: (0, 557), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 84: (0, 70), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 76: (0, 300), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 300: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 87: (0, 591), 11: (0, 522), 147: (0, 525), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 645), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 71: (0, 671), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 301: {111: (0, 552), 28: (0, 436), 90: (1, {'@': 174}), 91: (1, {'@': 174}), 20: (1, {'@': 174}), 92: (1, {'@': 174}), 93: (1, {'@': 174}), 94: (1, {'@': 174}), 96: (1, {'@': 174}), 97: (1, {'@': 174}), 98: (1, {'@': 174}), 100: (1, {'@': 174}), 101: (1, {'@': 174}), 102: (1, {'@': 174}), 37: (1, {'@': 174}), 103: (1, {'@': 174}), 89: (1, {'@': 174}), 105: (1, {'@': 174}), 106: (1, {'@': 174}), 107: (1, {'@': 174}), 108: (1, {'@': 174}), 2: (1, {'@': 174}), 109: (1, {'@': 174}), 110: (1, {'@': 174})}, 302: {8: (0, 225), 20: (0, 554), 41: (1, {'@': 103}), 34: (1, {'@': 103}), 46: (1, {'@': 103}), 58: (1, {'@': 103}), 11: (1, {'@': 103}), 36: (1, {'@': 103}), 31: (1, {'@': 103}), 77: (1, {'@': 103}), 37: (1, {'@': 103}), 84: (1, {'@': 103}), 12: (1, {'@': 103}), 64: (1, {'@': 103}), 28: (1, {'@': 103}), 9: (1, {'@': 103}), 35: (1, {'@': 103}), 83: (1, {'@': 103}), 17: (1, {'@': 103}), 38: (1, {'@': 103}), 76: (1, {'@': 103}), 43: (1, {'@': 103}), 61: (1, {'@': 103}), 22: (1, {'@': 103}), 30: (1, {'@': 103}), 55: (1, {'@': 103}), 14: (1, {'@': 103}), 10: (1, {'@': 103}), 54: (1, {'@': 103}), 69: (1, {'@': 103}), 5: (1, {'@': 103}), 18: (1, {'@': 103}), 80: (1, {'@': 103}), 2: (1, {'@': 103}), 50: (1, {'@': 103})}, 303: {41: (1, {'@': 403}), 46: (1, {'@': 403}), 11: (1, {'@': 403}), 31: (1, {'@': 403}), 77: (1, {'@': 403}), 84: (1, {'@': 403}), 83: (1, {'@': 403}), 112: (1, {'@': 403}), 61: (1, {'@': 403}), 113: (1, {'@': 403}), 55: (1, {'@': 403}), 14: (1, {'@': 403}), 69: (1, {'@': 403}), 5: (1, {'@': 403}), 80: (1, {'@': 403}), 2: (1, {'@': 403}), 34: (1, {'@': 403}), 58: (1, {'@': 403}), 36: (1, {'@': 403}), 114: (1, {'@': 403}), 37: (1, {'@': 403}), 12: (1, {'@': 403}), 64: (1, {'@': 403}), 28: (1, {'@': 403}), 35: (1, {'@': 403}), 9: (1, {'@': 403}), 17: (1, {'@': 403}), 38: (1, {'@': 403}), 20: (1, {'@': 403}), 115: (1, {'@': 403}), 76: (1, {'@': 403}), 43: (1, {'@': 403}), 22: (1, {'@': 403}), 30: (1, {'@': 403}), 54: (1, {'@': 403}), 10: (1, {'@': 403}), 18: (1, {'@': 403}), 116: (1, {'@': 403}), 50: (1, {'@': 403})}, 304: {41: (1, {'@': 329}), 34: (1, {'@': 329}), 46: (1, {'@': 329}), 58: (1, {'@': 329}), 11: (1, {'@': 329}), 36: (1, {'@': 329}), 31: (1, {'@': 329}), 77: (1, {'@': 329}), 37: (1, {'@': 329}), 84: (1, {'@': 329}), 12: (1, {'@': 329}), 64: (1, {'@': 329}), 28: (1, {'@': 329}), 9: (1, {'@': 329}), 35: (1, {'@': 329}), 83: (1, {'@': 329}), 17: (1, {'@': 329}), 38: (1, {'@': 329}), 20: (1, {'@': 329}), 76: (1, {'@': 329}), 43: (1, {'@': 329}), 61: (1, {'@': 329}), 22: (1, {'@': 329}), 30: (1, {'@': 329}), 55: (1, {'@': 329}), 14: (1, {'@': 329}), 10: (1, {'@': 329}), 54: (1, {'@': 329}), 69: (1, {'@': 329}), 5: (1, {'@': 329}), 18: (1, {'@': 329}), 80: (1, {'@': 329}), 2: (1, {'@': 329}), 50: (1, {'@': 329}), 112: (1, {'@': 329}), 113: (1, {'@': 329}), 114: (1, {'@': 329}), 115: (1, {'@': 329}), 116: (1, {'@': 329})}, 305: {106: (0, 629), 90: (1, {'@': 167}), 91: (1, {'@': 167}), 20: (1, {'@': 167}), 92: (1, {'@': 167}), 93: (1, {'@': 167}), 94: (1, {'@': 167}), 109: (1, {'@': 167}), 96: (1, {'@': 167}), 97: (1, {'@': 167}), 98: (1, {'@': 167}), 101: (1, {'@': 167}), 102: (1, {'@': 167}), 37: (1, {'@': 167}), 103: (1, {'@': 167}), 89: (1, {'@': 167}), 105: (1, {'@': 167}), 107: (1, {'@': 167}), 108: (1, {'@': 167}), 2: (1, {'@': 167}), 100: (1, {'@': 167}), 110: (1, {'@': 167}), 88: (1, {'@': 167}), 95: (1, {'@': 167}), 87: (1, {'@': 167}), 99: (1, {'@': 167}), 104: (1, {'@': 167}), 84: (1, {'@': 167}), 18: (1, {'@': 167})}, 306: {99: (0, 296), 111: (0, 550), 88: (1, {'@': 255}), 87: (1, {'@': 255})}, 307: {31: (0, 487), 126: (0, 394), 127: (0, 489), 125: (0, 206), 100: (0, 469)}, 308: {2: (0, 214), 89: (0, 555), 88: (1, {'@': 259}), 87: (1, {'@': 259})}, 309: {31: (0, 278), 133: (0, 7), 20: (0, 677), 84: (1, {'@': 399})}, 310: {20: (0, 677), 114: (1, {'@': 307}), 116: (1, {'@': 307})}, 311: {76: (0, 22), 121: (0, 378), 20: (0, 677)}, 312: {8: (0, 376), 20: (0, 554)}, 313: {20: (1, {'@': 214})}, 314: {20: (0, 677), 41: (1, {'@': 355}), 46: (1, {'@': 355}), 11: (1, {'@': 355}), 31: (1, {'@': 355}), 77: (1, {'@': 355}), 84: (1, {'@': 355}), 83: (1, {'@': 355}), 112: (1, {'@': 355}), 61: (1, {'@': 355}), 113: (1, {'@': 355}), 55: (1, {'@': 355}), 14: (1, {'@': 355}), 69: (1, {'@': 355}), 5: (1, {'@': 355}), 80: (1, {'@': 355}), 2: (1, {'@': 355}), 34: (1, {'@': 355}), 58: (1, {'@': 355}), 36: (1, {'@': 355}), 114: (1, {'@': 355}), 37: (1, {'@': 355}), 12: (1, {'@': 355}), 64: (1, {'@': 355}), 28: (1, {'@': 355}), 35: (1, {'@': 355}), 9: (1, {'@': 355}), 17: (1, {'@': 355}), 38: (1, {'@': 355}), 115: (1, {'@': 355}), 76: (1, {'@': 355}), 43: (1, {'@': 355}), 22: (1, {'@': 355}), 30: (1, {'@': 355}), 54: (1, {'@': 355}), 10: (1, {'@': 355}), 18: (1, {'@': 355}), 116: (1, {'@': 355}), 50: (1, {'@': 355})}, 315: {124: (0, 2), 31: (0, 306), 128: (0, 75), 125: (0, 139), 126: (0, 189), 127: (0, 89), 100: (0, 469), 88: (1, {'@': 254})}, 316: {99: (0, 23)}, 317: {41: (1, {'@': 294}), 34: (1, {'@': 294}), 46: (1, {'@': 294}), 58: (1, {'@': 294}), 11: (1, {'@': 294}), 36: (1, {'@': 294}), 31: (1, {'@': 294}), 77: (1, {'@': 294}), 37: (1, {'@': 294}), 84: (1, {'@': 294}), 12: (1, {'@': 294}), 64: (1, {'@': 294}), 28: (1, {'@': 294}), 9: (1, {'@': 294}), 35: (1, {'@': 294}), 83: (1, {'@': 294}), 17: (1, {'@': 294}), 38: (1, {'@': 294}), 20: (1, {'@': 294}), 76: (1, {'@': 294}), 43: (1, {'@': 294}), 61: (1, {'@': 294}), 22: (1, {'@': 294}), 30: (1, {'@': 294}), 55: (1, {'@': 294}), 14: (1, {'@': 294}), 10: (1, {'@': 294}), 54: (1, {'@': 294}), 69: (1, {'@': 294}), 5: (1, {'@': 294}), 18: (1, {'@': 294}), 80: (1, {'@': 294}), 2: (1, {'@': 294}), 50: (1, {'@': 294}), 112: (1, {'@': 294}), 113: (1, {'@': 294}), 114: (1, {'@': 294}), 115: (1, {'@': 294}), 116: (1, {'@': 294})}, 318: {41: (1, {'@': 327}), 34: (1, {'@': 327}), 46: (1, {'@': 327}), 58: (1, {'@': 327}), 11: (1, {'@': 327}), 36: (1, {'@': 327}), 31: (1, {'@': 327}), 77: (1, {'@': 327}), 37: (1, {'@': 327}), 84: (1, {'@': 327}), 12: (1, {'@': 327}), 64: (1, {'@': 327}), 28: (1, {'@': 327}), 9: (1, {'@': 327}), 35: (1, {'@': 327}), 83: (1, {'@': 327}), 17: (1, {'@': 327}), 38: (1, {'@': 327}), 20: (1, {'@': 327}), 76: (1, {'@': 327}), 43: (1, {'@': 327}), 61: (1, {'@': 327}), 22: (1, {'@': 327}), 30: (1, {'@': 327}), 55: (1, {'@': 327}), 14: (1, {'@': 327}), 10: (1, {'@': 327}), 54: (1, {'@': 327}), 69: (1, {'@': 327}), 5: (1, {'@': 327}), 18: (1, {'@': 327}), 80: (1, {'@': 327}), 2: (1, {'@': 327}), 50: (1, {'@': 327}), 112: (1, {'@': 327}), 113: (1, {'@': 327}), 114: (1, {'@': 327}), 115: (1, {'@': 327}), 116: (1, {'@': 327})}, 319: {87: (0, 1), 20: (1, {'@': 114})}, 320: {20: (1, {'@': 210})}, 321: {20: (0, 554), 8: (0, 256), 41: (1, {'@': 368}), 46: (1, {'@': 368}), 11: (1, {'@': 368}), 31: (1, {'@': 368}), 77: (1, {'@': 368}), 84: (1, {'@': 368}), 83: (1, {'@': 368}), 112: (1, {'@': 368}), 61: (1, {'@': 368}), 113: (1, {'@': 368}), 55: (1, {'@': 368}), 14: (1, {'@': 368}), 69: (1, {'@': 368}), 5: (1, {'@': 368}), 80: (1, {'@': 368}), 2: (1, {'@': 368}), 34: (1, {'@': 368}), 58: (1, {'@': 368}), 36: (1, {'@': 368}), 114: (1, {'@': 368}), 37: (1, {'@': 368}), 12: (1, {'@': 368}), 64: (1, {'@': 368}), 28: (1, {'@': 368}), 35: (1, {'@': 368}), 9: (1, {'@': 368}), 17: (1, {'@': 368}), 38: (1, {'@': 368}), 115: (1, {'@': 368}), 76: (1, {'@': 368}), 43: (1, {'@': 368}), 22: (1, {'@': 368}), 30: (1, {'@': 368}), 54: (1, {'@': 368}), 10: (1, {'@': 368}), 18: (1, {'@': 368}), 116: (1, {'@': 368}), 50: (1, {'@': 368})}, 322: {90: (1, {'@': 413}), 91: (1, {'@': 413}), 20: (1, {'@': 413}), 92: (1, {'@': 413}), 93: (1, {'@': 413}), 94: (1, {'@': 413}), 96: (1, {'@': 413}), 97: (1, {'@': 413}), 98: (1, {'@': 413}), 87: (1, {'@': 413}), 100: (1, {'@': 413}), 101: (1, {'@': 413}), 102: (1, {'@': 413}), 37: (1, {'@': 413}), 103: (1, {'@': 413}), 89: (1, {'@': 413}), 105: (1, {'@': 413}), 106: (1, {'@': 413}), 107: (1, {'@': 413}), 108: (1, {'@': 413}), 28: (1, {'@': 413}), 139: (1, {'@': 413}), 2: (1, {'@': 413}), 111: (1, {'@': 413}), 109: (1, {'@': 413}), 110: (1, {'@': 413}), 88: (1, {'@': 413}), 95: (1, {'@': 413}), 99: (1, {'@': 413}), 104: (1, {'@': 413}), 84: (1, {'@': 413}), 18: (1, {'@': 413})}, 323: {41: (1, {'@': 297}), 46: (1, {'@': 297}), 11: (1, {'@': 297}), 31: (1, {'@': 297}), 77: (1, {'@': 297}), 84: (1, {'@': 297}), 83: (1, {'@': 297}), 112: (1, {'@': 297}), 61: (1, {'@': 297}), 113: (1, {'@': 297}), 55: (1, {'@': 297}), 14: (1, {'@': 297}), 69: (1, {'@': 297}), 5: (1, {'@': 297}), 80: (1, {'@': 297}), 2: (1, {'@': 297}), 34: (1, {'@': 297}), 58: (1, {'@': 297}), 36: (1, {'@': 297}), 114: (1, {'@': 297}), 37: (1, {'@': 297}), 12: (1, {'@': 297}), 64: (1, {'@': 297}), 28: (1, {'@': 297}), 35: (1, {'@': 297}), 9: (1, {'@': 297}), 17: (1, {'@': 297}), 38: (1, {'@': 297}), 20: (1, {'@': 297}), 115: (1, {'@': 297}), 76: (1, {'@': 297}), 43: (1, {'@': 297}), 22: (1, {'@': 297}), 30: (1, {'@': 297}), 54: (1, {'@': 297}), 10: (1, {'@': 297}), 18: (1, {'@': 297}), 116: (1, {'@': 297}), 50: (1, {'@': 297})}, 324: {31: (0, 546)}, 325: {90: (1, {'@': 182}), 91: (1, {'@': 182}), 20: (1, {'@': 182}), 92: (1, {'@': 182}), 93: (1, {'@': 182}), 94: (1, {'@': 182}), 96: (1, {'@': 182}), 97: (1, {'@': 182}), 98: (1, {'@': 182}), 100: (1, {'@': 182}), 101: (1, {'@': 182}), 102: (1, {'@': 182}), 37: (1, {'@': 182}), 103: (1, {'@': 182}), 89: (1, {'@': 182}), 105: (1, {'@': 182}), 106: (1, {'@': 182}), 107: (1, {'@': 182}), 108: (1, {'@': 182}), 2: (1, {'@': 182}), 109: (1, {'@': 182}), 110: (1, {'@': 182}), 88: (1, {'@': 182}), 95: (1, {'@': 182}), 87: (1, {'@': 182}), 99: (1, {'@': 182}), 104: (1, {'@': 182}), 84: (1, {'@': 182}), 18: (1, {'@': 182})}, 326: {88: (0, 322)}, 327: {20: (0, 554), 8: (0, 273)}, 328: {99: (0, 296), 111: (0, 141)}, 329: {41: (1, {'@': 93}), 34: (1, {'@': 93}), 46: (1, {'@': 93}), 58: (1, {'@': 93}), 11: (1, {'@': 93}), 36: (1, {'@': 93}), 31: (1, {'@': 93}), 77: (1, {'@': 93}), 37: (1, {'@': 93}), 84: (1, {'@': 93}), 12: (1, {'@': 93}), 64: (1, {'@': 93}), 28: (1, {'@': 93}), 9: (1, {'@': 93}), 35: (1, {'@': 93}), 83: (1, {'@': 93}), 17: (1, {'@': 93}), 38: (1, {'@': 93}), 76: (1, {'@': 93}), 43: (1, {'@': 93}), 61: (1, {'@': 93}), 22: (1, {'@': 93}), 30: (1, {'@': 93}), 55: (1, {'@': 93}), 14: (1, {'@': 93}), 10: (1, {'@': 93}), 54: (1, {'@': 93}), 69: (1, {'@': 93}), 5: (1, {'@': 93}), 18: (1, {'@': 93}), 80: (1, {'@': 93}), 2: (1, {'@': 93}), 50: (1, {'@': 93})}, 330: {105: (0, 440), 102: (1, {'@': 151}), 90: (1, {'@': 151}), 20: (1, {'@': 151}), 92: (1, {'@': 151}), 103: (1, {'@': 151}), 89: (1, {'@': 151}), 94: (1, {'@': 151}), 107: (1, {'@': 151}), 96: (1, {'@': 151}), 108: (1, {'@': 151}), 2: (1, {'@': 151}), 110: (1, {'@': 151}), 101: (1, {'@': 151}), 88: (1, {'@': 151}), 95: (1, {'@': 151}), 87: (1, {'@': 151}), 99: (1, {'@': 151}), 104: (1, {'@': 151}), 84: (1, {'@': 151}), 18: (1, {'@': 151})}, 331: {88: (0, 610)}, 332: {104: (0, 458), 87: (0, 203)}, 333: {98: (0, 644), 37: (0, 626), 102: (1, {'@': 159}), 90: (1, {'@': 159}), 20: (1, {'@': 159}), 92: (1, {'@': 159}), 103: (1, {'@': 159}), 89: (1, {'@': 159}), 105: (1, {'@': 159}), 94: (1, {'@': 159}), 107: (1, {'@': 159}), 96: (1, {'@': 159}), 108: (1, {'@': 159}), 2: (1, {'@': 159}), 109: (1, {'@': 159}), 110: (1, {'@': 159}), 101: (1, {'@': 159}), 88: (1, {'@': 159}), 95: (1, {'@': 159}), 87: (1, {'@': 159}), 99: (1, {'@': 159}), 104: (1, {'@': 159}), 84: (1, {'@': 159}), 18: (1, {'@': 159})}, 334: {130: (0, 19), 116: (0, 35), 118: (0, 285), 114: (0, 414), 131: (0, 184), 20: (0, 677), 117: (0, 43), 41: (1, {'@': 300}), 46: (1, {'@': 300}), 11: (1, {'@': 300}), 31: (1, {'@': 300}), 77: (1, {'@': 300}), 84: (1, {'@': 300}), 83: (1, {'@': 300}), 112: (1, {'@': 300}), 61: (1, {'@': 300}), 113: (1, {'@': 300}), 55: (1, {'@': 300}), 14: (1, {'@': 300}), 69: (1, {'@': 300}), 5: (1, {'@': 300}), 80: (1, {'@': 300}), 2: (1, {'@': 300}), 34: (1, {'@': 300}), 58: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 12: (1, {'@': 300}), 64: (1, {'@': 300}), 28: (1, {'@': 300}), 35: (1, {'@': 300}), 9: (1, {'@': 300}), 17: (1, {'@': 300}), 38: (1, {'@': 300}), 115: (1, {'@': 300}), 76: (1, {'@': 300}), 43: (1, {'@': 300}), 22: (1, {'@': 300}), 30: (1, {'@': 300}), 54: (1, {'@': 300}), 10: (1, {'@': 300}), 18: (1, {'@': 300}), 50: (1, {'@': 300})}, 335: {8: (0, 477), 20: (0, 554), 41: (1, {'@': 352}), 46: (1, {'@': 352}), 11: (1, {'@': 352}), 31: (1, {'@': 352}), 77: (1, {'@': 352}), 84: (1, {'@': 352}), 83: (1, {'@': 352}), 112: (1, {'@': 352}), 61: (1, {'@': 352}), 113: (1, {'@': 352}), 55: (1, {'@': 352}), 14: (1, {'@': 352}), 69: (1, {'@': 352}), 5: (1, {'@': 352}), 80: (1, {'@': 352}), 2: (1, {'@': 352}), 34: (1, {'@': 352}), 58: (1, {'@': 352}), 36: (1, {'@': 352}), 114: (1, {'@': 352}), 37: (1, {'@': 352}), 12: (1, {'@': 352}), 64: (1, {'@': 352}), 28: (1, {'@': 352}), 35: (1, {'@': 352}), 9: (1, {'@': 352}), 17: (1, {'@': 352}), 38: (1, {'@': 352}), 115: (1, {'@': 352}), 76: (1, {'@': 352}), 43: (1, {'@': 352}), 22: (1, {'@': 352}), 30: (1, {'@': 352}), 54: (1, {'@': 352}), 10: (1, {'@': 352}), 18: (1, {'@': 352}), 116: (1, {'@': 352}), 50: (1, {'@': 352})}, 336: {20: (0, 554), 8: (0, 370)}, 337: {20: (0, 318), 41: (1, {'@': 328}), 34: (1, {'@': 328}), 46: (1, {'@': 328}), 58: (1, {'@': 328}), 11: (1, {'@': 328}), 36: (1, {'@': 328}), 31: (1, {'@': 328}), 77: (1, {'@': 328}), 37: (1, {'@': 328}), 84: (1, {'@': 328}), 12: (1, {'@': 328}), 64: (1, {'@': 328}), 28: (1, {'@': 328}), 9: (1, {'@': 328}), 35: (1, {'@': 328}), 83: (1, {'@': 328}), 17: (1, {'@': 328}), 38: (1, {'@': 328}), 76: (1, {'@': 328}), 43: (1, {'@': 328}), 61: (1, {'@': 328}), 22: (1, {'@': 328}), 30: (1, {'@': 328}), 55: (1, {'@': 328}), 14: (1, {'@': 328}), 10: (1, {'@': 328}), 54: (1, {'@': 328}), 69: (1, {'@': 328}), 5: (1, {'@': 328}), 18: (1, {'@': 328}), 80: (1, {'@': 328}), 2: (1, {'@': 328}), 50: (1, {'@': 328}), 112: (1, {'@': 328}), 113: (1, {'@': 328}), 114: (1, {'@': 328}), 115: (1, {'@': 328}), 116: (1, {'@': 328})}, 338: {41: (1, {'@': 245}), 34: (1, {'@': 245}), 46: (1, {'@': 245}), 58: (1, {'@': 245}), 11: (1, {'@': 245}), 36: (1, {'@': 245}), 31: (1, {'@': 245}), 77: (1, {'@': 245}), 37: (1, {'@': 245}), 84: (1, {'@': 245}), 12: (1, {'@': 245}), 64: (1, {'@': 245}), 28: (1, {'@': 245}), 9: (1, {'@': 245}), 35: (1, {'@': 245}), 83: (1, {'@': 245}), 17: (1, {'@': 245}), 38: (1, {'@': 245}), 20: (1, {'@': 245}), 76: (1, {'@': 245}), 43: (1, {'@': 245}), 61: (1, {'@': 245}), 22: (1, {'@': 245}), 30: (1, {'@': 245}), 55: (1, {'@': 245}), 14: (1, {'@': 245}), 10: (1, {'@': 245}), 54: (1, {'@': 245}), 69: (1, {'@': 245}), 5: (1, {'@': 245}), 18: (1, {'@': 245}), 80: (1, {'@': 245}), 2: (1, {'@': 245}), 50: (1, {'@': 245})}, 339: {20: (0, 677), 41: (1, {'@': 106}), 34: (1, {'@': 106}), 46: (1, {'@': 106}), 58: (1, {'@': 106}), 11: (1, {'@': 106}), 36: (1, {'@': 106}), 31: (1, {'@': 106}), 77: (1, {'@': 106}), 37: (1, {'@': 106}), 84: (1, {'@': 106}), 12: (1, {'@': 106}), 64: (1, {'@': 106}), 28: (1, {'@': 106}), 9: (1, {'@': 106}), 35: (1, {'@': 106}), 83: (1, {'@': 106}), 17: (1, {'@': 106}), 38: (1, {'@': 106}), 76: (1, {'@': 106}), 43: (1, {'@': 106}), 61: (1, {'@': 106}), 22: (1, {'@': 106}), 30: (1, {'@': 106}), 55: (1, {'@': 106}), 14: (1, {'@': 106}), 10: (1, {'@': 106}), 54: (1, {'@': 106}), 69: (1, {'@': 106}), 5: (1, {'@': 106}), 18: (1, {'@': 106}), 80: (1, {'@': 106}), 2: (1, {'@': 106}), 50: (1, {'@': 106})}, 340: {111: (0, 187)}, 341: {2: (0, 214), 89: (0, 555), 88: (0, 431)}, 342: {20: (0, 677), 41: (1, {'@': 82}), 34: (1, {'@': 82}), 46: (1, {'@': 82}), 58: (1, {'@': 82}), 11: (1, {'@': 82}), 36: (1, {'@': 82}), 31: (1, {'@': 82}), 77: (1, {'@': 82}), 37: (1, {'@': 82}), 84: (1, {'@': 82}), 12: (1, {'@': 82}), 64: (1, {'@': 82}), 28: (1, {'@': 82}), 35: (1, {'@': 82}), 83: (1, {'@': 82}), 17: (1, {'@': 82}), 38: (1, {'@': 82}), 76: (1, {'@': 82}), 43: (1, {'@': 82}), 61: (1, {'@': 82}), 22: (1, {'@': 82}), 30: (1, {'@': 82}), 55: (1, {'@': 82}), 14: (1, {'@': 82}), 10: (1, {'@': 82}), 54: (1, {'@': 82}), 69: (1, {'@': 82}), 5: (1, {'@': 82}), 18: (1, {'@': 82}), 80: (1, {'@': 82}), 2: (1, {'@': 82}), 50: (1, {'@': 82}), 112: (1, {'@': 82}), 113: (1, {'@': 82}), 114: (1, {'@': 82}), 9: (1, {'@': 82}), 115: (1, {'@': 82}), 116: (1, {'@': 82})}, 343: {83: (0, 46), 88: (1, {'@': 407}), 76: (1, {'@': 407}), 20: (1, {'@': 407}), 87: (1, {'@': 407})}, 344: {41: (1, {'@': 322}), 34: (1, {'@': 322}), 46: (1, {'@': 322}), 58: (1, {'@': 322}), 11: (1, {'@': 322}), 36: (1, {'@': 322}), 31: (1, {'@': 322}), 77: (1, {'@': 322}), 37: (1, {'@': 322}), 84: (1, {'@': 322}), 12: (1, {'@': 322}), 64: (1, {'@': 322}), 28: (1, {'@': 322}), 9: (1, {'@': 322}), 35: (1, {'@': 322}), 83: (1, {'@': 322}), 17: (1, {'@': 322}), 38: (1, {'@': 322}), 20: (1, {'@': 322}), 76: (1, {'@': 322}), 43: (1, {'@': 322}), 61: (1, {'@': 322}), 22: (1, {'@': 322}), 30: (1, {'@': 322}), 55: (1, {'@': 322}), 14: (1, {'@': 322}), 10: (1, {'@': 322}), 54: (1, {'@': 322}), 69: (1, {'@': 322}), 5: (1, {'@': 322}), 18: (1, {'@': 322}), 80: (1, {'@': 322}), 2: (1, {'@': 322}), 50: (1, {'@': 322}), 114: (1, {'@': 322}), 115: (1, {'@': 322}), 112: (1, {'@': 322}), 113: (1, {'@': 322}), 116: (1, {'@': 322})}, 345: {28: (0, 130)}, 346: {104: (0, 69), 87: (0, 203)}, 347: {20: (0, 554), 8: (0, 342)}, 348: {41: (1, {'@': 375}), 34: (1, {'@': 375}), 46: (1, {'@': 375}), 58: (1, {'@': 375}), 11: (1, {'@': 375}), 36: (1, {'@': 375}), 31: (1, {'@': 375}), 77: (1, {'@': 375}), 37: (1, {'@': 375}), 84: (1, {'@': 375}), 12: (1, {'@': 375}), 64: (1, {'@': 375}), 28: (1, {'@': 375}), 9: (1, {'@': 375}), 35: (1, {'@': 375}), 83: (1, {'@': 375}), 17: (1, {'@': 375}), 38: (1, {'@': 375}), 20: (1, {'@': 375}), 76: (1, {'@': 375}), 43: (1, {'@': 375}), 61: (1, {'@': 375}), 22: (1, {'@': 375}), 30: (1, {'@': 375}), 55: (1, {'@': 375}), 14: (1, {'@': 375}), 10: (1, {'@': 375}), 54: (1, {'@': 375}), 69: (1, {'@': 375}), 5: (1, {'@': 375}), 18: (1, {'@': 375}), 80: (1, {'@': 375}), 2: (1, {'@': 375}), 50: (1, {'@': 375}), 114: (1, {'@': 375}), 115: (1, {'@': 375}), 112: (1, {'@': 375}), 113: (1, {'@': 375}), 116: (1, {'@': 375})}, 349: {41: (1, {'@': 335}), 34: (1, {'@': 335}), 46: (1, {'@': 335}), 58: (1, {'@': 335}), 11: (1, {'@': 335}), 36: (1, {'@': 335}), 31: (1, {'@': 335}), 77: (1, {'@': 335}), 37: (1, {'@': 335}), 84: (1, {'@': 335}), 12: (1, {'@': 335}), 64: (1, {'@': 335}), 28: (1, {'@': 335}), 9: (1, {'@': 335}), 35: (1, {'@': 335}), 83: (1, {'@': 335}), 17: (1, {'@': 335}), 38: (1, {'@': 335}), 20: (1, {'@': 335}), 76: (1, {'@': 335}), 43: (1, {'@': 335}), 61: (1, {'@': 335}), 22: (1, {'@': 335}), 30: (1, {'@': 335}), 55: (1, {'@': 335}), 14: (1, {'@': 335}), 10: (1, {'@': 335}), 54: (1, {'@': 335}), 69: (1, {'@': 335}), 5: (1, {'@': 335}), 18: (1, {'@': 335}), 80: (1, {'@': 335}), 2: (1, {'@': 335}), 50: (1, {'@': 335}), 112: (1, {'@': 335}), 113: (1, {'@': 335}), 114: (1, {'@': 335}), 115: (1, {'@': 335}), 116: (1, {'@': 335})}, 350: {41: (1, {'@': 325}), 34: (1, {'@': 325}), 46: (1, {'@': 325}), 58: (1, {'@': 325}), 11: (1, {'@': 325}), 36: (1, {'@': 325}), 31: (1, {'@': 325}), 77: (1, {'@': 325}), 37: (1, {'@': 325}), 84: (1, {'@': 325}), 12: (1, {'@': 325}), 64: (1, {'@': 325}), 28: (1, {'@': 325}), 9: (1, {'@': 325}), 35: (1, {'@': 325}), 83: (1, {'@': 325}), 17: (1, {'@': 325}), 38: (1, {'@': 325}), 20: (1, {'@': 325}), 76: (1, {'@': 325}), 43: (1, {'@': 325}), 61: (1, {'@': 325}), 22: (1, {'@': 325}), 30: (1, {'@': 325}), 55: (1, {'@': 325}), 14: (1, {'@': 325}), 10: (1, {'@': 325}), 54: (1, {'@': 325}), 69: (1, {'@': 325}), 5: (1, {'@': 325}), 18: (1, {'@': 325}), 80: (1, {'@': 325}), 2: (1, {'@': 325}), 50: (1, {'@': 325}), 112: (1, {'@': 325}), 113: (1, {'@': 325}), 114: (1, {'@': 325}), 115: (1, {'@': 325}), 116: (1, {'@': 325})}, 351: {2: (1, {'@': 226}), 20: (1, {'@': 226}), 89: (1, {'@': 226}), 28: (1, {'@': 226}), 104: (1, {'@': 226}), 88: (1, {'@': 226}), 95: (1, {'@': 226}), 84: (1, {'@': 226}), 18: (1, {'@': 226}), 87: (1, {'@': 226}), 99: (1, {'@': 226})}, 352: {41: (1, {'@': 289}), 34: (1, {'@': 289}), 46: (1, {'@': 289}), 58: (1, {'@': 289}), 11: (1, {'@': 289}), 36: (1, {'@': 289}), 31: (1, {'@': 289}), 77: (1, {'@': 289}), 37: (1, {'@': 289}), 84: (1, {'@': 289}), 12: (1, {'@': 289}), 64: (1, {'@': 289}), 28: (1, {'@': 289}), 9: (1, {'@': 289}), 35: (1, {'@': 289}), 83: (1, {'@': 289}), 17: (1, {'@': 289}), 38: (1, {'@': 289}), 20: (1, {'@': 289}), 76: (1, {'@': 289}), 43: (1, {'@': 289}), 61: (1, {'@': 289}), 22: (1, {'@': 289}), 30: (1, {'@': 289}), 55: (1, {'@': 289}), 14: (1, {'@': 289}), 10: (1, {'@': 289}), 54: (1, {'@': 289}), 69: (1, {'@': 289}), 5: (1, {'@': 289}), 18: (1, {'@': 289}), 80: (1, {'@': 289}), 2: (1, {'@': 289}), 50: (1, {'@': 289}), 112: (1, {'@': 289}), 113: (1, {'@': 289}), 114: (1, {'@': 289}), 115: (1, {'@': 289}), 116: (1, {'@': 289})}, 353: {64: (0, 127), 2: (0, 111)}, 354: {90: (1, {'@': 422}), 91: (1, {'@': 422}), 20: (1, {'@': 422}), 92: (1, {'@': 422}), 93: (1, {'@': 422}), 94: (1, {'@': 422}), 109: (1, {'@': 422}), 96: (1, {'@': 422}), 138: (1, {'@': 422}), 97: (1, {'@': 422}), 98: (1, {'@': 422}), 87: (1, {'@': 422}), 101: (1, {'@': 422}), 102: (1, {'@': 422}), 37: (1, {'@': 422}), 103: (1, {'@': 422}), 89: (1, {'@': 422}), 105: (1, {'@': 422}), 106: (1, {'@': 422}), 107: (1, {'@': 422}), 108: (1, {'@': 422}), 28: (1, {'@': 422}), 139: (1, {'@': 422}), 2: (1, {'@': 422}), 83: (1, {'@': 422}), 111: (1, {'@': 422}), 100: (1, {'@': 422}), 110: (1, {'@': 422}), 88: (1, {'@': 422}), 99: (1, {'@': 422}), 84: (1, {'@': 422}), 95: (1, {'@': 422}), 104: (1, {'@': 422}), 18: (1, {'@': 422})}, 355: {41: (1, {'@': 288}), 34: (1, {'@': 288}), 46: (1, {'@': 288}), 58: (1, {'@': 288}), 11: (1, {'@': 288}), 36: (1, {'@': 288}), 31: (1, {'@': 288}), 77: (1, {'@': 288}), 37: (1, {'@': 288}), 84: (1, {'@': 288}), 12: (1, {'@': 288}), 64: (1, {'@': 288}), 28: (1, {'@': 288}), 9: (1, {'@': 288}), 35: (1, {'@': 288}), 83: (1, {'@': 288}), 17: (1, {'@': 288}), 38: (1, {'@': 288}), 20: (1, {'@': 288}), 76: (1, {'@': 288}), 43: (1, {'@': 288}), 61: (1, {'@': 288}), 22: (1, {'@': 288}), 30: (1, {'@': 288}), 55: (1, {'@': 288}), 14: (1, {'@': 288}), 10: (1, {'@': 288}), 54: (1, {'@': 288}), 69: (1, {'@': 288}), 5: (1, {'@': 288}), 18: (1, {'@': 288}), 80: (1, {'@': 288}), 2: (1, {'@': 288}), 50: (1, {'@': 288}), 112: (1, {'@': 288}), 113: (1, {'@': 288}), 114: (1, {'@': 288}), 115: (1, {'@': 288}), 116: (1, {'@': 288})}, 356: {109: (0, 516), 102: (1, {'@': 157}), 90: (1, {'@': 157}), 20: (1, {'@': 157}), 92: (1, {'@': 157}), 103: (1, {'@': 157}), 89: (1, {'@': 157}), 105: (1, {'@': 157}), 94: (1, {'@': 157}), 107: (1, {'@': 157}), 96: (1, {'@': 157}), 108: (1, {'@': 157}), 2: (1, {'@': 157}), 110: (1, {'@': 157}), 101: (1, {'@': 157}), 88: (1, {'@': 157}), 95: (1, {'@': 157}), 87: (1, {'@': 157}), 99: (1, {'@': 157}), 104: (1, {'@': 157}), 84: (1, {'@': 157}), 18: (1, {'@': 157})}, 357: {2: (1, {'@': 223}), 20: (1, {'@': 223}), 89: (1, {'@': 223}), 28: (1, {'@': 223}), 104: (1, {'@': 223}), 88: (1, {'@': 223}), 95: (1, {'@': 223}), 84: (1, {'@': 223}), 18: (1, {'@': 223}), 87: (1, {'@': 223}), 99: (1, {'@': 223})}, 358: {20: (0, 677), 41: (1, {'@': 112}), 34: (1, {'@': 112}), 46: (1, {'@': 112}), 58: (1, {'@': 112}), 11: (1, {'@': 112}), 36: (1, {'@': 112}), 31: (1, {'@': 112}), 77: (1, {'@': 112}), 37: (1, {'@': 112}), 84: (1, {'@': 112}), 12: (1, {'@': 112}), 64: (1, {'@': 112}), 28: (1, {'@': 112}), 9: (1, {'@': 112}), 35: (1, {'@': 112}), 83: (1, {'@': 112}), 17: (1, {'@': 112}), 38: (1, {'@': 112}), 76: (1, {'@': 112}), 43: (1, {'@': 112}), 61: (1, {'@': 112}), 22: (1, {'@': 112}), 30: (1, {'@': 112}), 55: (1, {'@': 112}), 14: (1, {'@': 112}), 10: (1, {'@': 112}), 54: (1, {'@': 112}), 69: (1, {'@': 112}), 5: (1, {'@': 112}), 18: (1, {'@': 112}), 80: (1, {'@': 112}), 2: (1, {'@': 112}), 50: (1, {'@': 112})}, 359: {20: (1, {'@': 122}), 88: (1, {'@': 122}), 95: (1, {'@': 122}), 87: (1, {'@': 122}), 99: (1, {'@': 122}), 104: (1, {'@': 122}), 89: (1, {'@': 122}), 84: (1, {'@': 122}), 18: (1, {'@': 122}), 2: (1, {'@': 122})}, 360: {27: (0, 241), 53: (0, 326), 62: (0, 167), 28: (0, 360), 63: (0, 475), 83: (0, 625), 31: (0, 609), 38: (0, 250)}, 361: {20: (0, 677), 41: (1, {'@': 110}), 34: (1, {'@': 110}), 46: (1, {'@': 110}), 58: (1, {'@': 110}), 11: (1, {'@': 110}), 36: (1, {'@': 110}), 31: (1, {'@': 110}), 77: (1, {'@': 110}), 37: (1, {'@': 110}), 84: (1, {'@': 110}), 12: (1, {'@': 110}), 64: (1, {'@': 110}), 28: (1, {'@': 110}), 9: (1, {'@': 110}), 35: (1, {'@': 110}), 83: (1, {'@': 110}), 17: (1, {'@': 110}), 38: (1, {'@': 110}), 76: (1, {'@': 110}), 43: (1, {'@': 110}), 61: (1, {'@': 110}), 22: (1, {'@': 110}), 30: (1, {'@': 110}), 55: (1, {'@': 110}), 14: (1, {'@': 110}), 10: (1, {'@': 110}), 54: (1, {'@': 110}), 69: (1, {'@': 110}), 5: (1, {'@': 110}), 18: (1, {'@': 110}), 80: (1, {'@': 110}), 2: (1, {'@': 110}), 50: (1, {'@': 110})}, 362: {41: (1, {'@': 291}), 34: (1, {'@': 291}), 46: (1, {'@': 291}), 58: (1, {'@': 291}), 11: (1, {'@': 291}), 36: (1, {'@': 291}), 31: (1, {'@': 291}), 77: (1, {'@': 291}), 37: (1, {'@': 291}), 84: (1, {'@': 291}), 12: (1, {'@': 291}), 64: (1, {'@': 291}), 28: (1, {'@': 291}), 9: (1, {'@': 291}), 35: (1, {'@': 291}), 83: (1, {'@': 291}), 17: (1, {'@': 291}), 38: (1, {'@': 291}), 20: (1, {'@': 291}), 76: (1, {'@': 291}), 43: (1, {'@': 291}), 61: (1, {'@': 291}), 22: (1, {'@': 291}), 30: (1, {'@': 291}), 55: (1, {'@': 291}), 14: (1, {'@': 291}), 10: (1, {'@': 291}), 54: (1, {'@': 291}), 69: (1, {'@': 291}), 5: (1, {'@': 291}), 18: (1, {'@': 291}), 80: (1, {'@': 291}), 2: (1, {'@': 291}), 50: (1, {'@': 291}), 112: (1, {'@': 291}), 113: (1, {'@': 291}), 114: (1, {'@': 291}), 115: (1, {'@': 291}), 116: (1, {'@': 291})}, 363: {41: (1, {'@': 296}), 34: (1, {'@': 296}), 46: (1, {'@': 296}), 58: (1, {'@': 296}), 11: (1, {'@': 296}), 36: (1, {'@': 296}), 31: (1, {'@': 296}), 77: (1, {'@': 296}), 37: (1, {'@': 296}), 84: (1, {'@': 296}), 12: (1, {'@': 296}), 64: (1, {'@': 296}), 28: (1, {'@': 296}), 9: (1, {'@': 296}), 35: (1, {'@': 296}), 83: (1, {'@': 296}), 17: (1, {'@': 296}), 38: (1, {'@': 296}), 20: (1, {'@': 296}), 76: (1, {'@': 296}), 43: (1, {'@': 296}), 61: (1, {'@': 296}), 22: (1, {'@': 296}), 30: (1, {'@': 296}), 55: (1, {'@': 296}), 14: (1, {'@': 296}), 10: (1, {'@': 296}), 54: (1, {'@': 296}), 69: (1, {'@': 296}), 5: (1, {'@': 296}), 18: (1, {'@': 296}), 80: (1, {'@': 296}), 2: (1, {'@': 296}), 50: (1, {'@': 296}), 112: (1, {'@': 296}), 113: (1, {'@': 296}), 114: (1, {'@': 296}), 115: (1, {'@': 296}), 116: (1, {'@': 296})}, 364: {2: (0, 214), 89: (0, 555), 88: (0, 286)}, 365: {41: (1, {'@': 319}), 34: (1, {'@': 319}), 46: (1, {'@': 319}), 58: (1, {'@': 319}), 11: (1, {'@': 319}), 36: (1, {'@': 319}), 31: (1, {'@': 319}), 77: (1, {'@': 319}), 37: (1, {'@': 319}), 84: (1, {'@': 319}), 12: (1, {'@': 319}), 64: (1, {'@': 319}), 28: (1, {'@': 319}), 9: (1, {'@': 319}), 35: (1, {'@': 319}), 83: (1, {'@': 319}), 17: (1, {'@': 319}), 38: (1, {'@': 319}), 20: (1, {'@': 319}), 76: (1, {'@': 319}), 43: (1, {'@': 319}), 61: (1, {'@': 319}), 22: (1, {'@': 319}), 30: (1, {'@': 319}), 55: (1, {'@': 319}), 14: (1, {'@': 319}), 10: (1, {'@': 319}), 54: (1, {'@': 319}), 69: (1, {'@': 319}), 5: (1, {'@': 319}), 18: (1, {'@': 319}), 80: (1, {'@': 319}), 2: (1, {'@': 319}), 50: (1, {'@': 319}), 114: (1, {'@': 319}), 115: (1, {'@': 319}), 112: (1, {'@': 319}), 113: (1, {'@': 319}), 116: (1, {'@': 319})}, 366: {87: (0, 103), 90: (1, {'@': 412}), 91: (1, {'@': 412}), 20: (1, {'@': 412}), 92: (1, {'@': 412}), 93: (1, {'@': 412}), 94: (1, {'@': 412}), 109: (1, {'@': 412}), 96: (1, {'@': 412}), 97: (1, {'@': 412}), 98: (1, {'@': 412}), 101: (1, {'@': 412}), 102: (1, {'@': 412}), 37: (1, {'@': 412}), 103: (1, {'@': 412}), 89: (1, {'@': 412}), 105: (1, {'@': 412}), 106: (1, {'@': 412}), 107: (1, {'@': 412}), 108: (1, {'@': 412}), 28: (1, {'@': 412}), 139: (1, {'@': 412}), 2: (1, {'@': 412}), 111: (1, {'@': 412}), 100: (1, {'@': 412}), 110: (1, {'@': 412}), 99: (1, {'@': 412})}, 367: {20: (0, 554), 8: (0, 485), 41: (1, {'@': 354}), 46: (1, {'@': 354}), 11: (1, {'@': 354}), 31: (1, {'@': 354}), 77: (1, {'@': 354}), 84: (1, {'@': 354}), 83: (1, {'@': 354}), 112: (1, {'@': 354}), 61: (1, {'@': 354}), 113: (1, {'@': 354}), 55: (1, {'@': 354}), 14: (1, {'@': 354}), 69: (1, {'@': 354}), 5: (1, {'@': 354}), 80: (1, {'@': 354}), 2: (1, {'@': 354}), 34: (1, {'@': 354}), 58: (1, {'@': 354}), 36: (1, {'@': 354}), 114: (1, {'@': 354}), 37: (1, {'@': 354}), 12: (1, {'@': 354}), 64: (1, {'@': 354}), 28: (1, {'@': 354}), 35: (1, {'@': 354}), 9: (1, {'@': 354}), 17: (1, {'@': 354}), 38: (1, {'@': 354}), 115: (1, {'@': 354}), 76: (1, {'@': 354}), 43: (1, {'@': 354}), 22: (1, {'@': 354}), 30: (1, {'@': 354}), 54: (1, {'@': 354}), 10: (1, {'@': 354}), 18: (1, {'@': 354}), 116: (1, {'@': 354}), 50: (1, {'@': 354})}, 368: {20: (0, 677), 41: (1, {'@': 365}), 46: (1, {'@': 365}), 11: (1, {'@': 365}), 31: (1, {'@': 365}), 77: (1, {'@': 365}), 84: (1, {'@': 365}), 83: (1, {'@': 365}), 112: (1, {'@': 365}), 61: (1, {'@': 365}), 113: (1, {'@': 365}), 55: (1, {'@': 365}), 14: (1, {'@': 365}), 69: (1, {'@': 365}), 5: (1, {'@': 365}), 80: (1, {'@': 365}), 2: (1, {'@': 365}), 34: (1, {'@': 365}), 58: (1, {'@': 365}), 36: (1, {'@': 365}), 114: (1, {'@': 365}), 37: (1, {'@': 365}), 12: (1, {'@': 365}), 64: (1, {'@': 365}), 28: (1, {'@': 365}), 35: (1, {'@': 365}), 9: (1, {'@': 365}), 17: (1, {'@': 365}), 38: (1, {'@': 365}), 115: (1, {'@': 365}), 76: (1, {'@': 365}), 43: (1, {'@': 365}), 22: (1, {'@': 365}), 30: (1, {'@': 365}), 54: (1, {'@': 365}), 10: (1, {'@': 365}), 18: (1, {'@': 365}), 116: (1, {'@': 365}), 50: (1, {'@': 365})}, 369: {8: (0, 11), 20: (0, 554)}, 370: {20: (0, 677), 41: (1, {'@': 81}), 34: (1, {'@': 81}), 46: (1, {'@': 81}), 58: (1, {'@': 81}), 11: (1, {'@': 81}), 36: (1, {'@': 81}), 31: (1, {'@': 81}), 77: (1, {'@': 81}), 37: (1, {'@': 81}), 84: (1, {'@': 81}), 12: (1, {'@': 81}), 64: (1, {'@': 81}), 28: (1, {'@': 81}), 35: (1, {'@': 81}), 83: (1, {'@': 81}), 17: (1, {'@': 81}), 38: (1, {'@': 81}), 76: (1, {'@': 81}), 43: (1, {'@': 81}), 61: (1, {'@': 81}), 22: (1, {'@': 81}), 30: (1, {'@': 81}), 55: (1, {'@': 81}), 14: (1, {'@': 81}), 10: (1, {'@': 81}), 54: (1, {'@': 81}), 69: (1, {'@': 81}), 5: (1, {'@': 81}), 18: (1, {'@': 81}), 80: (1, {'@': 81}), 2: (1, {'@': 81}), 50: (1, {'@': 81}), 112: (1, {'@': 81}), 113: (1, {'@': 81}), 114: (1, {'@': 81}), 9: (1, {'@': 81}), 115: (1, {'@': 81}), 116: (1, {'@': 81})}, 371: {20: (0, 677), 41: (1, {'@': 104}), 34: (1, {'@': 104}), 46: (1, {'@': 104}), 58: (1, {'@': 104}), 11: (1, {'@': 104}), 36: (1, {'@': 104}), 31: (1, {'@': 104}), 77: (1, {'@': 104}), 37: (1, {'@': 104}), 84: (1, {'@': 104}), 12: (1, {'@': 104}), 64: (1, {'@': 104}), 28: (1, {'@': 104}), 9: (1, {'@': 104}), 35: (1, {'@': 104}), 83: (1, {'@': 104}), 17: (1, {'@': 104}), 38: (1, {'@': 104}), 76: (1, {'@': 104}), 43: (1, {'@': 104}), 61: (1, {'@': 104}), 22: (1, {'@': 104}), 30: (1, {'@': 104}), 55: (1, {'@': 104}), 14: (1, {'@': 104}), 10: (1, {'@': 104}), 54: (1, {'@': 104}), 69: (1, {'@': 104}), 5: (1, {'@': 104}), 18: (1, {'@': 104}), 80: (1, {'@': 104}), 2: (1, {'@': 104}), 50: (1, {'@': 104})}, 372: {20: (0, 554), 8: (0, 169)}, 373: {8: (0, 384), 20: (0, 554), 41: (1, {'@': 362}), 46: (1, {'@': 362}), 11: (1, {'@': 362}), 31: (1, {'@': 362}), 77: (1, {'@': 362}), 84: (1, {'@': 362}), 83: (1, {'@': 362}), 112: (1, {'@': 362}), 61: (1, {'@': 362}), 113: (1, {'@': 362}), 55: (1, {'@': 362}), 14: (1, {'@': 362}), 69: (1, {'@': 362}), 5: (1, {'@': 362}), 80: (1, {'@': 362}), 2: (1, {'@': 362}), 34: (1, {'@': 362}), 58: (1, {'@': 362}), 36: (1, {'@': 362}), 114: (1, {'@': 362}), 37: (1, {'@': 362}), 12: (1, {'@': 362}), 64: (1, {'@': 362}), 28: (1, {'@': 362}), 35: (1, {'@': 362}), 9: (1, {'@': 362}), 17: (1, {'@': 362}), 38: (1, {'@': 362}), 115: (1, {'@': 362}), 76: (1, {'@': 362}), 43: (1, {'@': 362}), 22: (1, {'@': 362}), 30: (1, {'@': 362}), 54: (1, {'@': 362}), 10: (1, {'@': 362}), 18: (1, {'@': 362}), 116: (1, {'@': 362}), 50: (1, {'@': 362})}, 374: {8: (0, 76), 20: (0, 554), 41: (1, {'@': 370}), 46: (1, {'@': 370}), 11: (1, {'@': 370}), 31: (1, {'@': 370}), 77: (1, {'@': 370}), 84: (1, {'@': 370}), 83: (1, {'@': 370}), 112: (1, {'@': 370}), 61: (1, {'@': 370}), 113: (1, {'@': 370}), 55: (1, {'@': 370}), 14: (1, {'@': 370}), 69: (1, {'@': 370}), 5: (1, {'@': 370}), 80: (1, {'@': 370}), 2: (1, {'@': 370}), 34: (1, {'@': 370}), 58: (1, {'@': 370}), 36: (1, {'@': 370}), 114: (1, {'@': 370}), 37: (1, {'@': 370}), 12: (1, {'@': 370}), 64: (1, {'@': 370}), 28: (1, {'@': 370}), 35: (1, {'@': 370}), 9: (1, {'@': 370}), 17: (1, {'@': 370}), 38: (1, {'@': 370}), 115: (1, {'@': 370}), 76: (1, {'@': 370}), 43: (1, {'@': 370}), 22: (1, {'@': 370}), 30: (1, {'@': 370}), 54: (1, {'@': 370}), 10: (1, {'@': 370}), 18: (1, {'@': 370}), 116: (1, {'@': 370}), 50: (1, {'@': 370})}, 375: {90: (1, {'@': 181}), 91: (1, {'@': 181}), 20: (1, {'@': 181}), 92: (1, {'@': 181}), 93: (1, {'@': 181}), 94: (1, {'@': 181}), 96: (1, {'@': 181}), 97: (1, {'@': 181}), 98: (1, {'@': 181}), 100: (1, {'@': 181}), 101: (1, {'@': 181}), 102: (1, {'@': 181}), 37: (1, {'@': 181}), 103: (1, {'@': 181}), 89: (1, {'@': 181}), 105: (1, {'@': 181}), 106: (1, {'@': 181}), 107: (1, {'@': 181}), 108: (1, {'@': 181}), 2: (1, {'@': 181}), 109: (1, {'@': 181}), 110: (1, {'@': 181}), 88: (1, {'@': 181}), 95: (1, {'@': 181}), 87: (1, {'@': 181}), 99: (1, {'@': 181}), 104: (1, {'@': 181}), 84: (1, {'@': 181}), 18: (1, {'@': 181})}, 376: {20: (0, 677), 41: (1, {'@': 98}), 34: (1, {'@': 98}), 46: (1, {'@': 98}), 58: (1, {'@': 98}), 11: (1, {'@': 98}), 36: (1, {'@': 98}), 31: (1, {'@': 98}), 77: (1, {'@': 98}), 37: (1, {'@': 98}), 84: (1, {'@': 98}), 12: (1, {'@': 98}), 64: (1, {'@': 98}), 28: (1, {'@': 98}), 9: (1, {'@': 98}), 35: (1, {'@': 98}), 83: (1, {'@': 98}), 17: (1, {'@': 98}), 38: (1, {'@': 98}), 76: (1, {'@': 98}), 43: (1, {'@': 98}), 61: (1, {'@': 98}), 22: (1, {'@': 98}), 30: (1, {'@': 98}), 55: (1, {'@': 98}), 14: (1, {'@': 98}), 10: (1, {'@': 98}), 54: (1, {'@': 98}), 69: (1, {'@': 98}), 5: (1, {'@': 98}), 18: (1, {'@': 98}), 80: (1, {'@': 98}), 2: (1, {'@': 98}), 50: (1, {'@': 98})}, 377: {20: (0, 554), 8: (0, 52), 41: (1, {'@': 360}), 46: (1, {'@': 360}), 11: (1, {'@': 360}), 31: (1, {'@': 360}), 77: (1, {'@': 360}), 84: (1, {'@': 360}), 83: (1, {'@': 360}), 112: (1, {'@': 360}), 61: (1, {'@': 360}), 113: (1, {'@': 360}), 55: (1, {'@': 360}), 14: (1, {'@': 360}), 69: (1, {'@': 360}), 5: (1, {'@': 360}), 80: (1, {'@': 360}), 2: (1, {'@': 360}), 34: (1, {'@': 360}), 58: (1, {'@': 360}), 36: (1, {'@': 360}), 114: (1, {'@': 360}), 37: (1, {'@': 360}), 12: (1, {'@': 360}), 64: (1, {'@': 360}), 28: (1, {'@': 360}), 35: (1, {'@': 360}), 9: (1, {'@': 360}), 17: (1, {'@': 360}), 38: (1, {'@': 360}), 115: (1, {'@': 360}), 76: (1, {'@': 360}), 43: (1, {'@': 360}), 22: (1, {'@': 360}), 30: (1, {'@': 360}), 54: (1, {'@': 360}), 10: (1, {'@': 360}), 18: (1, {'@': 360}), 116: (1, {'@': 360}), 50: (1, {'@': 360})}, 378: {41: (1, {'@': 377}), 34: (1, {'@': 377}), 46: (1, {'@': 377}), 58: (1, {'@': 377}), 11: (1, {'@': 377}), 36: (1, {'@': 377}), 31: (1, {'@': 377}), 77: (1, {'@': 377}), 37: (1, {'@': 377}), 84: (1, {'@': 377}), 12: (1, {'@': 377}), 64: (1, {'@': 377}), 28: (1, {'@': 377}), 9: (1, {'@': 377}), 35: (1, {'@': 377}), 83: (1, {'@': 377}), 17: (1, {'@': 377}), 38: (1, {'@': 377}), 20: (1, {'@': 377}), 76: (1, {'@': 377}), 43: (1, {'@': 377}), 61: (1, {'@': 377}), 22: (1, {'@': 377}), 30: (1, {'@': 377}), 55: (1, {'@': 377}), 14: (1, {'@': 377}), 10: (1, {'@': 377}), 54: (1, {'@': 377}), 69: (1, {'@': 377}), 5: (1, {'@': 377}), 18: (1, {'@': 377}), 80: (1, {'@': 377}), 2: (1, {'@': 377}), 50: (1, {'@': 377}), 114: (1, {'@': 377}), 115: (1, {'@': 377}), 112: (1, {'@': 377}), 113: (1, {'@': 377}), 116: (1, {'@': 377})}, 379: {0: (0, 302), 1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 5: (0, 631), 6: (0, 496), 7: (0, 507), 9: (0, 407), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 22: (0, 405), 23: (0, 540), 24: (0, 295), 25: (0, 538), 26: (0, 570), 27: (0, 569), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 44: (0, 372), 45: (0, 287), 46: (0, 324), 47: (0, 264), 48: (0, 385), 50: (0, 353), 51: (0, 355), 52: (0, 482), 53: (0, 366), 54: (0, 382), 55: (0, 388), 57: (0, 312), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 65: (0, 461), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 70: (0, 159), 84: (0, 303), 71: (0, 230), 72: (0, 283), 73: (0, 409), 74: (0, 402), 75: (0, 280), 76: (0, 300), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 56: (0, 329), 81: (0, 443), 82: (0, 423), 83: (0, 625)}, 380: {41: (1, {'@': 331}), 34: (1, {'@': 331}), 46: (1, {'@': 331}), 58: (1, {'@': 331}), 11: (1, {'@': 331}), 36: (1, {'@': 331}), 31: (1, {'@': 331}), 77: (1, {'@': 331}), 37: (1, {'@': 331}), 84: (1, {'@': 331}), 12: (1, {'@': 331}), 64: (1, {'@': 331}), 28: (1, {'@': 331}), 9: (1, {'@': 331}), 35: (1, {'@': 331}), 83: (1, {'@': 331}), 17: (1, {'@': 331}), 38: (1, {'@': 331}), 20: (1, {'@': 331}), 76: (1, {'@': 331}), 43: (1, {'@': 331}), 61: (1, {'@': 331}), 22: (1, {'@': 331}), 30: (1, {'@': 331}), 55: (1, {'@': 331}), 14: (1, {'@': 331}), 10: (1, {'@': 331}), 54: (1, {'@': 331}), 69: (1, {'@': 331}), 5: (1, {'@': 331}), 18: (1, {'@': 331}), 80: (1, {'@': 331}), 2: (1, {'@': 331}), 50: (1, {'@': 331}), 112: (1, {'@': 331}), 113: (1, {'@': 331}), 114: (1, {'@': 331}), 115: (1, {'@': 331}), 116: (1, {'@': 331})}, 381: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 92), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 30: (0, 86), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 71: (0, 230), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 57: (0, 163), 53: (0, 583), 77: (0, 325), 80: (0, 375), 79: (0, 359), 83: (0, 625)}, 382: {28: (0, 58)}, 383: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 121: (0, 575), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 120: (0, 593), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 384: {20: (0, 677), 41: (1, {'@': 361}), 46: (1, {'@': 361}), 11: (1, {'@': 361}), 31: (1, {'@': 361}), 77: (1, {'@': 361}), 84: (1, {'@': 361}), 83: (1, {'@': 361}), 112: (1, {'@': 361}), 61: (1, {'@': 361}), 113: (1, {'@': 361}), 55: (1, {'@': 361}), 14: (1, {'@': 361}), 69: (1, {'@': 361}), 5: (1, {'@': 361}), 80: (1, {'@': 361}), 2: (1, {'@': 361}), 34: (1, {'@': 361}), 58: (1, {'@': 361}), 36: (1, {'@': 361}), 114: (1, {'@': 361}), 37: (1, {'@': 361}), 12: (1, {'@': 361}), 64: (1, {'@': 361}), 28: (1, {'@': 361}), 35: (1, {'@': 361}), 9: (1, {'@': 361}), 17: (1, {'@': 361}), 38: (1, {'@': 361}), 115: (1, {'@': 361}), 76: (1, {'@': 361}), 43: (1, {'@': 361}), 22: (1, {'@': 361}), 30: (1, {'@': 361}), 54: (1, {'@': 361}), 10: (1, {'@': 361}), 18: (1, {'@': 361}), 116: (1, {'@': 361}), 50: (1, {'@': 361})}, 385: {20: (0, 554), 8: (0, 212)}, 386: {20: (0, 350), 41: (1, {'@': 326}), 34: (1, {'@': 326}), 46: (1, {'@': 326}), 58: (1, {'@': 326}), 11: (1, {'@': 326}), 36: (1, {'@': 326}), 31: (1, {'@': 326}), 77: (1, {'@': 326}), 37: (1, {'@': 326}), 84: (1, {'@': 326}), 12: (1, {'@': 326}), 64: (1, {'@': 326}), 28: (1, {'@': 326}), 9: (1, {'@': 326}), 35: (1, {'@': 326}), 83: (1, {'@': 326}), 17: (1, {'@': 326}), 38: (1, {'@': 326}), 76: (1, {'@': 326}), 43: (1, {'@': 326}), 61: (1, {'@': 326}), 22: (1, {'@': 326}), 30: (1, {'@': 326}), 55: (1, {'@': 326}), 14: (1, {'@': 326}), 10: (1, {'@': 326}), 54: (1, {'@': 326}), 69: (1, {'@': 326}), 5: (1, {'@': 326}), 18: (1, {'@': 326}), 80: (1, {'@': 326}), 2: (1, {'@': 326}), 50: (1, {'@': 326}), 112: (1, {'@': 326}), 113: (1, {'@': 326}), 114: (1, {'@': 326}), 115: (1, {'@': 326}), 116: (1, {'@': 326})}, 387: {84: (1, {'@': 202}), 87: (1, {'@': 202})}, 388: {47: (0, 264), 27: (0, 569), 2: (0, 601), 23: (0, 148), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 21: (0, 549), 40: (0, 277), 75: (0, 280), 72: (0, 283), 43: (0, 289), 41: (0, 291), 31: (0, 100), 76: (0, 300), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 389: {87: (0, 571), 88: (1, {'@': 278})}, 390: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 236}), 88: (1, {'@': 236}), 95: (1, {'@': 236}), 87: (1, {'@': 236}), 99: (1, {'@': 236}), 104: (1, {'@': 236}), 84: (1, {'@': 236}), 18: (1, {'@': 236})}, 391: {2: (0, 214), 89: (0, 555), 99: (0, 585)}, 392: {20: (0, 554), 8: (0, 410), 84: (0, 445)}, 393: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 390), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 71: (0, 176), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 394: {88: (1, {'@': 248})}, 395: {20: (0, 554), 8: (0, 463), 84: (0, 415)}, 396: {99: (0, 457)}, 397: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 205), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 104: (0, 138), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 398: {138: (0, 417), 83: (0, 565), 88: (0, 498)}, 399: {28: (0, 30)}, 400: {20: (0, 677), 41: (1, {'@': 97}), 34: (1, {'@': 97}), 46: (1, {'@': 97}), 58: (1, {'@': 97}), 11: (1, {'@': 97}), 36: (1, {'@': 97}), 31: (1, {'@': 97}), 77: (1, {'@': 97}), 37: (1, {'@': 97}), 84: (1, {'@': 97}), 12: (1, {'@': 97}), 64: (1, {'@': 97}), 28: (1, {'@': 97}), 9: (1, {'@': 97}), 35: (1, {'@': 97}), 83: (1, {'@': 97}), 17: (1, {'@': 97}), 38: (1, {'@': 97}), 76: (1, {'@': 97}), 43: (1, {'@': 97}), 61: (1, {'@': 97}), 22: (1, {'@': 97}), 30: (1, {'@': 97}), 55: (1, {'@': 97}), 14: (1, {'@': 97}), 10: (1, {'@': 97}), 54: (1, {'@': 97}), 69: (1, {'@': 97}), 5: (1, {'@': 97}), 18: (1, {'@': 97}), 80: (1, {'@': 97}), 2: (1, {'@': 97}), 50: (1, {'@': 97})}, 401: {2: (1, {'@': 231}), 20: (1, {'@': 231}), 89: (1, {'@': 231}), 28: (1, {'@': 231}), 104: (1, {'@': 231}), 88: (1, {'@': 231}), 95: (1, {'@': 231}), 84: (1, {'@': 231}), 18: (1, {'@': 231}), 87: (1, {'@': 231}), 99: (1, {'@': 231})}, 402: {20: (0, 554), 8: (0, 400)}, 403: {1: (0, 588), 2: (0, 601), 8: (0, 88), 3: (0, 604), 24: (0, 614), 4: (0, 606), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 121: (0, 113), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 120: (0, 208), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 404: {2: (0, 214), 88: (0, 156), 89: (0, 555)}, 405: {8: (0, 85), 20: (0, 554)}, 406: {28: (0, 246), 148: (0, 319), 31: (0, 486), 85: (0, 93), 86: (0, 60)}, 407: {31: (0, 236)}, 408: {27: (0, 569), 62: (0, 167), 28: (0, 360), 53: (0, 5), 63: (0, 475), 83: (0, 625), 31: (0, 609), 38: (0, 250)}, 409: {20: (0, 554), 8: (0, 358), 41: (1, {'@': 113}), 34: (1, {'@': 113}), 46: (1, {'@': 113}), 58: (1, {'@': 113}), 11: (1, {'@': 113}), 36: (1, {'@': 113}), 31: (1, {'@': 113}), 77: (1, {'@': 113}), 37: (1, {'@': 113}), 84: (1, {'@': 113}), 12: (1, {'@': 113}), 64: (1, {'@': 113}), 28: (1, {'@': 113}), 9: (1, {'@': 113}), 35: (1, {'@': 113}), 83: (1, {'@': 113}), 17: (1, {'@': 113}), 38: (1, {'@': 113}), 76: (1, {'@': 113}), 43: (1, {'@': 113}), 61: (1, {'@': 113}), 22: (1, {'@': 113}), 30: (1, {'@': 113}), 55: (1, {'@': 113}), 14: (1, {'@': 113}), 10: (1, {'@': 113}), 54: (1, {'@': 113}), 69: (1, {'@': 113}), 5: (1, {'@': 113}), 18: (1, {'@': 113}), 80: (1, {'@': 113}), 2: (1, {'@': 113}), 50: (1, {'@': 113})}, 410: {84: (0, 192), 20: (0, 677)}, 411: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 129}), 88: (1, {'@': 129}), 95: (1, {'@': 129}), 87: (1, {'@': 129}), 99: (1, {'@': 129}), 104: (1, {'@': 129}), 84: (1, {'@': 129}), 18: (1, {'@': 129})}, 412: {83: (0, 255), 88: (0, 653)}, 413: {111: (0, 83)}, 414: {28: (0, 191)}, 415: {41: (1, {'@': 390}), 34: (1, {'@': 390}), 46: (1, {'@': 390}), 58: (1, {'@': 390}), 11: (1, {'@': 390}), 36: (1, {'@': 390}), 31: (1, {'@': 390}), 77: (1, {'@': 390}), 37: (1, {'@': 390}), 84: (1, {'@': 390}), 12: (1, {'@': 390}), 64: (1, {'@': 390}), 28: (1, {'@': 390}), 9: (1, {'@': 390}), 35: (1, {'@': 390}), 83: (1, {'@': 390}), 17: (1, {'@': 390}), 38: (1, {'@': 390}), 20: (1, {'@': 390}), 76: (1, {'@': 390}), 43: (1, {'@': 390}), 61: (1, {'@': 390}), 22: (1, {'@': 390}), 30: (1, {'@': 390}), 55: (1, {'@': 390}), 14: (1, {'@': 390}), 10: (1, {'@': 390}), 54: (1, {'@': 390}), 69: (1, {'@': 390}), 5: (1, {'@': 390}), 18: (1, {'@': 390}), 80: (1, {'@': 390}), 2: (1, {'@': 390}), 50: (1, {'@': 390}), 114: (1, {'@': 390}), 115: (1, {'@': 390}), 112: (1, {'@': 390}), 113: (1, {'@': 390}), 116: (1, {'@': 390})}, 416: {83: (0, 202), 149: (0, 149), 135: (0, 61), 28: (0, 78), 38: (0, 112), 134: (0, 146), 31: (0, 221)}, 417: {31: (0, 197)}, 418: {88: (0, 171), 2: (1, {'@': 219}), 89: (1, {'@': 219}), 28: (1, {'@': 219})}, 419: {88: (0, 179), 99: (0, 296)}, 420: {2: (0, 214), 89: (0, 555), 104: (0, 185)}, 421: {31: (0, 278), 20: (0, 554), 133: (0, 143), 8: (0, 65), 84: (1, {'@': 399})}, 422: {88: (0, 147), 83: (0, 46)}, 423: {41: (1, {'@': 127}), 34: (1, {'@': 127}), 46: (1, {'@': 127}), 58: (1, {'@': 127}), 11: (1, {'@': 127}), 36: (1, {'@': 127}), 31: (1, {'@': 127}), 77: (1, {'@': 127}), 37: (1, {'@': 127}), 84: (1, {'@': 127}), 12: (1, {'@': 127}), 64: (1, {'@': 127}), 28: (1, {'@': 127}), 9: (1, {'@': 127}), 35: (1, {'@': 127}), 83: (1, {'@': 127}), 17: (1, {'@': 127}), 38: (1, {'@': 127}), 20: (1, {'@': 127}), 76: (1, {'@': 127}), 43: (1, {'@': 127}), 61: (1, {'@': 127}), 22: (1, {'@': 127}), 30: (1, {'@': 127}), 55: (1, {'@': 127}), 14: (1, {'@': 127}), 10: (1, {'@': 127}), 54: (1, {'@': 127}), 69: (1, {'@': 127}), 5: (1, {'@': 127}), 18: (1, {'@': 127}), 80: (1, {'@': 127}), 2: (1, {'@': 127}), 50: (1, {'@': 127}), 114: (1, {'@': 127}), 115: (1, {'@': 127}), 112: (1, {'@': 127}), 113: (1, {'@': 127}), 116: (1, {'@': 127})}, 424: {2: (0, 214), 89: (0, 555), 104: (1, {'@': 197}), 87: (1, {'@': 197})}, 425: {2: (0, 214), 89: (0, 555), 88: (0, 142)}, 426: {76: (0, 22), 121: (0, 193), 8: (0, 215), 20: (0, 554)}, 427: {41: (1, {'@': 378}), 34: (1, {'@': 378}), 46: (1, {'@': 378}), 58: (1, {'@': 378}), 11: (1, {'@': 378}), 36: (1, {'@': 378}), 31: (1, {'@': 378}), 77: (1, {'@': 378}), 37: (1, {'@': 378}), 84: (1, {'@': 378}), 12: (1, {'@': 378}), 64: (1, {'@': 378}), 28: (1, {'@': 378}), 9: (1, {'@': 378}), 35: (1, {'@': 378}), 83: (1, {'@': 378}), 17: (1, {'@': 378}), 38: (1, {'@': 378}), 20: (1, {'@': 378}), 76: (1, {'@': 378}), 43: (1, {'@': 378}), 61: (1, {'@': 378}), 22: (1, {'@': 378}), 30: (1, {'@': 378}), 55: (1, {'@': 378}), 14: (1, {'@': 378}), 10: (1, {'@': 378}), 54: (1, {'@': 378}), 69: (1, {'@': 378}), 5: (1, {'@': 378}), 18: (1, {'@': 378}), 80: (1, {'@': 378}), 2: (1, {'@': 378}), 50: (1, {'@': 378}), 114: (1, {'@': 378}), 115: (1, {'@': 378}), 112: (1, {'@': 378}), 113: (1, {'@': 378}), 116: (1, {'@': 378})}, 428: {41: (1, {'@': 125}), 34: (1, {'@': 125}), 46: (1, {'@': 125}), 58: (1, {'@': 125}), 11: (1, {'@': 125}), 36: (1, {'@': 125}), 31: (1, {'@': 125}), 77: (1, {'@': 125}), 37: (1, {'@': 125}), 84: (1, {'@': 125}), 12: (1, {'@': 125}), 64: (1, {'@': 125}), 28: (1, {'@': 125}), 9: (1, {'@': 125}), 35: (1, {'@': 125}), 83: (1, {'@': 125}), 17: (1, {'@': 125}), 38: (1, {'@': 125}), 20: (1, {'@': 125}), 76: (1, {'@': 125}), 43: (1, {'@': 125}), 61: (1, {'@': 125}), 22: (1, {'@': 125}), 30: (1, {'@': 125}), 55: (1, {'@': 125}), 14: (1, {'@': 125}), 10: (1, {'@': 125}), 54: (1, {'@': 125}), 69: (1, {'@': 125}), 5: (1, {'@': 125}), 18: (1, {'@': 125}), 80: (1, {'@': 125}), 2: (1, {'@': 125}), 50: (1, {'@': 125}), 114: (1, {'@': 125}), 115: (1, {'@': 125}), 112: (1, {'@': 125}), 113: (1, {'@': 125}), 116: (1, {'@': 125})}, 429: {101: (0, 667), 103: (0, 596), 2: (1, {'@': 139}), 20: (1, {'@': 139}), 89: (1, {'@': 139}), 88: (1, {'@': 139}), 95: (1, {'@': 139}), 87: (1, {'@': 139}), 99: (1, {'@': 139}), 104: (1, {'@': 139}), 84: (1, {'@': 139}), 18: (1, {'@': 139})}, 430: {88: (1, {'@': 282}), 87: (1, {'@': 282})}, 431: {41: (1, {'@': 324}), 34: (1, {'@': 324}), 46: (1, {'@': 324}), 58: (1, {'@': 324}), 11: (1, {'@': 324}), 36: (1, {'@': 324}), 31: (1, {'@': 324}), 77: (1, {'@': 324}), 37: (1, {'@': 324}), 84: (1, {'@': 324}), 12: (1, {'@': 324}), 64: (1, {'@': 324}), 28: (1, {'@': 324}), 9: (1, {'@': 324}), 35: (1, {'@': 324}), 83: (1, {'@': 324}), 17: (1, {'@': 324}), 38: (1, {'@': 324}), 20: (1, {'@': 324}), 76: (1, {'@': 324}), 43: (1, {'@': 324}), 61: (1, {'@': 324}), 22: (1, {'@': 324}), 30: (1, {'@': 324}), 55: (1, {'@': 324}), 14: (1, {'@': 324}), 10: (1, {'@': 324}), 54: (1, {'@': 324}), 69: (1, {'@': 324}), 5: (1, {'@': 324}), 18: (1, {'@': 324}), 80: (1, {'@': 324}), 2: (1, {'@': 324}), 50: (1, {'@': 324}), 114: (1, {'@': 324}), 115: (1, {'@': 324}), 112: (1, {'@': 324}), 113: (1, {'@': 324}), 116: (1, {'@': 324})}, 432: {28: (0, 646), 104: (1, {'@': 134}), 87: (1, {'@': 134}), 2: (1, {'@': 138}), 89: (1, {'@': 138})}, 433: {20: (0, 677), 41: (1, {'@': 373}), 46: (1, {'@': 373}), 11: (1, {'@': 373}), 31: (1, {'@': 373}), 77: (1, {'@': 373}), 84: (1, {'@': 373}), 83: (1, {'@': 373}), 112: (1, {'@': 373}), 61: (1, {'@': 373}), 113: (1, {'@': 373}), 55: (1, {'@': 373}), 14: (1, {'@': 373}), 69: (1, {'@': 373}), 5: (1, {'@': 373}), 80: (1, {'@': 373}), 2: (1, {'@': 373}), 34: (1, {'@': 373}), 58: (1, {'@': 373}), 36: (1, {'@': 373}), 114: (1, {'@': 373}), 37: (1, {'@': 373}), 12: (1, {'@': 373}), 64: (1, {'@': 373}), 28: (1, {'@': 373}), 35: (1, {'@': 373}), 9: (1, {'@': 373}), 17: (1, {'@': 373}), 38: (1, {'@': 373}), 115: (1, {'@': 373}), 76: (1, {'@': 373}), 43: (1, {'@': 373}), 22: (1, {'@': 373}), 30: (1, {'@': 373}), 54: (1, {'@': 373}), 10: (1, {'@': 373}), 18: (1, {'@': 373}), 116: (1, {'@': 373}), 50: (1, {'@': 373})}, 434: {2: (0, 214), 89: (0, 555), 88: (0, 254)}, 435: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 212})}, 436: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 150: (0, 67), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 151: (0, 389), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 33), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 31: (0, 243), 62: (0, 167), 63: (0, 475), 71: (0, 20), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 72: (0, 283), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 152: (0, 331), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 88: (1, {'@': 280})}, 437: {99: (0, 676), 2: (0, 214), 89: (0, 555), 104: (0, 175)}, 438: {124: (0, 2), 31: (0, 306), 125: (0, 139), 126: (0, 189), 127: (0, 89), 128: (0, 481), 100: (0, 469), 88: (1, {'@': 254})}, 439: {41: (1, {'@': 310}), 46: (1, {'@': 310}), 11: (1, {'@': 310}), 31: (1, {'@': 310}), 77: (1, {'@': 310}), 84: (1, {'@': 310}), 83: (1, {'@': 310}), 112: (1, {'@': 310}), 61: (1, {'@': 310}), 113: (1, {'@': 310}), 55: (1, {'@': 310}), 14: (1, {'@': 310}), 69: (1, {'@': 310}), 5: (1, {'@': 310}), 80: (1, {'@': 310}), 2: (1, {'@': 310}), 34: (1, {'@': 310}), 58: (1, {'@': 310}), 36: (1, {'@': 310}), 114: (1, {'@': 310}), 37: (1, {'@': 310}), 12: (1, {'@': 310}), 64: (1, {'@': 310}), 28: (1, {'@': 310}), 35: (1, {'@': 310}), 9: (1, {'@': 310}), 17: (1, {'@': 310}), 38: (1, {'@': 310}), 20: (1, {'@': 310}), 115: (1, {'@': 310}), 76: (1, {'@': 310}), 43: (1, {'@': 310}), 22: (1, {'@': 310}), 30: (1, {'@': 310}), 54: (1, {'@': 310}), 10: (1, {'@': 310}), 18: (1, {'@': 310}), 116: (1, {'@': 310}), 50: (1, {'@': 310})}, 440: {47: (0, 264), 27: (0, 569), 2: (0, 601), 7: (0, 507), 10: (0, 526), 11: (0, 522), 15: (0, 356), 28: (0, 603), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 441: {105: (0, 440), 102: (1, {'@': 152}), 90: (1, {'@': 152}), 20: (1, {'@': 152}), 92: (1, {'@': 152}), 103: (1, {'@': 152}), 89: (1, {'@': 152}), 94: (1, {'@': 152}), 107: (1, {'@': 152}), 96: (1, {'@': 152}), 108: (1, {'@': 152}), 2: (1, {'@': 152}), 110: (1, {'@': 152}), 101: (1, {'@': 152}), 88: (1, {'@': 152}), 95: (1, {'@': 152}), 87: (1, {'@': 152}), 99: (1, {'@': 152}), 104: (1, {'@': 152}), 84: (1, {'@': 152}), 18: (1, {'@': 152})}, 442: {2: (0, 214), 89: (0, 555), 88: (1, {'@': 281}), 87: (1, {'@': 281})}, 443: {20: (0, 554), 8: (0, 371)}, 444: {2: (0, 214), 104: (0, 44), 89: (0, 555), 99: (0, 397)}, 445: {41: (1, {'@': 388}), 34: (1, {'@': 388}), 46: (1, {'@': 388}), 58: (1, {'@': 388}), 11: (1, {'@': 388}), 36: (1, {'@': 388}), 31: (1, {'@': 388}), 77: (1, {'@': 388}), 37: (1, {'@': 388}), 84: (1, {'@': 388}), 12: (1, {'@': 388}), 64: (1, {'@': 388}), 28: (1, {'@': 388}), 9: (1, {'@': 388}), 35: (1, {'@': 388}), 83: (1, {'@': 388}), 17: (1, {'@': 388}), 38: (1, {'@': 388}), 20: (1, {'@': 388}), 76: (1, {'@': 388}), 43: (1, {'@': 388}), 61: (1, {'@': 388}), 22: (1, {'@': 388}), 30: (1, {'@': 388}), 55: (1, {'@': 388}), 14: (1, {'@': 388}), 10: (1, {'@': 388}), 54: (1, {'@': 388}), 69: (1, {'@': 388}), 5: (1, {'@': 388}), 18: (1, {'@': 388}), 80: (1, {'@': 388}), 2: (1, {'@': 388}), 50: (1, {'@': 388}), 114: (1, {'@': 388}), 115: (1, {'@': 388}), 112: (1, {'@': 388}), 113: (1, {'@': 388}), 116: (1, {'@': 388})}, 446: {90: (1, {'@': 169}), 91: (1, {'@': 169}), 20: (1, {'@': 169}), 92: (1, {'@': 169}), 93: (1, {'@': 169}), 94: (1, {'@': 169}), 96: (1, {'@': 169}), 97: (1, {'@': 169}), 98: (1, {'@': 169}), 100: (1, {'@': 169}), 101: (1, {'@': 169}), 102: (1, {'@': 169}), 37: (1, {'@': 169}), 103: (1, {'@': 169}), 89: (1, {'@': 169}), 105: (1, {'@': 169}), 106: (1, {'@': 169}), 107: (1, {'@': 169}), 108: (1, {'@': 169}), 2: (1, {'@': 169}), 109: (1, {'@': 169}), 110: (1, {'@': 169}), 88: (1, {'@': 169}), 95: (1, {'@': 169}), 87: (1, {'@': 169}), 99: (1, {'@': 169}), 104: (1, {'@': 169}), 84: (1, {'@': 169}), 18: (1, {'@': 169})}, 447: {2: (0, 214), 104: (0, 158), 89: (0, 555)}, 448: {20: (1, {'@': 211})}, 449: {105: (0, 440), 102: (1, {'@': 154}), 90: (1, {'@': 154}), 20: (1, {'@': 154}), 92: (1, {'@': 154}), 103: (1, {'@': 154}), 89: (1, {'@': 154}), 94: (1, {'@': 154}), 107: (1, {'@': 154}), 96: (1, {'@': 154}), 108: (1, {'@': 154}), 2: (1, {'@': 154}), 110: (1, {'@': 154}), 101: (1, {'@': 154}), 88: (1, {'@': 154}), 95: (1, {'@': 154}), 87: (1, {'@': 154}), 99: (1, {'@': 154}), 104: (1, {'@': 154}), 84: (1, {'@': 154}), 18: (1, {'@': 154})}, 450: {8: (0, 433), 20: (0, 554), 41: (1, {'@': 374}), 46: (1, {'@': 374}), 11: (1, {'@': 374}), 31: (1, {'@': 374}), 77: (1, {'@': 374}), 84: (1, {'@': 374}), 83: (1, {'@': 374}), 112: (1, {'@': 374}), 61: (1, {'@': 374}), 113: (1, {'@': 374}), 55: (1, {'@': 374}), 14: (1, {'@': 374}), 69: (1, {'@': 374}), 5: (1, {'@': 374}), 80: (1, {'@': 374}), 2: (1, {'@': 374}), 34: (1, {'@': 374}), 58: (1, {'@': 374}), 36: (1, {'@': 374}), 114: (1, {'@': 374}), 37: (1, {'@': 374}), 12: (1, {'@': 374}), 64: (1, {'@': 374}), 28: (1, {'@': 374}), 35: (1, {'@': 374}), 9: (1, {'@': 374}), 17: (1, {'@': 374}), 38: (1, {'@': 374}), 115: (1, {'@': 374}), 76: (1, {'@': 374}), 43: (1, {'@': 374}), 22: (1, {'@': 374}), 30: (1, {'@': 374}), 54: (1, {'@': 374}), 10: (1, {'@': 374}), 18: (1, {'@': 374}), 116: (1, {'@': 374}), 50: (1, {'@': 374})}, 451: {87: (0, 140), 20: (1, {'@': 396}), 84: (1, {'@': 396})}, 452: {31: (0, 426), 20: (0, 554), 76: (0, 22), 8: (0, 311), 121: (0, 427)}, 453: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 32: (0, 136), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 454: {31: (0, 278), 133: (0, 102), 20: (0, 677), 87: (1, {'@': 399}), 84: (1, {'@': 399})}, 455: {93: (0, 119), 100: (0, 620), 91: (0, 664), 97: (0, 632), 90: (1, {'@': 161}), 20: (1, {'@': 161}), 92: (1, {'@': 161}), 94: (1, {'@': 161}), 96: (1, {'@': 161}), 98: (1, {'@': 161}), 101: (1, {'@': 161}), 102: (1, {'@': 161}), 37: (1, {'@': 161}), 103: (1, {'@': 161}), 89: (1, {'@': 161}), 105: (1, {'@': 161}), 107: (1, {'@': 161}), 108: (1, {'@': 161}), 2: (1, {'@': 161}), 109: (1, {'@': 161}), 110: (1, {'@': 161}), 88: (1, {'@': 161}), 95: (1, {'@': 161}), 87: (1, {'@': 161}), 99: (1, {'@': 161}), 104: (1, {'@': 161}), 84: (1, {'@': 161}), 18: (1, {'@': 161})}, 456: {20: (0, 554), 8: (0, 567), 114: (1, {'@': 302}), 116: (1, {'@': 302})}, 457: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 97), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 71: (0, 31), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 458: {90: (1, {'@': 190}), 91: (1, {'@': 190}), 20: (1, {'@': 190}), 92: (1, {'@': 190}), 93: (1, {'@': 190}), 94: (1, {'@': 190}), 96: (1, {'@': 190}), 97: (1, {'@': 190}), 98: (1, {'@': 190}), 100: (1, {'@': 190}), 101: (1, {'@': 190}), 102: (1, {'@': 190}), 37: (1, {'@': 190}), 103: (1, {'@': 190}), 89: (1, {'@': 190}), 105: (1, {'@': 190}), 106: (1, {'@': 190}), 107: (1, {'@': 190}), 108: (1, {'@': 190}), 2: (1, {'@': 190}), 109: (1, {'@': 190}), 110: (1, {'@': 190}), 88: (1, {'@': 190}), 95: (1, {'@': 190}), 87: (1, {'@': 190}), 99: (1, {'@': 190}), 104: (1, {'@': 190}), 84: (1, {'@': 190}), 18: (1, {'@': 190})}, 459: {88: (1, {'@': 277})}, 460: {88: (1, {'@': 405}), 76: (1, {'@': 405}), 20: (1, {'@': 405}), 87: (1, {'@': 405})}, 461: {20: (0, 554), 8: (0, 361), 41: (1, {'@': 111}), 34: (1, {'@': 111}), 46: (1, {'@': 111}), 58: (1, {'@': 111}), 11: (1, {'@': 111}), 36: (1, {'@': 111}), 31: (1, {'@': 111}), 77: (1, {'@': 111}), 37: (1, {'@': 111}), 84: (1, {'@': 111}), 12: (1, {'@': 111}), 64: (1, {'@': 111}), 28: (1, {'@': 111}), 9: (1, {'@': 111}), 35: (1, {'@': 111}), 83: (1, {'@': 111}), 17: (1, {'@': 111}), 38: (1, {'@': 111}), 76: (1, {'@': 111}), 43: (1, {'@': 111}), 61: (1, {'@': 111}), 22: (1, {'@': 111}), 30: (1, {'@': 111}), 55: (1, {'@': 111}), 14: (1, {'@': 111}), 10: (1, {'@': 111}), 54: (1, {'@': 111}), 69: (1, {'@': 111}), 5: (1, {'@': 111}), 18: (1, {'@': 111}), 80: (1, {'@': 111}), 2: (1, {'@': 111}), 50: (1, {'@': 111})}, 462: {76: (0, 0), 142: (0, 66), 20: (0, 677)}, 463: {84: (0, 161), 20: (0, 677)}, 464: {153: (0, 50), 31: (0, 265)}, 465: {112: (0, 617), 115: (0, 618), 145: (0, 349), 123: (0, 673), 41: (1, {'@': 336}), 34: (1, {'@': 336}), 46: (1, {'@': 336}), 58: (1, {'@': 336}), 11: (1, {'@': 336}), 36: (1, {'@': 336}), 31: (1, {'@': 336}), 77: (1, {'@': 336}), 37: (1, {'@': 336}), 84: (1, {'@': 336}), 12: (1, {'@': 336}), 64: (1, {'@': 336}), 28: (1, {'@': 336}), 9: (1, {'@': 336}), 35: (1, {'@': 336}), 83: (1, {'@': 336}), 17: (1, {'@': 336}), 38: (1, {'@': 336}), 20: (1, {'@': 336}), 76: (1, {'@': 336}), 43: (1, {'@': 336}), 61: (1, {'@': 336}), 22: (1, {'@': 336}), 30: (1, {'@': 336}), 55: (1, {'@': 336}), 14: (1, {'@': 336}), 10: (1, {'@': 336}), 54: (1, {'@': 336}), 69: (1, {'@': 336}), 5: (1, {'@': 336}), 18: (1, {'@': 336}), 80: (1, {'@': 336}), 2: (1, {'@': 336}), 50: (1, {'@': 336}), 113: (1, {'@': 336}), 114: (1, {'@': 336}), 116: (1, {'@': 336})}, 466: {88: (0, 403)}, 467: {136: (0, 559), 137: (0, 584), 104: (1, {'@': 135}), 87: (1, {'@': 135}), 90: (1, {'@': 420}), 91: (1, {'@': 420}), 92: (1, {'@': 420}), 93: (1, {'@': 420}), 94: (1, {'@': 420}), 96: (1, {'@': 420}), 138: (1, {'@': 420}), 97: (1, {'@': 420}), 98: (1, {'@': 420}), 100: (1, {'@': 420}), 101: (1, {'@': 420}), 102: (1, {'@': 420}), 37: (1, {'@': 420}), 103: (1, {'@': 420}), 89: (1, {'@': 420}), 105: (1, {'@': 420}), 106: (1, {'@': 420}), 107: (1, {'@': 420}), 108: (1, {'@': 420}), 28: (1, {'@': 420}), 2: (1, {'@': 420}), 83: (1, {'@': 420}), 109: (1, {'@': 420}), 110: (1, {'@': 420})}, 468: {47: (0, 264), 27: (0, 569), 2: (0, 601), 23: (0, 494), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 21: (0, 549), 40: (0, 277), 75: (0, 280), 72: (0, 283), 43: (0, 289), 41: (0, 291), 31: (0, 100), 76: (0, 300), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 469: {31: (0, 536)}, 470: {41: (1, {'@': 94}), 34: (1, {'@': 94}), 46: (1, {'@': 94}), 58: (1, {'@': 94}), 11: (1, {'@': 94}), 36: (1, {'@': 94}), 31: (1, {'@': 94}), 77: (1, {'@': 94}), 37: (1, {'@': 94}), 84: (1, {'@': 94}), 12: (1, {'@': 94}), 64: (1, {'@': 94}), 28: (1, {'@': 94}), 9: (1, {'@': 94}), 35: (1, {'@': 94}), 83: (1, {'@': 94}), 17: (1, {'@': 94}), 38: (1, {'@': 94}), 76: (1, {'@': 94}), 43: (1, {'@': 94}), 61: (1, {'@': 94}), 22: (1, {'@': 94}), 30: (1, {'@': 94}), 55: (1, {'@': 94}), 14: (1, {'@': 94}), 10: (1, {'@': 94}), 54: (1, {'@': 94}), 69: (1, {'@': 94}), 5: (1, {'@': 94}), 18: (1, {'@': 94}), 80: (1, {'@': 94}), 2: (1, {'@': 94}), 50: (1, {'@': 94})}, 471: {76: (0, 22), 121: (0, 14), 143: (0, 40), 129: (0, 338)}, 472: {41: (1, {'@': 75}), 34: (1, {'@': 75}), 46: (1, {'@': 75}), 58: (1, {'@': 75}), 11: (1, {'@': 75}), 36: (1, {'@': 75}), 31: (1, {'@': 75}), 77: (1, {'@': 75}), 37: (1, {'@': 75}), 84: (1, {'@': 75}), 12: (1, {'@': 75}), 64: (1, {'@': 75}), 28: (1, {'@': 75}), 35: (1, {'@': 75}), 83: (1, {'@': 75}), 17: (1, {'@': 75}), 38: (1, {'@': 75}), 76: (1, {'@': 75}), 43: (1, {'@': 75}), 61: (1, {'@': 75}), 22: (1, {'@': 75}), 30: (1, {'@': 75}), 55: (1, {'@': 75}), 14: (1, {'@': 75}), 10: (1, {'@': 75}), 54: (1, {'@': 75}), 69: (1, {'@': 75}), 5: (1, {'@': 75}), 18: (1, {'@': 75}), 80: (1, {'@': 75}), 2: (1, {'@': 75}), 50: (1, {'@': 75}), 113: (1, {'@': 75})}, 473: {88: (0, 147), 83: (0, 46)}, 474: {41: (1, {'@': 385}), 34: (1, {'@': 385}), 46: (1, {'@': 385}), 58: (1, {'@': 385}), 11: (1, {'@': 385}), 36: (1, {'@': 385}), 31: (1, {'@': 385}), 77: (1, {'@': 385}), 37: (1, {'@': 385}), 84: (1, {'@': 385}), 12: (1, {'@': 385}), 64: (1, {'@': 385}), 28: (1, {'@': 385}), 9: (1, {'@': 385}), 35: (1, {'@': 385}), 83: (1, {'@': 385}), 17: (1, {'@': 385}), 38: (1, {'@': 385}), 20: (1, {'@': 385}), 76: (1, {'@': 385}), 43: (1, {'@': 385}), 61: (1, {'@': 385}), 22: (1, {'@': 385}), 30: (1, {'@': 385}), 55: (1, {'@': 385}), 14: (1, {'@': 385}), 10: (1, {'@': 385}), 54: (1, {'@': 385}), 69: (1, {'@': 385}), 5: (1, {'@': 385}), 18: (1, {'@': 385}), 80: (1, {'@': 385}), 2: (1, {'@': 385}), 50: (1, {'@': 385}), 114: (1, {'@': 385}), 115: (1, {'@': 385}), 112: (1, {'@': 385}), 113: (1, {'@': 385}), 116: (1, {'@': 385})}, 475: {90: (1, {'@': 418}), 91: (1, {'@': 418}), 20: (1, {'@': 418}), 92: (1, {'@': 418}), 93: (1, {'@': 418}), 94: (1, {'@': 418}), 109: (1, {'@': 418}), 96: (1, {'@': 418}), 138: (1, {'@': 418}), 97: (1, {'@': 418}), 98: (1, {'@': 418}), 87: (1, {'@': 418}), 101: (1, {'@': 418}), 102: (1, {'@': 418}), 37: (1, {'@': 418}), 103: (1, {'@': 418}), 89: (1, {'@': 418}), 105: (1, {'@': 418}), 106: (1, {'@': 418}), 107: (1, {'@': 418}), 108: (1, {'@': 418}), 28: (1, {'@': 418}), 139: (1, {'@': 418}), 2: (1, {'@': 418}), 83: (1, {'@': 418}), 111: (1, {'@': 418}), 100: (1, {'@': 418}), 110: (1, {'@': 418}), 88: (1, {'@': 418}), 99: (1, {'@': 418}), 84: (1, {'@': 418}), 95: (1, {'@': 418}), 104: (1, {'@': 418}), 18: (1, {'@': 418})}, 476: {2: (1, {'@': 239}), 20: (1, {'@': 239}), 89: (1, {'@': 239}), 88: (1, {'@': 239}), 95: (1, {'@': 239}), 87: (1, {'@': 239}), 99: (1, {'@': 239}), 104: (1, {'@': 239}), 84: (1, {'@': 239}), 18: (1, {'@': 239})}, 477: {20: (0, 677), 41: (1, {'@': 351}), 46: (1, {'@': 351}), 11: (1, {'@': 351}), 31: (1, {'@': 351}), 77: (1, {'@': 351}), 84: (1, {'@': 351}), 83: (1, {'@': 351}), 112: (1, {'@': 351}), 61: (1, {'@': 351}), 113: (1, {'@': 351}), 55: (1, {'@': 351}), 14: (1, {'@': 351}), 69: (1, {'@': 351}), 5: (1, {'@': 351}), 80: (1, {'@': 351}), 2: (1, {'@': 351}), 34: (1, {'@': 351}), 58: (1, {'@': 351}), 36: (1, {'@': 351}), 114: (1, {'@': 351}), 37: (1, {'@': 351}), 12: (1, {'@': 351}), 64: (1, {'@': 351}), 28: (1, {'@': 351}), 35: (1, {'@': 351}), 9: (1, {'@': 351}), 17: (1, {'@': 351}), 38: (1, {'@': 351}), 115: (1, {'@': 351}), 76: (1, {'@': 351}), 43: (1, {'@': 351}), 22: (1, {'@': 351}), 30: (1, {'@': 351}), 54: (1, {'@': 351}), 10: (1, {'@': 351}), 18: (1, {'@': 351}), 116: (1, {'@': 351}), 50: (1, {'@': 351})}, 478: {128: (0, 21), 124: (0, 2), 31: (0, 306), 125: (0, 139), 126: (0, 189), 127: (0, 89), 100: (0, 469), 88: (1, {'@': 254})}, 479: {20: (1, {'@': 393}), 84: (1, {'@': 393}), 87: (1, {'@': 393})}, 480: {20: (0, 554), 54: (0, 64), 8: (0, 515)}, 481: {88: (0, 49)}, 482: {20: (0, 554), 8: (0, 339), 41: (1, {'@': 107}), 34: (1, {'@': 107}), 46: (1, {'@': 107}), 58: (1, {'@': 107}), 11: (1, {'@': 107}), 36: (1, {'@': 107}), 31: (1, {'@': 107}), 77: (1, {'@': 107}), 37: (1, {'@': 107}), 84: (1, {'@': 107}), 12: (1, {'@': 107}), 64: (1, {'@': 107}), 28: (1, {'@': 107}), 9: (1, {'@': 107}), 35: (1, {'@': 107}), 83: (1, {'@': 107}), 17: (1, {'@': 107}), 38: (1, {'@': 107}), 76: (1, {'@': 107}), 43: (1, {'@': 107}), 61: (1, {'@': 107}), 22: (1, {'@': 107}), 30: (1, {'@': 107}), 55: (1, {'@': 107}), 14: (1, {'@': 107}), 10: (1, {'@': 107}), 54: (1, {'@': 107}), 69: (1, {'@': 107}), 5: (1, {'@': 107}), 18: (1, {'@': 107}), 80: (1, {'@': 107}), 2: (1, {'@': 107}), 50: (1, {'@': 107})}, 483: {88: (1, {'@': 250})}, 484: {88: (0, 260)}, 485: {20: (0, 677), 41: (1, {'@': 353}), 46: (1, {'@': 353}), 11: (1, {'@': 353}), 31: (1, {'@': 353}), 77: (1, {'@': 353}), 84: (1, {'@': 353}), 83: (1, {'@': 353}), 112: (1, {'@': 353}), 61: (1, {'@': 353}), 113: (1, {'@': 353}), 55: (1, {'@': 353}), 14: (1, {'@': 353}), 69: (1, {'@': 353}), 5: (1, {'@': 353}), 80: (1, {'@': 353}), 2: (1, {'@': 353}), 34: (1, {'@': 353}), 58: (1, {'@': 353}), 36: (1, {'@': 353}), 114: (1, {'@': 353}), 37: (1, {'@': 353}), 12: (1, {'@': 353}), 64: (1, {'@': 353}), 28: (1, {'@': 353}), 35: (1, {'@': 353}), 9: (1, {'@': 353}), 17: (1, {'@': 353}), 38: (1, {'@': 353}), 115: (1, {'@': 353}), 76: (1, {'@': 353}), 43: (1, {'@': 353}), 22: (1, {'@': 353}), 30: (1, {'@': 353}), 54: (1, {'@': 353}), 10: (1, {'@': 353}), 18: (1, {'@': 353}), 116: (1, {'@': 353}), 50: (1, {'@': 353})}, 486: {83: (1, {'@': 120}), 20: (1, {'@': 120}), 87: (1, {'@': 120}), 88: (1, {'@': 120}), 132: (1, {'@': 120})}, 487: {99: (0, 296), 111: (0, 550), 88: (1, {'@': 257}), 87: (1, {'@': 257})}, 488: {20: (0, 554), 8: (0, 210), 114: (1, {'@': 304}), 116: (1, {'@': 304})}, 489: {87: (0, 96), 88: (1, {'@': 251})}, 490: {41: (1, {'@': 309}), 46: (1, {'@': 309}), 11: (1, {'@': 309}), 31: (1, {'@': 309}), 77: (1, {'@': 309}), 84: (1, {'@': 309}), 83: (1, {'@': 309}), 112: (1, {'@': 309}), 61: (1, {'@': 309}), 113: (1, {'@': 309}), 55: (1, {'@': 309}), 14: (1, {'@': 309}), 69: (1, {'@': 309}), 5: (1, {'@': 309}), 80: (1, {'@': 309}), 2: (1, {'@': 309}), 34: (1, {'@': 309}), 58: (1, {'@': 309}), 36: (1, {'@': 309}), 114: (1, {'@': 309}), 37: (1, {'@': 309}), 12: (1, {'@': 309}), 64: (1, {'@': 309}), 28: (1, {'@': 309}), 35: (1, {'@': 309}), 9: (1, {'@': 309}), 17: (1, {'@': 309}), 38: (1, {'@': 309}), 20: (1, {'@': 309}), 115: (1, {'@': 309}), 76: (1, {'@': 309}), 43: (1, {'@': 309}), 22: (1, {'@': 309}), 30: (1, {'@': 309}), 54: (1, {'@': 309}), 10: (1, {'@': 309}), 18: (1, {'@': 309}), 116: (1, {'@': 309}), 50: (1, {'@': 309})}, 491: {112: (0, 617), 122: (0, 611), 20: (0, 677), 123: (0, 548)}, 492: {41: (1, {'@': 317}), 34: (1, {'@': 317}), 46: (1, {'@': 317}), 58: (1, {'@': 317}), 11: (1, {'@': 317}), 36: (1, {'@': 317}), 31: (1, {'@': 317}), 77: (1, {'@': 317}), 37: (1, {'@': 317}), 84: (1, {'@': 317}), 12: (1, {'@': 317}), 64: (1, {'@': 317}), 28: (1, {'@': 317}), 9: (1, {'@': 317}), 35: (1, {'@': 317}), 83: (1, {'@': 317}), 17: (1, {'@': 317}), 38: (1, {'@': 317}), 20: (1, {'@': 317}), 76: (1, {'@': 317}), 43: (1, {'@': 317}), 61: (1, {'@': 317}), 22: (1, {'@': 317}), 30: (1, {'@': 317}), 55: (1, {'@': 317}), 14: (1, {'@': 317}), 10: (1, {'@': 317}), 54: (1, {'@': 317}), 69: (1, {'@': 317}), 5: (1, {'@': 317}), 18: (1, {'@': 317}), 80: (1, {'@': 317}), 2: (1, {'@': 317}), 50: (1, {'@': 317}), 114: (1, {'@': 317}), 115: (1, {'@': 317}), 112: (1, {'@': 317}), 113: (1, {'@': 317}), 116: (1, {'@': 317})}, 493: {47: (0, 264), 27: (0, 569), 2: (0, 601), 23: (0, 540), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 21: (0, 549), 40: (0, 277), 75: (0, 280), 72: (0, 283), 43: (0, 289), 41: (0, 291), 31: (0, 100), 76: (0, 300), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 13: (0, 630), 64: (0, 468), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 494: {94: (0, 153), 107: (0, 628), 102: (0, 544), 92: (0, 558), 108: (0, 576), 90: (0, 547), 96: (1, {'@': 147}), 20: (1, {'@': 147}), 103: (1, {'@': 147}), 89: (1, {'@': 147}), 2: (1, {'@': 147}), 110: (1, {'@': 147}), 101: (1, {'@': 147}), 88: (1, {'@': 147}), 104: (1, {'@': 147}), 95: (1, {'@': 147}), 84: (1, {'@': 147}), 18: (1, {'@': 147}), 87: (1, {'@': 147}), 99: (1, {'@': 147})}, 495: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 641), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 496: {2: (1, {'@': 137}), 20: (1, {'@': 137}), 89: (1, {'@': 137}), 88: (1, {'@': 137}), 95: (1, {'@': 137}), 87: (1, {'@': 137}), 99: (1, {'@': 137}), 104: (1, {'@': 137}), 84: (1, {'@': 137}), 18: (1, {'@': 137})}, 497: {87: (0, 120), 95: (0, 573), 2: (0, 214), 89: (0, 555), 99: (0, 501), 18: (0, 495), 104: (1, {'@': 194})}, 498: {90: (1, {'@': 417}), 91: (1, {'@': 417}), 20: (1, {'@': 417}), 92: (1, {'@': 417}), 93: (1, {'@': 417}), 94: (1, {'@': 417}), 109: (1, {'@': 417}), 96: (1, {'@': 417}), 138: (1, {'@': 417}), 97: (1, {'@': 417}), 98: (1, {'@': 417}), 87: (1, {'@': 417}), 101: (1, {'@': 417}), 102: (1, {'@': 417}), 37: (1, {'@': 417}), 103: (1, {'@': 417}), 89: (1, {'@': 417}), 105: (1, {'@': 417}), 106: (1, {'@': 417}), 107: (1, {'@': 417}), 108: (1, {'@': 417}), 28: (1, {'@': 417}), 139: (1, {'@': 417}), 2: (1, {'@': 417}), 83: (1, {'@': 417}), 111: (1, {'@': 417}), 100: (1, {'@': 417}), 110: (1, {'@': 417}), 88: (1, {'@': 417}), 99: (1, {'@': 417}), 84: (1, {'@': 417}), 95: (1, {'@': 417}), 104: (1, {'@': 417}), 18: (1, {'@': 417})}, 499: {1: (0, 588), 2: (0, 601), 3: (0, 604), 8: (0, 151), 24: (0, 614), 4: (0, 606), 5: (0, 631), 6: (0, 496), 7: (0, 507), 119: (0, 299), 10: (0, 526), 11: (0, 522), 147: (0, 525), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 52: (0, 579), 22: (0, 595), 28: (0, 26), 27: (0, 569), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 125), 71: (0, 108), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 87: (0, 591), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 120: (0, 472), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 75: (0, 280), 76: (0, 300), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625), 84: (1, {'@': 77})}, 500: {88: (0, 207)}, 501: {31: (0, 590), 144: (0, 592)}, 502: {41: (1, {'@': 401}), 46: (1, {'@': 401}), 11: (1, {'@': 401}), 31: (1, {'@': 401}), 77: (1, {'@': 401}), 84: (1, {'@': 401}), 83: (1, {'@': 401}), 112: (1, {'@': 401}), 61: (1, {'@': 401}), 113: (1, {'@': 401}), 55: (1, {'@': 401}), 14: (1, {'@': 401}), 69: (1, {'@': 401}), 5: (1, {'@': 401}), 80: (1, {'@': 401}), 2: (1, {'@': 401}), 34: (1, {'@': 401}), 58: (1, {'@': 401}), 36: (1, {'@': 401}), 114: (1, {'@': 401}), 37: (1, {'@': 401}), 12: (1, {'@': 401}), 64: (1, {'@': 401}), 28: (1, {'@': 401}), 35: (1, {'@': 401}), 9: (1, {'@': 401}), 17: (1, {'@': 401}), 38: (1, {'@': 401}), 20: (1, {'@': 401}), 115: (1, {'@': 401}), 76: (1, {'@': 401}), 43: (1, {'@': 401}), 22: (1, {'@': 401}), 30: (1, {'@': 401}), 54: (1, {'@': 401}), 10: (1, {'@': 401}), 18: (1, {'@': 401}), 116: (1, {'@': 401}), 50: (1, {'@': 401})}, 503: {96: (1, {'@': 143}), 20: (1, {'@': 143}), 103: (1, {'@': 143}), 89: (1, {'@': 143}), 2: (1, {'@': 143}), 110: (1, {'@': 143}), 101: (1, {'@': 143}), 88: (1, {'@': 143}), 104: (1, {'@': 143}), 95: (1, {'@': 143}), 84: (1, {'@': 143}), 18: (1, {'@': 143}), 87: (1, {'@': 143}), 99: (1, {'@': 143})}, 504: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 72), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 120: (0, 128), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 121: (0, 94), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 505: {28: (0, 534), 31: (0, 621)}, 506: {124: (0, 2), 128: (0, 500), 31: (0, 306), 125: (0, 139), 126: (0, 189), 127: (0, 89), 100: (0, 469), 88: (1, {'@': 254})}, 507: {93: (0, 119), 100: (0, 620), 91: (0, 664), 97: (0, 632), 90: (1, {'@': 160}), 20: (1, {'@': 160}), 92: (1, {'@': 160}), 94: (1, {'@': 160}), 96: (1, {'@': 160}), 98: (1, {'@': 160}), 101: (1, {'@': 160}), 102: (1, {'@': 160}), 37: (1, {'@': 160}), 103: (1, {'@': 160}), 89: (1, {'@': 160}), 105: (1, {'@': 160}), 107: (1, {'@': 160}), 108: (1, {'@': 160}), 2: (1, {'@': 160}), 109: (1, {'@': 160}), 110: (1, {'@': 160}), 88: (1, {'@': 160}), 95: (1, {'@': 160}), 87: (1, {'@': 160}), 99: (1, {'@': 160}), 104: (1, {'@': 160}), 84: (1, {'@': 160}), 18: (1, {'@': 160})}, 508: {54: (0, 110), 20: (0, 677)}, 509: {28: (0, 137)}, 510: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 120: (0, 557), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 76: (0, 300), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625), 113: (1, {'@': 73})}, 511: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 25: (0, 538), 53: (0, 366), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 19: (0, 301), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 21: (0, 549), 81: (0, 313), 28: (0, 26), 32: (0, 435), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 77: (0, 325), 80: (0, 375), 71: (0, 77), 83: (0, 625)}, 512: {54: (0, 345), 20: (0, 677)}, 513: {28: (0, 315)}, 514: {112: (0, 617), 115: (0, 618), 123: (0, 673), 145: (0, 608), 41: (1, {'@': 346}), 34: (1, {'@': 346}), 46: (1, {'@': 346}), 58: (1, {'@': 346}), 11: (1, {'@': 346}), 36: (1, {'@': 346}), 31: (1, {'@': 346}), 77: (1, {'@': 346}), 37: (1, {'@': 346}), 84: (1, {'@': 346}), 12: (1, {'@': 346}), 64: (1, {'@': 346}), 28: (1, {'@': 346}), 9: (1, {'@': 346}), 35: (1, {'@': 346}), 83: (1, {'@': 346}), 17: (1, {'@': 346}), 38: (1, {'@': 346}), 20: (1, {'@': 346}), 76: (1, {'@': 346}), 43: (1, {'@': 346}), 61: (1, {'@': 346}), 22: (1, {'@': 346}), 30: (1, {'@': 346}), 55: (1, {'@': 346}), 14: (1, {'@': 346}), 10: (1, {'@': 346}), 54: (1, {'@': 346}), 69: (1, {'@': 346}), 5: (1, {'@': 346}), 18: (1, {'@': 346}), 80: (1, {'@': 346}), 2: (1, {'@': 346}), 50: (1, {'@': 346}), 113: (1, {'@': 346}), 114: (1, {'@': 346}), 116: (1, {'@': 346})}, 515: {20: (0, 677), 54: (0, 581)}, 516: {47: (0, 333), 27: (0, 569), 2: (0, 601), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 517: {27: (0, 569), 1: (0, 588), 47: (0, 264), 32: (0, 615), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 71: (0, 586), 83: (0, 625)}, 518: {139: (0, 623), 111: (0, 552), 28: (0, 436), 90: (1, {'@': 174}), 91: (1, {'@': 174}), 20: (1, {'@': 174}), 92: (1, {'@': 174}), 93: (1, {'@': 174}), 94: (1, {'@': 174}), 96: (1, {'@': 174}), 97: (1, {'@': 174}), 98: (1, {'@': 174}), 100: (1, {'@': 174}), 101: (1, {'@': 174}), 102: (1, {'@': 174}), 37: (1, {'@': 174}), 103: (1, {'@': 174}), 89: (1, {'@': 174}), 105: (1, {'@': 174}), 106: (1, {'@': 174}), 107: (1, {'@': 174}), 108: (1, {'@': 174}), 2: (1, {'@': 174}), 109: (1, {'@': 174}), 110: (1, {'@': 174}), 99: (1, {'@': 174})}, 519: {20: (0, 677), 41: (1, {'@': 83}), 34: (1, {'@': 83}), 46: (1, {'@': 83}), 58: (1, {'@': 83}), 11: (1, {'@': 83}), 36: (1, {'@': 83}), 31: (1, {'@': 83}), 77: (1, {'@': 83}), 37: (1, {'@': 83}), 84: (1, {'@': 83}), 12: (1, {'@': 83}), 64: (1, {'@': 83}), 28: (1, {'@': 83}), 35: (1, {'@': 83}), 83: (1, {'@': 83}), 17: (1, {'@': 83}), 38: (1, {'@': 83}), 76: (1, {'@': 83}), 43: (1, {'@': 83}), 61: (1, {'@': 83}), 22: (1, {'@': 83}), 30: (1, {'@': 83}), 55: (1, {'@': 83}), 14: (1, {'@': 83}), 10: (1, {'@': 83}), 54: (1, {'@': 83}), 69: (1, {'@': 83}), 5: (1, {'@': 83}), 18: (1, {'@': 83}), 80: (1, {'@': 83}), 2: (1, {'@': 83}), 50: (1, {'@': 83}), 112: (1, {'@': 83}), 113: (1, {'@': 83}), 114: (1, {'@': 83}), 9: (1, {'@': 83}), 115: (1, {'@': 83}), 116: (1, {'@': 83})}, 520: {28: (0, 560)}, 521: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 639), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 522: {90: (1, {'@': 180}), 91: (1, {'@': 180}), 20: (1, {'@': 180}), 92: (1, {'@': 180}), 93: (1, {'@': 180}), 94: (1, {'@': 180}), 96: (1, {'@': 180}), 97: (1, {'@': 180}), 98: (1, {'@': 180}), 100: (1, {'@': 180}), 101: (1, {'@': 180}), 102: (1, {'@': 180}), 37: (1, {'@': 180}), 103: (1, {'@': 180}), 89: (1, {'@': 180}), 105: (1, {'@': 180}), 106: (1, {'@': 180}), 107: (1, {'@': 180}), 108: (1, {'@': 180}), 2: (1, {'@': 180}), 109: (1, {'@': 180}), 110: (1, {'@': 180}), 88: (1, {'@': 180}), 95: (1, {'@': 180}), 87: (1, {'@': 180}), 99: (1, {'@': 180}), 104: (1, {'@': 180}), 84: (1, {'@': 180}), 18: (1, {'@': 180})}, 523: {8: (0, 660), 20: (0, 554)}, 524: {20: (0, 677), 41: (1, {'@': 76}), 34: (1, {'@': 76}), 46: (1, {'@': 76}), 58: (1, {'@': 76}), 11: (1, {'@': 76}), 36: (1, {'@': 76}), 31: (1, {'@': 76}), 77: (1, {'@': 76}), 37: (1, {'@': 76}), 12: (1, {'@': 76}), 64: (1, {'@': 76}), 28: (1, {'@': 76}), 35: (1, {'@': 76}), 83: (1, {'@': 76}), 17: (1, {'@': 76}), 38: (1, {'@': 76}), 76: (1, {'@': 76}), 43: (1, {'@': 76}), 61: (1, {'@': 76}), 22: (1, {'@': 76}), 30: (1, {'@': 76}), 113: (1, {'@': 76}), 55: (1, {'@': 76}), 14: (1, {'@': 76}), 10: (1, {'@': 76}), 54: (1, {'@': 76}), 69: (1, {'@': 76}), 5: (1, {'@': 76}), 18: (1, {'@': 76}), 80: (1, {'@': 76}), 2: (1, {'@': 76}), 50: (1, {'@': 76})}, 525: {87: (0, 647), 84: (0, 633)}, 526: {90: (1, {'@': 178}), 91: (1, {'@': 178}), 20: (1, {'@': 178}), 92: (1, {'@': 178}), 93: (1, {'@': 178}), 94: (1, {'@': 178}), 96: (1, {'@': 178}), 97: (1, {'@': 178}), 98: (1, {'@': 178}), 100: (1, {'@': 178}), 101: (1, {'@': 178}), 102: (1, {'@': 178}), 37: (1, {'@': 178}), 103: (1, {'@': 178}), 89: (1, {'@': 178}), 105: (1, {'@': 178}), 106: (1, {'@': 178}), 107: (1, {'@': 178}), 108: (1, {'@': 178}), 2: (1, {'@': 178}), 109: (1, {'@': 178}), 110: (1, {'@': 178}), 88: (1, {'@': 178}), 95: (1, {'@': 178}), 87: (1, {'@': 178}), 99: (1, {'@': 178}), 104: (1, {'@': 178}), 84: (1, {'@': 178}), 18: (1, {'@': 178})}, 527: {8: (0, 491), 112: (0, 617), 122: (0, 551), 20: (0, 554), 123: (0, 548)}, 528: {20: (0, 677), 41: (1, {'@': 80}), 34: (1, {'@': 80}), 46: (1, {'@': 80}), 58: (1, {'@': 80}), 11: (1, {'@': 80}), 36: (1, {'@': 80}), 31: (1, {'@': 80}), 77: (1, {'@': 80}), 37: (1, {'@': 80}), 84: (1, {'@': 80}), 12: (1, {'@': 80}), 64: (1, {'@': 80}), 28: (1, {'@': 80}), 35: (1, {'@': 80}), 83: (1, {'@': 80}), 17: (1, {'@': 80}), 38: (1, {'@': 80}), 76: (1, {'@': 80}), 43: (1, {'@': 80}), 61: (1, {'@': 80}), 22: (1, {'@': 80}), 30: (1, {'@': 80}), 55: (1, {'@': 80}), 14: (1, {'@': 80}), 10: (1, {'@': 80}), 54: (1, {'@': 80}), 69: (1, {'@': 80}), 5: (1, {'@': 80}), 18: (1, {'@': 80}), 80: (1, {'@': 80}), 2: (1, {'@': 80}), 50: (1, {'@': 80}), 112: (1, {'@': 80}), 113: (1, {'@': 80}), 114: (1, {'@': 80}), 9: (1, {'@': 80}), 115: (1, {'@': 80}), 116: (1, {'@': 80})}, 529: {31: (0, 328), 100: (0, 469), 126: (0, 483), 125: (0, 340)}, 530: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 120: (0, 37), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 121: (0, 231), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 531: {112: (0, 617), 122: (0, 514), 8: (0, 652), 20: (0, 554), 123: (0, 548)}, 532: {99: (0, 416), 142: (0, 232), 20: (0, 554), 76: (0, 0), 8: (0, 164)}, 533: {96: (1, {'@': 145}), 20: (1, {'@': 145}), 103: (1, {'@': 145}), 89: (1, {'@': 145}), 2: (1, {'@': 145}), 110: (1, {'@': 145}), 101: (1, {'@': 145}), 88: (1, {'@': 145}), 104: (1, {'@': 145}), 95: (1, {'@': 145}), 84: (1, {'@': 145}), 18: (1, {'@': 145}), 87: (1, {'@': 145}), 99: (1, {'@': 145})}, 534: {124: (0, 2), 31: (0, 306), 125: (0, 139), 126: (0, 189), 127: (0, 89), 154: (0, 259), 128: (0, 181), 100: (0, 469), 88: (1, {'@': 254})}, 535: {20: (0, 554), 8: (0, 519), 41: (1, {'@': 84}), 34: (1, {'@': 84}), 46: (1, {'@': 84}), 58: (1, {'@': 84}), 11: (1, {'@': 84}), 36: (1, {'@': 84}), 31: (1, {'@': 84}), 77: (1, {'@': 84}), 37: (1, {'@': 84}), 84: (1, {'@': 84}), 12: (1, {'@': 84}), 64: (1, {'@': 84}), 28: (1, {'@': 84}), 35: (1, {'@': 84}), 83: (1, {'@': 84}), 17: (1, {'@': 84}), 38: (1, {'@': 84}), 76: (1, {'@': 84}), 43: (1, {'@': 84}), 61: (1, {'@': 84}), 22: (1, {'@': 84}), 30: (1, {'@': 84}), 55: (1, {'@': 84}), 14: (1, {'@': 84}), 10: (1, {'@': 84}), 54: (1, {'@': 84}), 69: (1, {'@': 84}), 5: (1, {'@': 84}), 18: (1, {'@': 84}), 80: (1, {'@': 84}), 2: (1, {'@': 84}), 50: (1, {'@': 84}), 112: (1, {'@': 84}), 113: (1, {'@': 84}), 114: (1, {'@': 84}), 9: (1, {'@': 84}), 115: (1, {'@': 84}), 116: (1, {'@': 84})}, 536: {88: (1, {'@': 267})}, 537: {28: (0, 537), 135: (0, 473), 31: (0, 221)}, 538: {87: (0, 408), 111: (0, 511)}, 539: {31: (0, 419), 125: (0, 466)}, 540: {94: (0, 153), 107: (0, 628), 102: (0, 544), 92: (0, 558), 108: (0, 576), 90: (0, 547), 96: (1, {'@': 146}), 20: (1, {'@': 146}), 103: (1, {'@': 146}), 89: (1, {'@': 146}), 2: (1, {'@': 146}), 110: (1, {'@': 146}), 101: (1, {'@': 146}), 88: (1, {'@': 146}), 104: (1, {'@': 146}), 95: (1, {'@': 146}), 84: (1, {'@': 146}), 18: (1, {'@': 146}), 87: (1, {'@': 146}), 99: (1, {'@': 146})}, 541: {138: (0, 417), 83: (0, 565), 90: (1, {'@': 415}), 91: (1, {'@': 415}), 20: (1, {'@': 415}), 92: (1, {'@': 415}), 93: (1, {'@': 415}), 94: (1, {'@': 415}), 96: (1, {'@': 415}), 97: (1, {'@': 415}), 98: (1, {'@': 415}), 87: (1, {'@': 415}), 100: (1, {'@': 415}), 101: (1, {'@': 415}), 102: (1, {'@': 415}), 37: (1, {'@': 415}), 103: (1, {'@': 415}), 89: (1, {'@': 415}), 105: (1, {'@': 415}), 106: (1, {'@': 415}), 107: (1, {'@': 415}), 108: (1, {'@': 415}), 28: (1, {'@': 415}), 139: (1, {'@': 415}), 2: (1, {'@': 415}), 111: (1, {'@': 415}), 109: (1, {'@': 415}), 110: (1, {'@': 415}), 88: (1, {'@': 415}), 95: (1, {'@': 415}), 99: (1, {'@': 415}), 104: (1, {'@': 415}), 84: (1, {'@': 415}), 18: (1, {'@': 415})}, 542: {112: (0, 617), 115: (0, 618), 123: (0, 673), 145: (0, 282), 41: (1, {'@': 338}), 34: (1, {'@': 338}), 46: (1, {'@': 338}), 58: (1, {'@': 338}), 11: (1, {'@': 338}), 36: (1, {'@': 338}), 31: (1, {'@': 338}), 77: (1, {'@': 338}), 37: (1, {'@': 338}), 84: (1, {'@': 338}), 12: (1, {'@': 338}), 64: (1, {'@': 338}), 28: (1, {'@': 338}), 9: (1, {'@': 338}), 35: (1, {'@': 338}), 83: (1, {'@': 338}), 17: (1, {'@': 338}), 38: (1, {'@': 338}), 20: (1, {'@': 338}), 76: (1, {'@': 338}), 43: (1, {'@': 338}), 61: (1, {'@': 338}), 22: (1, {'@': 338}), 30: (1, {'@': 338}), 55: (1, {'@': 338}), 14: (1, {'@': 338}), 10: (1, {'@': 338}), 54: (1, {'@': 338}), 69: (1, {'@': 338}), 5: (1, {'@': 338}), 18: (1, {'@': 338}), 80: (1, {'@': 338}), 2: (1, {'@': 338}), 50: (1, {'@': 338}), 113: (1, {'@': 338}), 114: (1, {'@': 338}), 116: (1, {'@': 338})}, 543: {109: (0, 516), 102: (1, {'@': 156}), 90: (1, {'@': 156}), 20: (1, {'@': 156}), 92: (1, {'@': 156}), 103: (1, {'@': 156}), 89: (1, {'@': 156}), 105: (1, {'@': 156}), 94: (1, {'@': 156}), 107: (1, {'@': 156}), 96: (1, {'@': 156}), 108: (1, {'@': 156}), 2: (1, {'@': 156}), 110: (1, {'@': 156}), 101: (1, {'@': 156}), 88: (1, {'@': 156}), 95: (1, {'@': 156}), 87: (1, {'@': 156}), 99: (1, {'@': 156}), 104: (1, {'@': 156}), 84: (1, {'@': 156}), 18: (1, {'@': 156})}, 544: {47: (0, 264), 27: (0, 569), 2: (0, 601), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 21: (0, 441), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 545: {106: (0, 629), 90: (1, {'@': 163}), 91: (1, {'@': 163}), 20: (1, {'@': 163}), 92: (1, {'@': 163}), 93: (1, {'@': 163}), 94: (1, {'@': 163}), 109: (1, {'@': 163}), 96: (1, {'@': 163}), 97: (1, {'@': 163}), 98: (1, {'@': 163}), 101: (1, {'@': 163}), 102: (1, {'@': 163}), 37: (1, {'@': 163}), 103: (1, {'@': 163}), 89: (1, {'@': 163}), 105: (1, {'@': 163}), 107: (1, {'@': 163}), 108: (1, {'@': 163}), 2: (1, {'@': 163}), 100: (1, {'@': 163}), 110: (1, {'@': 163}), 88: (1, {'@': 163}), 95: (1, {'@': 163}), 87: (1, {'@': 163}), 99: (1, {'@': 163}), 104: (1, {'@': 163}), 84: (1, {'@': 163}), 18: (1, {'@': 163})}, 546: {76: (0, 421), 20: (0, 554), 8: (0, 238)}, 547: {47: (0, 264), 27: (0, 569), 2: (0, 601), 21: (0, 330), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 548: {41: (1, {'@': 434}), 46: (1, {'@': 434}), 11: (1, {'@': 434}), 31: (1, {'@': 434}), 77: (1, {'@': 434}), 84: (1, {'@': 434}), 83: (1, {'@': 434}), 112: (1, {'@': 434}), 61: (1, {'@': 434}), 113: (1, {'@': 434}), 55: (1, {'@': 434}), 14: (1, {'@': 434}), 69: (1, {'@': 434}), 5: (1, {'@': 434}), 80: (1, {'@': 434}), 2: (1, {'@': 434}), 34: (1, {'@': 434}), 58: (1, {'@': 434}), 36: (1, {'@': 434}), 114: (1, {'@': 434}), 37: (1, {'@': 434}), 12: (1, {'@': 434}), 64: (1, {'@': 434}), 28: (1, {'@': 434}), 35: (1, {'@': 434}), 9: (1, {'@': 434}), 17: (1, {'@': 434}), 38: (1, {'@': 434}), 20: (1, {'@': 434}), 115: (1, {'@': 434}), 76: (1, {'@': 434}), 43: (1, {'@': 434}), 22: (1, {'@': 434}), 30: (1, {'@': 434}), 54: (1, {'@': 434}), 10: (1, {'@': 434}), 18: (1, {'@': 434}), 116: (1, {'@': 434}), 50: (1, {'@': 434})}, 549: {105: (0, 440), 102: (1, {'@': 149}), 90: (1, {'@': 149}), 20: (1, {'@': 149}), 92: (1, {'@': 149}), 103: (1, {'@': 149}), 89: (1, {'@': 149}), 94: (1, {'@': 149}), 107: (1, {'@': 149}), 96: (1, {'@': 149}), 108: (1, {'@': 149}), 2: (1, {'@': 149}), 110: (1, {'@': 149}), 101: (1, {'@': 149}), 88: (1, {'@': 149}), 95: (1, {'@': 149}), 87: (1, {'@': 149}), 99: (1, {'@': 149}), 104: (1, {'@': 149}), 84: (1, {'@': 149}), 18: (1, {'@': 149})}, 550: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 308), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 71: (0, 117), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 551: {112: (0, 617), 115: (0, 618), 145: (0, 640), 123: (0, 673), 41: (1, {'@': 350}), 34: (1, {'@': 350}), 46: (1, {'@': 350}), 58: (1, {'@': 350}), 11: (1, {'@': 350}), 36: (1, {'@': 350}), 31: (1, {'@': 350}), 77: (1, {'@': 350}), 37: (1, {'@': 350}), 84: (1, {'@': 350}), 12: (1, {'@': 350}), 64: (1, {'@': 350}), 28: (1, {'@': 350}), 9: (1, {'@': 350}), 35: (1, {'@': 350}), 83: (1, {'@': 350}), 17: (1, {'@': 350}), 38: (1, {'@': 350}), 20: (1, {'@': 350}), 76: (1, {'@': 350}), 43: (1, {'@': 350}), 61: (1, {'@': 350}), 22: (1, {'@': 350}), 30: (1, {'@': 350}), 55: (1, {'@': 350}), 14: (1, {'@': 350}), 10: (1, {'@': 350}), 54: (1, {'@': 350}), 69: (1, {'@': 350}), 5: (1, {'@': 350}), 18: (1, {'@': 350}), 80: (1, {'@': 350}), 2: (1, {'@': 350}), 50: (1, {'@': 350}), 113: (1, {'@': 350}), 114: (1, {'@': 350}), 116: (1, {'@': 350})}, 552: {25: (0, 538), 53: (0, 366), 27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 19: (0, 301), 13: (0, 503), 15: (0, 543), 16: (0, 545), 21: (0, 549), 28: (0, 26), 32: (0, 636), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 75: (0, 280), 38: (0, 250), 71: (0, 320), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 76: (0, 300), 77: (0, 325), 80: (0, 375), 81: (0, 448), 83: (0, 625)}, 553: {28: (0, 453)}, 554: {41: (1, {'@': 430}), 34: (1, {'@': 430}), 46: (1, {'@': 430}), 58: (1, {'@': 430}), 11: (1, {'@': 430}), 36: (1, {'@': 430}), 31: (1, {'@': 430}), 77: (1, {'@': 430}), 37: (1, {'@': 430}), 84: (1, {'@': 430}), 12: (1, {'@': 430}), 64: (1, {'@': 430}), 28: (1, {'@': 430}), 9: (1, {'@': 430}), 35: (1, {'@': 430}), 83: (1, {'@': 430}), 17: (1, {'@': 430}), 38: (1, {'@': 430}), 20: (1, {'@': 430}), 76: (1, {'@': 430}), 43: (1, {'@': 430}), 61: (1, {'@': 430}), 22: (1, {'@': 430}), 30: (1, {'@': 430}), 55: (1, {'@': 430}), 14: (1, {'@': 430}), 10: (1, {'@': 430}), 54: (1, {'@': 430}), 69: (1, {'@': 430}), 5: (1, {'@': 430}), 18: (1, {'@': 430}), 80: (1, {'@': 430}), 2: (1, {'@': 430}), 50: (1, {'@': 430}), 116: (1, {'@': 430}), 112: (1, {'@': 430}), 113: (1, {'@': 430}), 114: (1, {'@': 430}), 115: (1, {'@': 430}), 87: (1, {'@': 430})}, 555: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 107), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 71: (0, 316), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 556: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 32: (0, 424), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 557: {41: (1, {'@': 74}), 34: (1, {'@': 74}), 46: (1, {'@': 74}), 58: (1, {'@': 74}), 11: (1, {'@': 74}), 36: (1, {'@': 74}), 31: (1, {'@': 74}), 77: (1, {'@': 74}), 37: (1, {'@': 74}), 84: (1, {'@': 74}), 12: (1, {'@': 74}), 64: (1, {'@': 74}), 28: (1, {'@': 74}), 35: (1, {'@': 74}), 83: (1, {'@': 74}), 17: (1, {'@': 74}), 38: (1, {'@': 74}), 76: (1, {'@': 74}), 43: (1, {'@': 74}), 61: (1, {'@': 74}), 22: (1, {'@': 74}), 30: (1, {'@': 74}), 55: (1, {'@': 74}), 14: (1, {'@': 74}), 10: (1, {'@': 74}), 54: (1, {'@': 74}), 69: (1, {'@': 74}), 5: (1, {'@': 74}), 18: (1, {'@': 74}), 80: (1, {'@': 74}), 2: (1, {'@': 74}), 50: (1, {'@': 74}), 113: (1, {'@': 74})}, 558: {47: (0, 264), 27: (0, 569), 2: (0, 601), 21: (0, 613), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 559: {90: (1, {'@': 428}), 91: (1, {'@': 428}), 20: (1, {'@': 428}), 92: (1, {'@': 428}), 93: (1, {'@': 428}), 94: (1, {'@': 428}), 96: (1, {'@': 428}), 97: (1, {'@': 428}), 98: (1, {'@': 428}), 100: (1, {'@': 428}), 101: (1, {'@': 428}), 102: (1, {'@': 428}), 37: (1, {'@': 428}), 103: (1, {'@': 428}), 89: (1, {'@': 428}), 105: (1, {'@': 428}), 106: (1, {'@': 428}), 107: (1, {'@': 428}), 108: (1, {'@': 428}), 2: (1, {'@': 428}), 109: (1, {'@': 428}), 110: (1, {'@': 428}), 88: (1, {'@': 428}), 95: (1, {'@': 428}), 87: (1, {'@': 428}), 99: (1, {'@': 428}), 104: (1, {'@': 428}), 84: (1, {'@': 428}), 18: (1, {'@': 428})}, 560: {155: (0, 290), 31: (0, 251)}, 561: {41: (1, {'@': 404}), 46: (1, {'@': 404}), 11: (1, {'@': 404}), 31: (1, {'@': 404}), 77: (1, {'@': 404}), 84: (1, {'@': 404}), 83: (1, {'@': 404}), 112: (1, {'@': 404}), 61: (1, {'@': 404}), 113: (1, {'@': 404}), 55: (1, {'@': 404}), 14: (1, {'@': 404}), 69: (1, {'@': 404}), 5: (1, {'@': 404}), 80: (1, {'@': 404}), 2: (1, {'@': 404}), 34: (1, {'@': 404}), 58: (1, {'@': 404}), 36: (1, {'@': 404}), 114: (1, {'@': 404}), 37: (1, {'@': 404}), 12: (1, {'@': 404}), 64: (1, {'@': 404}), 28: (1, {'@': 404}), 35: (1, {'@': 404}), 9: (1, {'@': 404}), 17: (1, {'@': 404}), 38: (1, {'@': 404}), 20: (1, {'@': 404}), 115: (1, {'@': 404}), 76: (1, {'@': 404}), 43: (1, {'@': 404}), 22: (1, {'@': 404}), 30: (1, {'@': 404}), 54: (1, {'@': 404}), 10: (1, {'@': 404}), 18: (1, {'@': 404}), 116: (1, {'@': 404}), 50: (1, {'@': 404})}, 562: {106: (0, 629), 90: (1, {'@': 166}), 91: (1, {'@': 166}), 20: (1, {'@': 166}), 92: (1, {'@': 166}), 93: (1, {'@': 166}), 94: (1, {'@': 166}), 109: (1, {'@': 166}), 96: (1, {'@': 166}), 97: (1, {'@': 166}), 98: (1, {'@': 166}), 101: (1, {'@': 166}), 102: (1, {'@': 166}), 37: (1, {'@': 166}), 103: (1, {'@': 166}), 89: (1, {'@': 166}), 105: (1, {'@': 166}), 107: (1, {'@': 166}), 108: (1, {'@': 166}), 2: (1, {'@': 166}), 100: (1, {'@': 166}), 110: (1, {'@': 166}), 88: (1, {'@': 166}), 95: (1, {'@': 166}), 87: (1, {'@': 166}), 99: (1, {'@': 166}), 104: (1, {'@': 166}), 84: (1, {'@': 166}), 18: (1, {'@': 166})}, 563: {28: (0, 252)}, 564: {41: (1, {'@': 386}), 34: (1, {'@': 386}), 46: (1, {'@': 386}), 58: (1, {'@': 386}), 11: (1, {'@': 386}), 36: (1, {'@': 386}), 31: (1, {'@': 386}), 77: (1, {'@': 386}), 37: (1, {'@': 386}), 84: (1, {'@': 386}), 12: (1, {'@': 386}), 64: (1, {'@': 386}), 28: (1, {'@': 386}), 9: (1, {'@': 386}), 35: (1, {'@': 386}), 83: (1, {'@': 386}), 17: (1, {'@': 386}), 38: (1, {'@': 386}), 20: (1, {'@': 386}), 76: (1, {'@': 386}), 43: (1, {'@': 386}), 61: (1, {'@': 386}), 22: (1, {'@': 386}), 30: (1, {'@': 386}), 55: (1, {'@': 386}), 14: (1, {'@': 386}), 10: (1, {'@': 386}), 54: (1, {'@': 386}), 69: (1, {'@': 386}), 5: (1, {'@': 386}), 18: (1, {'@': 386}), 80: (1, {'@': 386}), 2: (1, {'@': 386}), 50: (1, {'@': 386}), 114: (1, {'@': 386}), 115: (1, {'@': 386}), 112: (1, {'@': 386}), 113: (1, {'@': 386}), 116: (1, {'@': 386})}, 565: {31: (0, 354)}, 566: {90: (1, {'@': 188}), 91: (1, {'@': 188}), 20: (1, {'@': 188}), 92: (1, {'@': 188}), 93: (1, {'@': 188}), 94: (1, {'@': 188}), 96: (1, {'@': 188}), 97: (1, {'@': 188}), 98: (1, {'@': 188}), 100: (1, {'@': 188}), 101: (1, {'@': 188}), 102: (1, {'@': 188}), 37: (1, {'@': 188}), 103: (1, {'@': 188}), 89: (1, {'@': 188}), 105: (1, {'@': 188}), 106: (1, {'@': 188}), 107: (1, {'@': 188}), 108: (1, {'@': 188}), 2: (1, {'@': 188}), 109: (1, {'@': 188}), 110: (1, {'@': 188}), 88: (1, {'@': 188}), 95: (1, {'@': 188}), 87: (1, {'@': 188}), 99: (1, {'@': 188}), 104: (1, {'@': 188}), 84: (1, {'@': 188}), 18: (1, {'@': 188})}, 567: {20: (0, 677), 114: (1, {'@': 301}), 116: (1, {'@': 301})}, 568: {104: (0, 635)}, 569: {138: (0, 417), 83: (0, 565), 90: (1, {'@': 416}), 91: (1, {'@': 416}), 20: (1, {'@': 416}), 92: (1, {'@': 416}), 93: (1, {'@': 416}), 94: (1, {'@': 416}), 96: (1, {'@': 416}), 97: (1, {'@': 416}), 98: (1, {'@': 416}), 87: (1, {'@': 416}), 100: (1, {'@': 416}), 101: (1, {'@': 416}), 102: (1, {'@': 416}), 37: (1, {'@': 416}), 103: (1, {'@': 416}), 89: (1, {'@': 416}), 105: (1, {'@': 416}), 106: (1, {'@': 416}), 107: (1, {'@': 416}), 108: (1, {'@': 416}), 28: (1, {'@': 416}), 139: (1, {'@': 416}), 2: (1, {'@': 416}), 111: (1, {'@': 416}), 109: (1, {'@': 416}), 110: (1, {'@': 416}), 88: (1, {'@': 416}), 95: (1, {'@': 416}), 99: (1, {'@': 416}), 104: (1, {'@': 416}), 84: (1, {'@': 416}), 18: (1, {'@': 416})}, 570: {90: (1, {'@': 170}), 91: (1, {'@': 170}), 20: (1, {'@': 170}), 92: (1, {'@': 170}), 93: (1, {'@': 170}), 94: (1, {'@': 170}), 96: (1, {'@': 170}), 97: (1, {'@': 170}), 98: (1, {'@': 170}), 100: (1, {'@': 170}), 101: (1, {'@': 170}), 102: (1, {'@': 170}), 37: (1, {'@': 170}), 103: (1, {'@': 170}), 89: (1, {'@': 170}), 105: (1, {'@': 170}), 106: (1, {'@': 170}), 107: (1, {'@': 170}), 108: (1, {'@': 170}), 2: (1, {'@': 170}), 109: (1, {'@': 170}), 110: (1, {'@': 170}), 88: (1, {'@': 170}), 95: (1, {'@': 170}), 87: (1, {'@': 170}), 99: (1, {'@': 170}), 104: (1, {'@': 170}), 84: (1, {'@': 170}), 18: (1, {'@': 170})}, 571: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 150: (0, 67), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 151: (0, 389), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 33), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 31: (0, 243), 62: (0, 167), 63: (0, 475), 71: (0, 20), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 152: (0, 109), 83: (0, 625), 88: (1, {'@': 280})}, 572: {136: (0, 559), 137: (0, 584), 104: (1, {'@': 133}), 87: (1, {'@': 133}), 90: (1, {'@': 420}), 91: (1, {'@': 420}), 92: (1, {'@': 420}), 93: (1, {'@': 420}), 94: (1, {'@': 420}), 96: (1, {'@': 420}), 138: (1, {'@': 420}), 97: (1, {'@': 420}), 98: (1, {'@': 420}), 100: (1, {'@': 420}), 101: (1, {'@': 420}), 102: (1, {'@': 420}), 37: (1, {'@': 420}), 103: (1, {'@': 420}), 89: (1, {'@': 420}), 105: (1, {'@': 420}), 106: (1, {'@': 420}), 107: (1, {'@': 420}), 108: (1, {'@': 420}), 28: (1, {'@': 420}), 2: (1, {'@': 420}), 83: (1, {'@': 420}), 109: (1, {'@': 420}), 110: (1, {'@': 420})}, 573: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 32: (0, 655), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 574: {28: (0, 646), 104: (1, {'@': 132}), 87: (1, {'@': 132}), 2: (1, {'@': 138}), 89: (1, {'@': 138})}, 575: {8: (0, 253), 20: (0, 554), 54: (0, 563)}, 576: {47: (0, 264), 27: (0, 569), 2: (0, 601), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 21: (0, 190), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 577: {28: (0, 577), 63: (0, 475), 27: (0, 398), 62: (0, 167), 31: (0, 609)}, 578: {2: (0, 214), 88: (0, 166), 89: (0, 555)}, 579: {20: (0, 554), 8: (0, 599), 41: (1, {'@': 88}), 34: (1, {'@': 88}), 46: (1, {'@': 88}), 58: (1, {'@': 88}), 11: (1, {'@': 88}), 36: (1, {'@': 88}), 31: (1, {'@': 88}), 77: (1, {'@': 88}), 37: (1, {'@': 88}), 84: (1, {'@': 88}), 12: (1, {'@': 88}), 64: (1, {'@': 88}), 28: (1, {'@': 88}), 35: (1, {'@': 88}), 83: (1, {'@': 88}), 17: (1, {'@': 88}), 38: (1, {'@': 88}), 76: (1, {'@': 88}), 43: (1, {'@': 88}), 61: (1, {'@': 88}), 22: (1, {'@': 88}), 30: (1, {'@': 88}), 55: (1, {'@': 88}), 14: (1, {'@': 88}), 10: (1, {'@': 88}), 54: (1, {'@': 88}), 69: (1, {'@': 88}), 5: (1, {'@': 88}), 18: (1, {'@': 88}), 80: (1, {'@': 88}), 2: (1, {'@': 88}), 50: (1, {'@': 88}), 112: (1, {'@': 88}), 113: (1, {'@': 88}), 114: (1, {'@': 88}), 9: (1, {'@': 88}), 115: (1, {'@': 88}), 116: (1, {'@': 88})}, 580: {20: (0, 554), 8: (0, 648), 114: (1, {'@': 306}), 116: (1, {'@': 306})}, 581: {28: (0, 194)}, 582: {2: (1, {'@': 275}), 20: (1, {'@': 275}), 89: (1, {'@': 275}), 28: (1, {'@': 275}), 104: (1, {'@': 275}), 88: (1, {'@': 275}), 95: (1, {'@': 275}), 84: (1, {'@': 275}), 18: (1, {'@': 275}), 87: (1, {'@': 275}), 99: (1, {'@': 275})}, 583: {90: (1, {'@': 412}), 91: (1, {'@': 412}), 20: (1, {'@': 412}), 92: (1, {'@': 412}), 88: (1, {'@': 412}), 93: (1, {'@': 412}), 94: (1, {'@': 412}), 95: (1, {'@': 412}), 109: (1, {'@': 412}), 96: (1, {'@': 412}), 97: (1, {'@': 412}), 98: (1, {'@': 412}), 87: (1, {'@': 412}), 99: (1, {'@': 412}), 101: (1, {'@': 412}), 102: (1, {'@': 412}), 37: (1, {'@': 412}), 103: (1, {'@': 412}), 104: (1, {'@': 412}), 89: (1, {'@': 412}), 105: (1, {'@': 412}), 106: (1, {'@': 412}), 107: (1, {'@': 412}), 84: (1, {'@': 412}), 108: (1, {'@': 412}), 28: (1, {'@': 412}), 18: (1, {'@': 412}), 2: (1, {'@': 412}), 100: (1, {'@': 412}), 110: (1, {'@': 412}), 111: (1, {'@': 412})}, 584: {90: (1, {'@': 429}), 91: (1, {'@': 429}), 20: (1, {'@': 429}), 92: (1, {'@': 429}), 93: (1, {'@': 429}), 94: (1, {'@': 429}), 96: (1, {'@': 429}), 97: (1, {'@': 429}), 98: (1, {'@': 429}), 100: (1, {'@': 429}), 101: (1, {'@': 429}), 102: (1, {'@': 429}), 37: (1, {'@': 429}), 103: (1, {'@': 429}), 89: (1, {'@': 429}), 105: (1, {'@': 429}), 106: (1, {'@': 429}), 107: (1, {'@': 429}), 108: (1, {'@': 429}), 2: (1, {'@': 429}), 109: (1, {'@': 429}), 110: (1, {'@': 429}), 88: (1, {'@': 429}), 95: (1, {'@': 429}), 87: (1, {'@': 429}), 99: (1, {'@': 429}), 104: (1, {'@': 429}), 84: (1, {'@': 429}), 18: (1, {'@': 429})}, 585: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 15), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 71: (0, 29), 83: (0, 625)}, 586: {20: (1, {'@': 427})}, 587: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 172), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 588: {110: (0, 493), 96: (0, 637), 20: (1, {'@': 140}), 103: (1, {'@': 140}), 89: (1, {'@': 140}), 2: (1, {'@': 140}), 101: (1, {'@': 140}), 88: (1, {'@': 140}), 104: (1, {'@': 140}), 95: (1, {'@': 140}), 84: (1, {'@': 140}), 18: (1, {'@': 140}), 87: (1, {'@': 140}), 99: (1, {'@': 140})}, 589: {104: (1, {'@': 192})}, 590: {111: (0, 556)}, 591: {84: (0, 659)}, 592: {104: (0, 566), 87: (0, 203)}, 593: {54: (0, 509), 20: (0, 554), 8: (0, 508)}, 594: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 120: (0, 488), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 20: (0, 677), 57: (0, 173), 121: (0, 456), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 595: {20: (0, 554), 8: (0, 528)}, 596: {47: (0, 264), 27: (0, 569), 2: (0, 601), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 4), 21: (0, 549), 28: (0, 603), 23: (0, 540), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 64: (0, 468), 37: (0, 242), 38: (0, 250), 68: (0, 131), 69: (0, 135), 70: (0, 159), 1: (0, 619), 40: (0, 277), 75: (0, 280), 72: (0, 283), 43: (0, 289), 41: (0, 291), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 597: {28: (0, 45), 31: (0, 513)}, 598: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 442), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 71: (0, 430), 75: (0, 280), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 599: {20: (0, 677), 41: (1, {'@': 87}), 34: (1, {'@': 87}), 46: (1, {'@': 87}), 58: (1, {'@': 87}), 11: (1, {'@': 87}), 36: (1, {'@': 87}), 31: (1, {'@': 87}), 77: (1, {'@': 87}), 37: (1, {'@': 87}), 84: (1, {'@': 87}), 12: (1, {'@': 87}), 64: (1, {'@': 87}), 28: (1, {'@': 87}), 35: (1, {'@': 87}), 83: (1, {'@': 87}), 17: (1, {'@': 87}), 38: (1, {'@': 87}), 76: (1, {'@': 87}), 43: (1, {'@': 87}), 61: (1, {'@': 87}), 22: (1, {'@': 87}), 30: (1, {'@': 87}), 55: (1, {'@': 87}), 14: (1, {'@': 87}), 10: (1, {'@': 87}), 54: (1, {'@': 87}), 69: (1, {'@': 87}), 5: (1, {'@': 87}), 18: (1, {'@': 87}), 80: (1, {'@': 87}), 2: (1, {'@': 87}), 50: (1, {'@': 87}), 112: (1, {'@': 87}), 113: (1, {'@': 87}), 114: (1, {'@': 87}), 9: (1, {'@': 87}), 115: (1, {'@': 87}), 116: (1, {'@': 87})}, 600: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 141: (0, 643), 13: (0, 503), 32: (0, 666), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 72: (0, 283), 41: (0, 291), 43: (0, 289), 75: (0, 280), 71: (0, 638), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 104: (1, {'@': 196})}, 601: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 32: (0, 497), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 71: (0, 605), 33: (0, 84), 64: (0, 468), 37: (0, 242), 75: (0, 280), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 141: (0, 568), 83: (0, 625), 104: (1, {'@': 196})}, 602: {87: (0, 211), 2: (0, 214), 89: (0, 555), 95: (0, 239), 104: (1, {'@': 194})}, 603: {27: (0, 241), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 213), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 53: (0, 123), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 604: {28: (0, 646), 2: (1, {'@': 138}), 20: (1, {'@': 138}), 89: (1, {'@': 138}), 88: (1, {'@': 138}), 95: (1, {'@': 138}), 87: (1, {'@': 138}), 99: (1, {'@': 138}), 104: (1, {'@': 138}), 84: (1, {'@': 138}), 18: (1, {'@': 138})}, 605: {99: (0, 650), 18: (0, 521), 87: (0, 600), 104: (1, {'@': 195})}, 606: {41: (1, {'@': 126}), 34: (1, {'@': 126}), 46: (1, {'@': 126}), 58: (1, {'@': 126}), 11: (1, {'@': 126}), 36: (1, {'@': 126}), 31: (1, {'@': 126}), 77: (1, {'@': 126}), 37: (1, {'@': 126}), 84: (1, {'@': 126}), 12: (1, {'@': 126}), 64: (1, {'@': 126}), 28: (1, {'@': 126}), 9: (1, {'@': 126}), 35: (1, {'@': 126}), 83: (1, {'@': 126}), 17: (1, {'@': 126}), 38: (1, {'@': 126}), 20: (1, {'@': 126}), 76: (1, {'@': 126}), 43: (1, {'@': 126}), 61: (1, {'@': 126}), 22: (1, {'@': 126}), 30: (1, {'@': 126}), 55: (1, {'@': 126}), 14: (1, {'@': 126}), 10: (1, {'@': 126}), 54: (1, {'@': 126}), 69: (1, {'@': 126}), 5: (1, {'@': 126}), 18: (1, {'@': 126}), 80: (1, {'@': 126}), 2: (1, {'@': 126}), 50: (1, {'@': 126}), 114: (1, {'@': 126}), 115: (1, {'@': 126}), 112: (1, {'@': 126}), 113: (1, {'@': 126}), 116: (1, {'@': 126})}, 607: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 150: (0, 67), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 151: (0, 389), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 33), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 31: (0, 243), 62: (0, 167), 63: (0, 475), 71: (0, 20), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 152: (0, 484), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 88: (1, {'@': 280})}, 608: {41: (1, {'@': 345}), 34: (1, {'@': 345}), 46: (1, {'@': 345}), 58: (1, {'@': 345}), 11: (1, {'@': 345}), 36: (1, {'@': 345}), 31: (1, {'@': 345}), 77: (1, {'@': 345}), 37: (1, {'@': 345}), 84: (1, {'@': 345}), 12: (1, {'@': 345}), 64: (1, {'@': 345}), 28: (1, {'@': 345}), 9: (1, {'@': 345}), 35: (1, {'@': 345}), 83: (1, {'@': 345}), 17: (1, {'@': 345}), 38: (1, {'@': 345}), 20: (1, {'@': 345}), 76: (1, {'@': 345}), 43: (1, {'@': 345}), 61: (1, {'@': 345}), 22: (1, {'@': 345}), 30: (1, {'@': 345}), 55: (1, {'@': 345}), 14: (1, {'@': 345}), 10: (1, {'@': 345}), 54: (1, {'@': 345}), 69: (1, {'@': 345}), 5: (1, {'@': 345}), 18: (1, {'@': 345}), 80: (1, {'@': 345}), 2: (1, {'@': 345}), 50: (1, {'@': 345}), 112: (1, {'@': 345}), 113: (1, {'@': 345}), 114: (1, {'@': 345}), 115: (1, {'@': 345}), 116: (1, {'@': 345})}, 609: {83: (1, {'@': 420}), 138: (1, {'@': 420}), 111: (1, {'@': 420}), 87: (1, {'@': 420}), 91: (1, {'@': 420}), 88: (1, {'@': 420}), 93: (1, {'@': 420}), 97: (1, {'@': 420}), 99: (1, {'@': 420}), 101: (1, {'@': 420}), 37: (1, {'@': 420}), 89: (1, {'@': 420}), 105: (1, {'@': 420}), 106: (1, {'@': 420}), 107: (1, {'@': 420}), 84: (1, {'@': 420}), 108: (1, {'@': 420}), 28: (1, {'@': 420}), 90: (1, {'@': 420}), 20: (1, {'@': 420}), 92: (1, {'@': 420}), 94: (1, {'@': 420}), 95: (1, {'@': 420}), 96: (1, {'@': 420}), 98: (1, {'@': 420}), 100: (1, {'@': 420}), 102: (1, {'@': 420}), 103: (1, {'@': 420}), 104: (1, {'@': 420}), 18: (1, {'@': 420}), 139: (1, {'@': 420}), 2: (1, {'@': 420}), 109: (1, {'@': 420}), 110: (1, {'@': 420})}, 610: {2: (1, {'@': 273}), 20: (1, {'@': 273}), 89: (1, {'@': 273}), 28: (1, {'@': 273}), 104: (1, {'@': 273}), 88: (1, {'@': 273}), 95: (1, {'@': 273}), 84: (1, {'@': 273}), 18: (1, {'@': 273}), 87: (1, {'@': 273}), 99: (1, {'@': 273})}, 611: {112: (0, 617), 115: (0, 618), 145: (0, 268), 123: (0, 673), 41: (1, {'@': 348}), 34: (1, {'@': 348}), 46: (1, {'@': 348}), 58: (1, {'@': 348}), 11: (1, {'@': 348}), 36: (1, {'@': 348}), 31: (1, {'@': 348}), 77: (1, {'@': 348}), 37: (1, {'@': 348}), 84: (1, {'@': 348}), 12: (1, {'@': 348}), 64: (1, {'@': 348}), 28: (1, {'@': 348}), 9: (1, {'@': 348}), 35: (1, {'@': 348}), 83: (1, {'@': 348}), 17: (1, {'@': 348}), 38: (1, {'@': 348}), 20: (1, {'@': 348}), 76: (1, {'@': 348}), 43: (1, {'@': 348}), 61: (1, {'@': 348}), 22: (1, {'@': 348}), 30: (1, {'@': 348}), 55: (1, {'@': 348}), 14: (1, {'@': 348}), 10: (1, {'@': 348}), 54: (1, {'@': 348}), 69: (1, {'@': 348}), 5: (1, {'@': 348}), 18: (1, {'@': 348}), 80: (1, {'@': 348}), 2: (1, {'@': 348}), 50: (1, {'@': 348}), 113: (1, {'@': 348}), 114: (1, {'@': 348}), 116: (1, {'@': 348})}, 612: {104: (0, 292), 87: (0, 203)}, 613: {105: (0, 440), 102: (1, {'@': 155}), 90: (1, {'@': 155}), 20: (1, {'@': 155}), 92: (1, {'@': 155}), 103: (1, {'@': 155}), 89: (1, {'@': 155}), 94: (1, {'@': 155}), 107: (1, {'@': 155}), 96: (1, {'@': 155}), 108: (1, {'@': 155}), 2: (1, {'@': 155}), 110: (1, {'@': 155}), 101: (1, {'@': 155}), 88: (1, {'@': 155}), 95: (1, {'@': 155}), 87: (1, {'@': 155}), 99: (1, {'@': 155}), 104: (1, {'@': 155}), 84: (1, {'@': 155}), 18: (1, {'@': 155})}, 614: {20: (0, 554), 8: (0, 675), 41: (1, {'@': 90}), 34: (1, {'@': 90}), 46: (1, {'@': 90}), 58: (1, {'@': 90}), 11: (1, {'@': 90}), 36: (1, {'@': 90}), 31: (1, {'@': 90}), 77: (1, {'@': 90}), 37: (1, {'@': 90}), 84: (1, {'@': 90}), 12: (1, {'@': 90}), 64: (1, {'@': 90}), 28: (1, {'@': 90}), 35: (1, {'@': 90}), 83: (1, {'@': 90}), 17: (1, {'@': 90}), 38: (1, {'@': 90}), 76: (1, {'@': 90}), 43: (1, {'@': 90}), 61: (1, {'@': 90}), 22: (1, {'@': 90}), 30: (1, {'@': 90}), 55: (1, {'@': 90}), 14: (1, {'@': 90}), 10: (1, {'@': 90}), 54: (1, {'@': 90}), 69: (1, {'@': 90}), 5: (1, {'@': 90}), 18: (1, {'@': 90}), 80: (1, {'@': 90}), 2: (1, {'@': 90}), 50: (1, {'@': 90}), 112: (1, {'@': 90}), 113: (1, {'@': 90}), 114: (1, {'@': 90}), 9: (1, {'@': 90}), 115: (1, {'@': 90}), 116: (1, {'@': 90})}, 615: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 426})}, 616: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 150: (0, 67), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 151: (0, 389), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 33), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 31: (0, 243), 62: (0, 167), 63: (0, 475), 71: (0, 20), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 152: (0, 459), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 88: (1, {'@': 280})}, 617: {28: (0, 539)}, 618: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 8: (0, 101), 12: (0, 520), 13: (0, 503), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 21: (0, 549), 20: (0, 554), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 120: (0, 450), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 121: (0, 245), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 619: {110: (0, 493), 96: (0, 637), 20: (1, {'@': 142}), 103: (1, {'@': 142}), 89: (1, {'@': 142}), 2: (1, {'@': 142}), 101: (1, {'@': 142}), 88: (1, {'@': 142}), 104: (1, {'@': 142}), 95: (1, {'@': 142}), 84: (1, {'@': 142}), 18: (1, {'@': 142}), 87: (1, {'@': 142}), 99: (1, {'@': 142})}, 620: {27: (0, 569), 2: (0, 601), 10: (0, 526), 11: (0, 522), 28: (0, 603), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 16: (0, 258), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 621: {28: (0, 506)}, 622: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 432), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 31: (0, 467), 28: (0, 26), 32: (0, 634), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 623: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 71: (0, 183), 3: (0, 604), 6: (0, 496), 32: (0, 90), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 624: {110: (0, 493), 96: (0, 637), 20: (1, {'@': 141}), 103: (1, {'@': 141}), 89: (1, {'@': 141}), 2: (1, {'@': 141}), 101: (1, {'@': 141}), 88: (1, {'@': 141}), 104: (1, {'@': 141}), 95: (1, {'@': 141}), 84: (1, {'@': 141}), 18: (1, {'@': 141}), 87: (1, {'@': 141}), 99: (1, {'@': 141})}, 625: {28: (0, 577), 63: (0, 475), 27: (0, 658), 62: (0, 167), 31: (0, 609)}, 626: {27: (0, 569), 2: (0, 601), 7: (0, 261), 10: (0, 526), 11: (0, 522), 28: (0, 603), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 627: {112: (0, 617), 115: (0, 618), 145: (0, 276), 123: (0, 673), 41: (1, {'@': 342}), 34: (1, {'@': 342}), 46: (1, {'@': 342}), 58: (1, {'@': 342}), 11: (1, {'@': 342}), 36: (1, {'@': 342}), 31: (1, {'@': 342}), 77: (1, {'@': 342}), 37: (1, {'@': 342}), 84: (1, {'@': 342}), 12: (1, {'@': 342}), 64: (1, {'@': 342}), 28: (1, {'@': 342}), 9: (1, {'@': 342}), 35: (1, {'@': 342}), 83: (1, {'@': 342}), 17: (1, {'@': 342}), 38: (1, {'@': 342}), 20: (1, {'@': 342}), 76: (1, {'@': 342}), 43: (1, {'@': 342}), 61: (1, {'@': 342}), 22: (1, {'@': 342}), 30: (1, {'@': 342}), 55: (1, {'@': 342}), 14: (1, {'@': 342}), 10: (1, {'@': 342}), 54: (1, {'@': 342}), 69: (1, {'@': 342}), 5: (1, {'@': 342}), 18: (1, {'@': 342}), 80: (1, {'@': 342}), 2: (1, {'@': 342}), 50: (1, {'@': 342}), 113: (1, {'@': 342}), 114: (1, {'@': 342}), 116: (1, {'@': 342})}, 628: {47: (0, 264), 27: (0, 569), 2: (0, 601), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 21: (0, 449), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 629: {27: (0, 569), 2: (0, 601), 10: (0, 526), 11: (0, 522), 28: (0, 603), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 75: (0, 446), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 630: {96: (1, {'@': 144}), 20: (1, {'@': 144}), 103: (1, {'@': 144}), 89: (1, {'@': 144}), 2: (1, {'@': 144}), 110: (1, {'@': 144}), 101: (1, {'@': 144}), 88: (1, {'@': 144}), 104: (1, {'@': 144}), 95: (1, {'@': 144}), 84: (1, {'@': 144}), 18: (1, {'@': 144}), 87: (1, {'@': 144}), 99: (1, {'@': 144})}, 631: {1: (0, 588), 2: (0, 601), 121: (0, 531), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 120: (0, 527), 6: (0, 496), 7: (0, 507), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 530), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 37: (0, 242), 36: (0, 219), 38: (0, 250), 39: (0, 257), 76: (0, 499), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 69: (0, 135), 68: (0, 131), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 77: (0, 325), 80: (0, 375), 78: (0, 226), 79: (0, 359), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625)}, 632: {27: (0, 569), 2: (0, 601), 10: (0, 526), 11: (0, 522), 28: (0, 603), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 16: (0, 562), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 633: {90: (1, {'@': 199}), 91: (1, {'@': 199}), 20: (1, {'@': 199}), 92: (1, {'@': 199}), 93: (1, {'@': 199}), 94: (1, {'@': 199}), 96: (1, {'@': 199}), 97: (1, {'@': 199}), 98: (1, {'@': 199}), 100: (1, {'@': 199}), 101: (1, {'@': 199}), 102: (1, {'@': 199}), 37: (1, {'@': 199}), 103: (1, {'@': 199}), 89: (1, {'@': 199}), 105: (1, {'@': 199}), 106: (1, {'@': 199}), 107: (1, {'@': 199}), 108: (1, {'@': 199}), 2: (1, {'@': 199}), 109: (1, {'@': 199}), 110: (1, {'@': 199}), 88: (1, {'@': 199}), 95: (1, {'@': 199}), 87: (1, {'@': 199}), 99: (1, {'@': 199}), 104: (1, {'@': 199}), 84: (1, {'@': 199}), 18: (1, {'@': 199})}, 634: {2: (0, 214), 89: (0, 555)}, 635: {90: (1, {'@': 187}), 91: (1, {'@': 187}), 20: (1, {'@': 187}), 92: (1, {'@': 187}), 93: (1, {'@': 187}), 94: (1, {'@': 187}), 96: (1, {'@': 187}), 97: (1, {'@': 187}), 98: (1, {'@': 187}), 100: (1, {'@': 187}), 101: (1, {'@': 187}), 102: (1, {'@': 187}), 37: (1, {'@': 187}), 103: (1, {'@': 187}), 89: (1, {'@': 187}), 105: (1, {'@': 187}), 106: (1, {'@': 187}), 107: (1, {'@': 187}), 108: (1, {'@': 187}), 2: (1, {'@': 187}), 109: (1, {'@': 187}), 110: (1, {'@': 187}), 88: (1, {'@': 187}), 95: (1, {'@': 187}), 87: (1, {'@': 187}), 99: (1, {'@': 187}), 104: (1, {'@': 187}), 84: (1, {'@': 187}), 18: (1, {'@': 187})}, 636: {2: (0, 214), 89: (0, 555), 20: (1, {'@': 209})}, 637: {47: (0, 264), 27: (0, 569), 2: (0, 601), 23: (0, 540), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 28: (0, 603), 15: (0, 543), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 21: (0, 549), 40: (0, 277), 75: (0, 280), 72: (0, 283), 43: (0, 289), 41: (0, 291), 31: (0, 100), 76: (0, 300), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 13: (0, 533), 64: (0, 468), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 638: {87: (0, 600), 104: (1, {'@': 195})}, 639: {2: (0, 214), 89: (0, 555), 99: (0, 244)}, 640: {41: (1, {'@': 349}), 34: (1, {'@': 349}), 46: (1, {'@': 349}), 58: (1, {'@': 349}), 11: (1, {'@': 349}), 36: (1, {'@': 349}), 31: (1, {'@': 349}), 77: (1, {'@': 349}), 37: (1, {'@': 349}), 84: (1, {'@': 349}), 12: (1, {'@': 349}), 64: (1, {'@': 349}), 28: (1, {'@': 349}), 9: (1, {'@': 349}), 35: (1, {'@': 349}), 83: (1, {'@': 349}), 17: (1, {'@': 349}), 38: (1, {'@': 349}), 20: (1, {'@': 349}), 76: (1, {'@': 349}), 43: (1, {'@': 349}), 61: (1, {'@': 349}), 22: (1, {'@': 349}), 30: (1, {'@': 349}), 55: (1, {'@': 349}), 14: (1, {'@': 349}), 10: (1, {'@': 349}), 54: (1, {'@': 349}), 69: (1, {'@': 349}), 5: (1, {'@': 349}), 18: (1, {'@': 349}), 80: (1, {'@': 349}), 2: (1, {'@': 349}), 50: (1, {'@': 349}), 112: (1, {'@': 349}), 113: (1, {'@': 349}), 114: (1, {'@': 349}), 115: (1, {'@': 349}), 116: (1, {'@': 349})}, 641: {2: (0, 214), 89: (0, 555), 99: (0, 229)}, 642: {27: (0, 569), 1: (0, 588), 32: (0, 216), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 71: (0, 199), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 643: {104: (1, {'@': 193})}, 644: {27: (0, 569), 2: (0, 601), 7: (0, 455), 10: (0, 526), 11: (0, 522), 28: (0, 603), 16: (0, 545), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 645: {2: (0, 214), 89: (0, 555), 99: (0, 145)}, 646: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 150: (0, 67), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 151: (0, 389), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 152: (0, 174), 32: (0, 33), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 31: (0, 243), 62: (0, 167), 63: (0, 475), 71: (0, 20), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 43: (0, 289), 75: (0, 280), 72: (0, 283), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625), 88: (1, {'@': 280})}, 647: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 32: (0, 391), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 14: (0, 597), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 71: (0, 396), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 648: {20: (0, 677), 114: (1, {'@': 305}), 116: (1, {'@': 305})}, 649: {133: (0, 392), 31: (0, 278), 20: (0, 554), 8: (0, 309), 84: (1, {'@': 399})}, 650: {144: (0, 612), 31: (0, 590)}, 651: {20: (0, 677), 41: (1, {'@': 91}), 34: (1, {'@': 91}), 46: (1, {'@': 91}), 58: (1, {'@': 91}), 11: (1, {'@': 91}), 36: (1, {'@': 91}), 31: (1, {'@': 91}), 77: (1, {'@': 91}), 37: (1, {'@': 91}), 84: (1, {'@': 91}), 12: (1, {'@': 91}), 64: (1, {'@': 91}), 28: (1, {'@': 91}), 35: (1, {'@': 91}), 83: (1, {'@': 91}), 17: (1, {'@': 91}), 38: (1, {'@': 91}), 76: (1, {'@': 91}), 43: (1, {'@': 91}), 61: (1, {'@': 91}), 22: (1, {'@': 91}), 30: (1, {'@': 91}), 55: (1, {'@': 91}), 14: (1, {'@': 91}), 10: (1, {'@': 91}), 54: (1, {'@': 91}), 69: (1, {'@': 91}), 5: (1, {'@': 91}), 18: (1, {'@': 91}), 80: (1, {'@': 91}), 2: (1, {'@': 91}), 50: (1, {'@': 91}), 112: (1, {'@': 91}), 113: (1, {'@': 91}), 114: (1, {'@': 91}), 9: (1, {'@': 91}), 115: (1, {'@': 91}), 116: (1, {'@': 91})}, 652: {122: (0, 654), 112: (0, 617), 20: (0, 677), 123: (0, 548)}, 653: {83: (1, {'@': 119}), 20: (1, {'@': 119}), 87: (1, {'@': 119}), 88: (1, {'@': 119}), 132: (1, {'@': 119})}, 654: {112: (0, 617), 115: (0, 618), 145: (0, 279), 123: (0, 673), 41: (1, {'@': 344}), 34: (1, {'@': 344}), 46: (1, {'@': 344}), 58: (1, {'@': 344}), 11: (1, {'@': 344}), 36: (1, {'@': 344}), 31: (1, {'@': 344}), 77: (1, {'@': 344}), 37: (1, {'@': 344}), 84: (1, {'@': 344}), 12: (1, {'@': 344}), 64: (1, {'@': 344}), 28: (1, {'@': 344}), 9: (1, {'@': 344}), 35: (1, {'@': 344}), 83: (1, {'@': 344}), 17: (1, {'@': 344}), 38: (1, {'@': 344}), 20: (1, {'@': 344}), 76: (1, {'@': 344}), 43: (1, {'@': 344}), 61: (1, {'@': 344}), 22: (1, {'@': 344}), 30: (1, {'@': 344}), 55: (1, {'@': 344}), 14: (1, {'@': 344}), 10: (1, {'@': 344}), 54: (1, {'@': 344}), 69: (1, {'@': 344}), 5: (1, {'@': 344}), 18: (1, {'@': 344}), 80: (1, {'@': 344}), 2: (1, {'@': 344}), 50: (1, {'@': 344}), 113: (1, {'@': 344}), 114: (1, {'@': 344}), 116: (1, {'@': 344})}, 655: {2: (0, 214), 89: (0, 555), 104: (0, 662)}, 656: {1: (0, 588), 2: (0, 601), 3: (0, 604), 4: (0, 606), 24: (0, 614), 5: (0, 631), 6: (0, 496), 7: (0, 507), 119: (0, 510), 10: (0, 526), 11: (0, 522), 12: (0, 520), 13: (0, 503), 8: (0, 524), 14: (0, 505), 0: (0, 535), 15: (0, 543), 16: (0, 545), 17: (0, 517), 18: (0, 553), 19: (0, 518), 20: (0, 554), 21: (0, 549), 23: (0, 540), 25: (0, 538), 26: (0, 570), 27: (0, 569), 52: (0, 579), 22: (0, 595), 28: (0, 26), 29: (0, 106), 30: (0, 86), 31: (0, 100), 32: (0, 92), 33: (0, 84), 34: (0, 162), 35: (0, 186), 36: (0, 219), 37: (0, 242), 38: (0, 250), 39: (0, 257), 156: (0, 298), 40: (0, 277), 41: (0, 291), 42: (0, 284), 43: (0, 289), 46: (0, 324), 47: (0, 264), 48: (0, 327), 44: (0, 347), 45: (0, 336), 50: (0, 353), 51: (0, 355), 53: (0, 366), 54: (0, 382), 55: (0, 388), 58: (0, 406), 59: (0, 428), 60: (0, 429), 61: (0, 452), 62: (0, 167), 63: (0, 475), 120: (0, 472), 64: (0, 468), 57: (0, 173), 66: (0, 56), 67: (0, 81), 68: (0, 131), 69: (0, 135), 73: (0, 144), 70: (0, 159), 71: (0, 230), 75: (0, 280), 72: (0, 283), 76: (0, 300), 77: (0, 325), 78: (0, 226), 79: (0, 359), 80: (0, 375), 74: (0, 369), 82: (0, 423), 81: (0, 523), 83: (0, 625), 113: (1, {'@': 77})}, 657: {2: (1, {'@': 234}), 20: (1, {'@': 234}), 89: (1, {'@': 234}), 28: (1, {'@': 234}), 104: (1, {'@': 234}), 88: (1, {'@': 234}), 95: (1, {'@': 234}), 84: (1, {'@': 234}), 18: (1, {'@': 234}), 87: (1, {'@': 234}), 99: (1, {'@': 234})}, 658: {138: (0, 417), 83: (0, 565), 90: (1, {'@': 414}), 91: (1, {'@': 414}), 20: (1, {'@': 414}), 92: (1, {'@': 414}), 93: (1, {'@': 414}), 94: (1, {'@': 414}), 96: (1, {'@': 414}), 97: (1, {'@': 414}), 98: (1, {'@': 414}), 87: (1, {'@': 414}), 100: (1, {'@': 414}), 101: (1, {'@': 414}), 102: (1, {'@': 414}), 37: (1, {'@': 414}), 103: (1, {'@': 414}), 89: (1, {'@': 414}), 105: (1, {'@': 414}), 106: (1, {'@': 414}), 107: (1, {'@': 414}), 108: (1, {'@': 414}), 28: (1, {'@': 414}), 139: (1, {'@': 414}), 2: (1, {'@': 414}), 111: (1, {'@': 414}), 109: (1, {'@': 414}), 110: (1, {'@': 414}), 88: (1, {'@': 414}), 95: (1, {'@': 414}), 99: (1, {'@': 414}), 104: (1, {'@': 414}), 84: (1, {'@': 414}), 18: (1, {'@': 414})}, 659: {90: (1, {'@': 200}), 91: (1, {'@': 200}), 20: (1, {'@': 200}), 92: (1, {'@': 200}), 93: (1, {'@': 200}), 94: (1, {'@': 200}), 96: (1, {'@': 200}), 97: (1, {'@': 200}), 98: (1, {'@': 200}), 100: (1, {'@': 200}), 101: (1, {'@': 200}), 102: (1, {'@': 200}), 37: (1, {'@': 200}), 103: (1, {'@': 200}), 89: (1, {'@': 200}), 105: (1, {'@': 200}), 106: (1, {'@': 200}), 107: (1, {'@': 200}), 108: (1, {'@': 200}), 2: (1, {'@': 200}), 109: (1, {'@': 200}), 110: (1, {'@': 200}), 88: (1, {'@': 200}), 95: (1, {'@': 200}), 87: (1, {'@': 200}), 99: (1, {'@': 200}), 104: (1, {'@': 200}), 84: (1, {'@': 200}), 18: (1, {'@': 200})}, 660: {20: (0, 677), 41: (1, {'@': 85}), 34: (1, {'@': 85}), 46: (1, {'@': 85}), 58: (1, {'@': 85}), 11: (1, {'@': 85}), 36: (1, {'@': 85}), 31: (1, {'@': 85}), 77: (1, {'@': 85}), 37: (1, {'@': 85}), 84: (1, {'@': 85}), 12: (1, {'@': 85}), 64: (1, {'@': 85}), 28: (1, {'@': 85}), 35: (1, {'@': 85}), 83: (1, {'@': 85}), 17: (1, {'@': 85}), 38: (1, {'@': 85}), 76: (1, {'@': 85}), 43: (1, {'@': 85}), 61: (1, {'@': 85}), 22: (1, {'@': 85}), 30: (1, {'@': 85}), 55: (1, {'@': 85}), 14: (1, {'@': 85}), 10: (1, {'@': 85}), 54: (1, {'@': 85}), 69: (1, {'@': 85}), 5: (1, {'@': 85}), 18: (1, {'@': 85}), 80: (1, {'@': 85}), 2: (1, {'@': 85}), 50: (1, {'@': 85}), 112: (1, {'@': 85}), 113: (1, {'@': 85}), 114: (1, {'@': 85}), 9: (1, {'@': 85}), 115: (1, {'@': 85}), 116: (1, {'@': 85})}, 661: {28: (0, 436), 90: (1, {'@': 174}), 91: (1, {'@': 174}), 20: (1, {'@': 174}), 92: (1, {'@': 174}), 88: (1, {'@': 174}), 93: (1, {'@': 174}), 94: (1, {'@': 174}), 95: (1, {'@': 174}), 96: (1, {'@': 174}), 97: (1, {'@': 174}), 98: (1, {'@': 174}), 87: (1, {'@': 174}), 99: (1, {'@': 174}), 100: (1, {'@': 174}), 101: (1, {'@': 174}), 102: (1, {'@': 174}), 37: (1, {'@': 174}), 103: (1, {'@': 174}), 104: (1, {'@': 174}), 89: (1, {'@': 174}), 105: (1, {'@': 174}), 106: (1, {'@': 174}), 107: (1, {'@': 174}), 84: (1, {'@': 174}), 108: (1, {'@': 174}), 18: (1, {'@': 174}), 2: (1, {'@': 174}), 109: (1, {'@': 174}), 110: (1, {'@': 174})}, 662: {90: (1, {'@': 186}), 91: (1, {'@': 186}), 20: (1, {'@': 186}), 92: (1, {'@': 186}), 93: (1, {'@': 186}), 94: (1, {'@': 186}), 96: (1, {'@': 186}), 97: (1, {'@': 186}), 98: (1, {'@': 186}), 100: (1, {'@': 186}), 101: (1, {'@': 186}), 102: (1, {'@': 186}), 37: (1, {'@': 186}), 103: (1, {'@': 186}), 89: (1, {'@': 186}), 105: (1, {'@': 186}), 106: (1, {'@': 186}), 107: (1, {'@': 186}), 108: (1, {'@': 186}), 2: (1, {'@': 186}), 109: (1, {'@': 186}), 110: (1, {'@': 186}), 88: (1, {'@': 186}), 95: (1, {'@': 186}), 87: (1, {'@': 186}), 99: (1, {'@': 186}), 104: (1, {'@': 186}), 84: (1, {'@': 186}), 18: (1, {'@': 186})}, 663: {28: (0, 438)}, 664: {27: (0, 569), 2: (0, 601), 10: (0, 526), 11: (0, 522), 28: (0, 603), 68: (0, 131), 69: (0, 135), 70: (0, 159), 19: (0, 4), 16: (0, 227), 40: (0, 277), 75: (0, 280), 72: (0, 283), 41: (0, 291), 43: (0, 289), 76: (0, 300), 31: (0, 100), 53: (0, 583), 77: (0, 325), 26: (0, 570), 80: (0, 375), 62: (0, 167), 63: (0, 475), 37: (0, 242), 83: (0, 625), 38: (0, 250)}, 665: {31: (0, 121)}, 666: {87: (0, 211), 2: (0, 214), 89: (0, 555), 104: (1, {'@': 194})}, 667: {47: (0, 264), 27: (0, 569), 2: (0, 601), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 4), 21: (0, 549), 28: (0, 603), 23: (0, 540), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 64: (0, 468), 37: (0, 242), 38: (0, 250), 68: (0, 131), 69: (0, 135), 70: (0, 159), 40: (0, 277), 75: (0, 280), 72: (0, 283), 43: (0, 289), 41: (0, 291), 1: (0, 624), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 668: {111: (0, 178)}, 669: {20: (0, 677), 41: (1, {'@': 79}), 34: (1, {'@': 79}), 46: (1, {'@': 79}), 58: (1, {'@': 79}), 11: (1, {'@': 79}), 36: (1, {'@': 79}), 31: (1, {'@': 79}), 77: (1, {'@': 79}), 37: (1, {'@': 79}), 84: (1, {'@': 79}), 12: (1, {'@': 79}), 64: (1, {'@': 79}), 28: (1, {'@': 79}), 35: (1, {'@': 79}), 83: (1, {'@': 79}), 17: (1, {'@': 79}), 38: (1, {'@': 79}), 76: (1, {'@': 79}), 43: (1, {'@': 79}), 61: (1, {'@': 79}), 22: (1, {'@': 79}), 30: (1, {'@': 79}), 55: (1, {'@': 79}), 14: (1, {'@': 79}), 10: (1, {'@': 79}), 54: (1, {'@': 79}), 69: (1, {'@': 79}), 5: (1, {'@': 79}), 18: (1, {'@': 79}), 80: (1, {'@': 79}), 2: (1, {'@': 79}), 50: (1, {'@': 79}), 112: (1, {'@': 79}), 113: (1, {'@': 79}), 114: (1, {'@': 79}), 9: (1, {'@': 79}), 115: (1, {'@': 79}), 116: (1, {'@': 79})}, 670: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 341), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 671: {99: (0, 182)}, 672: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 32: (0, 233), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 23: (0, 540), 60: (0, 429), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 673: {41: (1, {'@': 435}), 46: (1, {'@': 435}), 11: (1, {'@': 435}), 31: (1, {'@': 435}), 77: (1, {'@': 435}), 84: (1, {'@': 435}), 83: (1, {'@': 435}), 112: (1, {'@': 435}), 61: (1, {'@': 435}), 113: (1, {'@': 435}), 55: (1, {'@': 435}), 14: (1, {'@': 435}), 69: (1, {'@': 435}), 5: (1, {'@': 435}), 80: (1, {'@': 435}), 2: (1, {'@': 435}), 34: (1, {'@': 435}), 58: (1, {'@': 435}), 36: (1, {'@': 435}), 114: (1, {'@': 435}), 37: (1, {'@': 435}), 12: (1, {'@': 435}), 64: (1, {'@': 435}), 28: (1, {'@': 435}), 35: (1, {'@': 435}), 9: (1, {'@': 435}), 17: (1, {'@': 435}), 38: (1, {'@': 435}), 20: (1, {'@': 435}), 115: (1, {'@': 435}), 76: (1, {'@': 435}), 43: (1, {'@': 435}), 22: (1, {'@': 435}), 30: (1, {'@': 435}), 54: (1, {'@': 435}), 10: (1, {'@': 435}), 18: (1, {'@': 435}), 116: (1, {'@': 435}), 50: (1, {'@': 435})}, 674: {28: (0, 670)}, 675: {20: (0, 677), 41: (1, {'@': 89}), 34: (1, {'@': 89}), 46: (1, {'@': 89}), 58: (1, {'@': 89}), 11: (1, {'@': 89}), 36: (1, {'@': 89}), 31: (1, {'@': 89}), 77: (1, {'@': 89}), 37: (1, {'@': 89}), 84: (1, {'@': 89}), 12: (1, {'@': 89}), 64: (1, {'@': 89}), 28: (1, {'@': 89}), 35: (1, {'@': 89}), 83: (1, {'@': 89}), 17: (1, {'@': 89}), 38: (1, {'@': 89}), 76: (1, {'@': 89}), 43: (1, {'@': 89}), 61: (1, {'@': 89}), 22: (1, {'@': 89}), 30: (1, {'@': 89}), 55: (1, {'@': 89}), 14: (1, {'@': 89}), 10: (1, {'@': 89}), 54: (1, {'@': 89}), 69: (1, {'@': 89}), 5: (1, {'@': 89}), 18: (1, {'@': 89}), 80: (1, {'@': 89}), 2: (1, {'@': 89}), 50: (1, {'@': 89}), 112: (1, {'@': 89}), 113: (1, {'@': 89}), 114: (1, {'@': 89}), 9: (1, {'@': 89}), 115: (1, {'@': 89}), 116: (1, {'@': 89})}, 676: {27: (0, 569), 1: (0, 588), 47: (0, 264), 2: (0, 601), 3: (0, 604), 6: (0, 496), 55: (0, 388), 7: (0, 507), 10: (0, 526), 11: (0, 522), 13: (0, 503), 15: (0, 543), 16: (0, 545), 19: (0, 661), 21: (0, 549), 28: (0, 26), 32: (0, 444), 23: (0, 540), 60: (0, 429), 99: (0, 129), 26: (0, 570), 62: (0, 167), 63: (0, 475), 31: (0, 100), 33: (0, 84), 64: (0, 468), 37: (0, 242), 38: (0, 250), 66: (0, 56), 104: (0, 271), 68: (0, 131), 39: (0, 257), 69: (0, 135), 70: (0, 159), 40: (0, 277), 41: (0, 291), 72: (0, 283), 43: (0, 289), 75: (0, 280), 76: (0, 300), 53: (0, 583), 77: (0, 325), 80: (0, 375), 83: (0, 625)}, 677: {41: (1, {'@': 431}), 34: (1, {'@': 431}), 46: (1, {'@': 431}), 58: (1, {'@': 431}), 11: (1, {'@': 431}), 36: (1, {'@': 431}), 31: (1, {'@': 431}), 77: (1, {'@': 431}), 37: (1, {'@': 431}), 84: (1, {'@': 431}), 12: (1, {'@': 431}), 64: (1, {'@': 431}), 28: (1, {'@': 431}), 9: (1, {'@': 431}), 35: (1, {'@': 431}), 83: (1, {'@': 431}), 17: (1, {'@': 431}), 38: (1, {'@': 431}), 20: (1, {'@': 431}), 76: (1, {'@': 431}), 43: (1, {'@': 431}), 61: (1, {'@': 431}), 22: (1, {'@': 431}), 30: (1, {'@': 431}), 55: (1, {'@': 431}), 14: (1, {'@': 431}), 10: (1, {'@': 431}), 54: (1, {'@': 431}), 69: (1, {'@': 431}), 5: (1, {'@': 431}), 18: (1, {'@': 431}), 80: (1, {'@': 431}), 2: (1, {'@': 431}), 50: (1, {'@': 431}), 116: (1, {'@': 431}), 112: (1, {'@': 431}), 113: (1, {'@': 431}), 114: (1, {'@': 431}), 115: (1, {'@': 431}), 87: (1, {'@': 431})}, 678: {122: (0, 270), 112: (0, 617), 20: (0, 677), 123: (0, 548)}}, 'start_states': {'start': 656}, 'end_states': {'start': 298}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'SIGNED_INT', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': 'WS_INLINE', 'pattern': {'value': '(?:(?:\\ |\t))+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': 'C_COMMENT', 'pattern': {'value': '/\\*(.|\n)*?\\*/', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': 'ASSIGN_OP', 'pattern': {'value': '(?://=|\\+\\+=|\\+=|\\-=|\\*=|/=|%=|\\^=)', 'flags': [], '_width': [2, 3], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'FUN_OP', 'pattern': {'value': '(?:\\[::\\]|and|//|in|\\[\\]|or|\\|\\||\\&\\&|<=|>=|==|!=|\\*|\\+|\\-|/|%|\\^|!|>|<)', 'flags': [], '_width': [1, 4], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'VAR_NAME', 'pattern': {'value': '(?!(if|elif|else|break|continue|do|while|for|import|internal|return|raise|as|finally|try|catch|nil|true|false|fun|class|space|in|or|and|not|new)\\b)[a-zA-Z_][a-zA-Z0-9_]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'INTERNAL', 'pattern': {'value': 'internal', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'HEX_INT', 'pattern': {'value': '0x[a-fA-F0-9]+', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': 'FLOW_CTRL', 'pattern': {'value': '(?:continue|break)', 'flags': [], '_width': [5, 8], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 10: {'name': 'MULT_STRING', 'pattern': {'value': '"""(.|\n)*?"""', 'flags': [], '_width': [6, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 11: {'name': 'ES_STR', 'pattern': {'value': '(?<!")"(?!").*?(?<!\\\\)(\\\\\\\\)*?(?<!")"(?!")', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 12: {'name': 'DOT', 'pattern': {'value': '(?<!\\.)\\.(?!\\.)', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 13: {'name': 'SCOPE', 'pattern': {'value': '::', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'NON_LOC', 'pattern': {'value': '$', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'ANNOT_SYMB', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'INNER', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'INL_COMMENT', 'pattern': {'value': '#[^\n]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': '_END', 'pattern': {'value': '(?:(?:(?:\r)?\n)+|;)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'SIGNED_FLOAT', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+(?<!\\.)\\.(?!\\.)(?:(?:[0-9])+)?|(?<!\\.)\\.(?!\\.)(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_0', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_1', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': '__ANON_2', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_3', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_4', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': '__ANON_5', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': '__ANON_6', 'pattern': {'value': '++', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': '__ANON_7', 'pattern': {'value': '//', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': 'NIL', 'pattern': {'value': 'nil', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': '__ANON_8', 'pattern': {'value': '..', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'FUN', 'pattern': {'value': 'fun', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'NEW', 'pattern': {'value': 'new', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': 'TRY', 'pattern': {'value': 'try', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': 'CATCH', 'pattern': {'value': 'catch', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': 'FINALLY', 'pattern': {'value': 'finally', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'SPACE', 'pattern': {'value': 'space', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': 'CLASS', 'pattern': {'value': 'class', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'ENUM', 'pattern': {'value': 'enum', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 72: {'name': 'RAISE', 'pattern': {'value': 'raise', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 73: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmt', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': Token('RULE', '_stmt'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_rvalue', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOW_CTRL', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op_assign', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annotation', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': Token('RULE', '_stmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annotation', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_clstmt', '__type__': 'NonTerminal'}, {'name': '_clstmts', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_clstmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': Token('RULE', '_clstmt'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_rvalue', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOW_CTRL', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op_assign', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_definition', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'construct', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annotation', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', '_clstmts'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annotation', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', 'import'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_space_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', 'import'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_scope', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'import_as', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', '_list_space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', '_list_space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_list_space_scope', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_scope', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', 'space_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_scope', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_scope', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', '_pspace_scope'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_scope', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'silent_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', '_rvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'class', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', '_definition'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'enum', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'silent_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'annotation'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ANNOT_SYMB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'INNER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'annot_list', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'annotation'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ANNOT_SYMB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'annot_list', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'annot_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'annot_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'annot_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annot_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'annot_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annot_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'member', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ternary_if', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_lor', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'log_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'log_e', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shc_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_land', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'shc_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shc_e', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_and', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INNER', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_not', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'not_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_not', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_lte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_gte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'expr_gt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'expr_lt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'expr_eq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'cmp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_e', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'in_e', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'expr_neq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'in_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cat_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'in_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'in_e', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cat_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_in', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'cat_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'cat_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cat_e', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_cat', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'add_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_e', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'expr_fdiv', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'expr_idiv', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'product'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exp_e', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'expr_mod', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'exp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'neg_e', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'exp_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exp_e', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'neg_e', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'neg_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'neg_e'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'expr_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'const', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xstring', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dict', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_FLOAT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'float', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': 'hex_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NIL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'nil', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'true', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', 'const'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'false', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'range', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'range', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', 'list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'list_comp', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_list_vals', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', '_list_vals'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', 'list_assig'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'list_assig'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_assig', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'dict'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'dict'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', '_dict_val_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dict_val_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assignment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', 'assignment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assignment', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', 'op_assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'ASSIGN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', 'op_assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'ASSIGN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', 'scope_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pscope_name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', 'scope_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'member'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pmember', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'member'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pslice', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', '_pmember'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pmember', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', '_pmember'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pslice', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', '_pslice'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'ternary_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'lambda'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'lambda'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FUN_OP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'function'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTERNAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'constructor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'constructor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTERNAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg_list', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_args_list', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'fun_args'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', '_arg_list_ndef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_arg_list_ndef', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'arg_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'var_args_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'scope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'type_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_list_val', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', '_type_list_val'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', '_type_list_val'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_list_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'scope_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'member', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'fun_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fun_call', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_v', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_exp', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'fun_call_args', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_v', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg_list_call_exp', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', 'fun_call_args'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', 'arg_list_call_exp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', 'arg_list_call_exp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', 'arg_list_call_v'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'arg_list_call_v'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'if', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'while', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'do_while', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'do_while', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'construct'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'for', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_ifel', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'else', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': 'else', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'else', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', '_ifel'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'elif'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'else'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'do_while'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'var_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'var_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', 'try'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '__try_plus_2', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', 'catch'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmts', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', 'space'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SPACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', 'class'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'space_list', '__type__': 'NonTerminal'}, {'name': '_class_code_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', 'space_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pspace_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', 'space_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'space_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', 'enum'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_enum_name_list', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', '_enum_name_list'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_stmt', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', 'fun_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', '_class_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_clstmt', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', '_class_code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pspace_name', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NON_LOC', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', '_pspace_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_no_glob', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_space_no_glob', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_no_glob', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': Token('RULE', '_space_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': Token('RULE', 'scope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_pscope_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_pscope_name', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NON_LOC', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': Token('RULE', '_pscope_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_space_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_dot_name', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': Token('RULE', '_scope_no_glob'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': Token('RULE', '_dot_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': Token('RULE', '_space_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_scope_no_glob', '__type__': 'NonTerminal'}, {'name': 'SCOPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 425: {'origin': {'name': Token('RULE', 'return'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 426: {'origin': {'name': Token('RULE', 'raise'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 427: {'origin': {'name': Token('RULE', 'raise'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 428: {'origin': {'name': Token('RULE', 'xstring'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'MULT_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'note', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 429: {'origin': {'name': Token('RULE', 'xstring'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ES_STR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 430: {'origin': {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 431: {'origin': {'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___stmt_plus_0', '__type__': 'NonTerminal'}, {'name': '_END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 432: {'origin': {'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'elif', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 433: {'origin': {'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___ifel_plus_1', '__type__': 'NonTerminal'}, {'name': 'elif', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 434: {'origin': {'name': '__try_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'catch', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 435: {'origin': {'name': '__try_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__try_plus_2', '__type__': 'NonTerminal'}, {'name': 'catch', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
